
==================== FINAL INTERFACE ====================
2018-06-19 08:45:50.3329246 UTC

interface applicativeExercises-0.1.0.0-HyjTDpSECPt6Ni14rKmOa6:ListAndZipListApplicative [orphan module] 8002
  interface hash: 3d04164fe2ac285c7c3296fd8c4e5f3b
  ABI hash: a5284dfd17ddc8cc2427c4935c0394a0
  export-list hash: efee8b9892e123dbbfd46e95b254840a
  orphan hash: d6852c7b6351b9176dad61824fb1d086
  flag hash: 6dcba8fa98615a486371e450629b3fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  ListAndZipListApplicative.append
  ListAndZipListApplicative.arbitraryList
  ListAndZipListApplicative.concat'
  ListAndZipListApplicative.flatMap
  ListAndZipListApplicative.fold
  ListAndZipListApplicative.main
  ListAndZipListApplicative.repeat'
  ListAndZipListApplicative.take'
  ListAndZipListApplicative.zipWith'
  ListAndZipListApplicative.List{ListAndZipListApplicative.Cons ListAndZipListApplicative.Nil}
  ListAndZipListApplicative.ZipList'{ListAndZipListApplicative.ZipList'}
module dependencies:
package dependencies: QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8
                      Win32-2.3.1.1@Win32-2.3.1.1 array-0.5.1.1@array-0.5.1.1
                      base-4.9.1.0
                      base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg
                      bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE
                      comonad-5.0.3@comonad-5.0.3-1sUq9YbosoKHHQrV5x6ifv
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-CQzfOfECEnE83avAm7o1MS
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      semigroupoids-5.2.2@semigroupoids-5.2.2-29VRzL6jdNeJ5YKL7ou1EO
                      tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4
                      template-haskell-2.11.1.0
                      text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE
                      tf-random-0.5@tf-random-0.5-8zb9gy6kAR08bzNKGLuVb6
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje
                      unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-4.9.1.0:Text.Show.Functions
         base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Checkers
         hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo:Data.Hashable.Generic
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje:Control.Monad.Trans.Instances
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Biff
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Clown
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Flip
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Join
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Joker
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Product
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Tannen
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Control.Monad.Primitive
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Data.Primitive.ByteArray
                         tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
                         unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52:Data.HashMap.Base
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck 55aeb09f4e4110693e8dfdacdc6edfd7
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Arbitrary f5e4f9f82b8cb4abf5ae7a89ddae0f3a
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Gen 559aee5fbf43d977859baf9bbde02f34
import  -/  base-4.9.1.0:Control.Applicative 2c56a0c43327cbbcb6e7a55bf05443c9
import  -/  base-4.9.1.0:Data.Functor 682cc832c233b71cec70179490a08631
import  -/  base-4.9.1.0:Data.Monoid 57d0116342e60080b20e7d5f9e1248f9
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Checkers b83cb912dd39bf33d52b71c90524c765
import  -/  checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Classes 3283683c09ba42d569c3d078a907c591
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
520c4825b3734c824b982bc559d925cc
  $fApplicativeList ::
    GHC.Base.Applicative ListAndZipListApplicative.List
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ListAndZipListApplicative.List
                  ListAndZipListApplicative.$fFunctorList
                  ListAndZipListApplicative.$fApplicativeList_$cpure
                  ListAndZipListApplicative.$fApplicativeList_$c<*>
                  ListAndZipListApplicative.$fApplicativeList_$c*>
                  ListAndZipListApplicative.$fApplicativeList_$c<* -}
520c4825b3734c824b982bc559d925cc
  $fApplicativeList_$c*> ::
    ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List b
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: ListAndZipListApplicative.List a)
                   (eta1 :: ListAndZipListApplicative.List b) ->
                 ListAndZipListApplicative.$fApplicativeList_$c<*>
                   @ b
                   @ b
                   (ListAndZipListApplicative.$fApplicativeList_$cfmap
                      @ a
                      @ (b -> b)
                      (\ (ds :: a) (eta2 :: b) -> eta2)
                      eta)
                   eta1) -}
520c4825b3734c824b982bc559d925cc
  $fApplicativeList_$c<* ::
    ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List b
    -> ListAndZipListApplicative.List a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: ListAndZipListApplicative.List a)
                   (eta1 :: ListAndZipListApplicative.List b) ->
                 ListAndZipListApplicative.$fApplicativeList_$c<*>
                   @ b
                   @ a
                   (ListAndZipListApplicative.$fApplicativeList_$cfmap
                      @ a
                      @ (b -> a)
                      (GHC.Base.const @ a @ b)
                      eta)
                   eta1) -}
520c4825b3734c824b982bc559d925cc
  $fApplicativeList_$c<*> ::
    ListAndZipListApplicative.List (a -> b)
    -> ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (ds :: ListAndZipListApplicative.List (a -> b))
                   (ds1 :: ListAndZipListApplicative.List a) ->
                 case ds of wild {
                   ListAndZipListApplicative.Nil -> ListAndZipListApplicative.Nil @ b
                   ListAndZipListApplicative.Cons ipv ipv1
                   -> case ds1 of wild1 {
                        ListAndZipListApplicative.Nil -> ListAndZipListApplicative.Nil @ b
                        ListAndZipListApplicative.Cons ipv2 ipv3
                        -> ListAndZipListApplicative.fold
                             @ (ListAndZipListApplicative.List b)
                             @ (ListAndZipListApplicative.List b)
                             (ListAndZipListApplicative.append @ b)
                             (ListAndZipListApplicative.Nil @ b)
                             (ListAndZipListApplicative.$fApplicativeList_$cfmap
                                @ (a -> b)
                                @ (ListAndZipListApplicative.List b)
                                (\ (x :: a -> b) ->
                                 ListAndZipListApplicative.$fApplicativeList_$cfmap @ a @ b x wild1)
                                wild) } }) -}
520c4825b3734c824b982bc559d925cc
  $fApplicativeList_$cfmap ::
    (a -> b)
    -> ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
520c4825b3734c824b982bc559d925cc
  $fApplicativeList_$cpure :: a -> ListAndZipListApplicative.List a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (y :: a) ->
                 ListAndZipListApplicative.Cons
                   @ a
                   y
                   (ListAndZipListApplicative.Nil @ a)) -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList' ::
    GHC.Base.Applicative ListAndZipListApplicative.ZipList'
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ListAndZipListApplicative.ZipList'
                  ListAndZipListApplicative.$fFunctorZipList'
                  ListAndZipListApplicative.$fApplicativeZipList'_$cpure
                  ListAndZipListApplicative.$fApplicativeZipList'_$c<*>
                  ListAndZipListApplicative.$fApplicativeZipList'_$c*>
                  ListAndZipListApplicative.$fApplicativeZipList'_$c<* -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'1 ::
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' b
    -> ListAndZipListApplicative.List a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (eta :: ListAndZipListApplicative.ZipList' a)
                   (eta1 :: ListAndZipListApplicative.ZipList' b) ->
                 ListAndZipListApplicative.zipWith'
                   @ (b -> a)
                   @ b
                   @ a
                   (GHC.Base.$ @ 'GHC.Types.PtrRepLifted @ b @ a)
                   (ListAndZipListApplicative.$fApplicativeList_$cfmap
                      @ a
                      @ (b -> a)
                      (GHC.Base.const @ a @ b)
                      eta `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N))
                   eta1 `cast` (ListAndZipListApplicative.N:ZipList'[0] <b>_N)) -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'2 ::
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' b
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (eta :: ListAndZipListApplicative.ZipList' a)
                   (eta1 :: ListAndZipListApplicative.ZipList' b) ->
                 ListAndZipListApplicative.zipWith'
                   @ (b -> b)
                   @ b
                   @ b
                   (GHC.Base.$ @ 'GHC.Types.PtrRepLifted @ b @ b)
                   (ListAndZipListApplicative.$fApplicativeList_$cfmap
                      @ a
                      @ (b -> b)
                      (\ (ds :: a) (eta2 :: b) -> eta2)
                      eta `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N))
                   eta1 `cast` (ListAndZipListApplicative.N:ZipList'[0] <b>_N)) -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'3 ::
    ListAndZipListApplicative.ZipList' (a -> b)
    -> ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (ds :: ListAndZipListApplicative.ZipList' (a -> b))
                   (ds1 :: ListAndZipListApplicative.ZipList' a) ->
                 ListAndZipListApplicative.zipWith'
                   @ (a -> b)
                   @ a
                   @ b
                   (GHC.Base.$ @ 'GHC.Types.PtrRepLifted @ a @ b)
                   ds `cast` (ListAndZipListApplicative.N:ZipList'[0] <a -> b>_N)
                   ds1 `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N)) -}
f3be3d00be6421ebff205ef4e9410e86
  $fApplicativeZipList'4 :: a -> ListAndZipListApplicative.List a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, True)
                ListAndZipListApplicative.repeat' -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'_$c*> ::
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' b
    -> ListAndZipListApplicative.ZipList' b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b ->
                 ListAndZipListApplicative.$fApplicativeZipList'2 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <ListAndZipListApplicative.ZipList' a>_R
                 ->_R <ListAndZipListApplicative.ZipList' b>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <b>_N) -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'_$c<* ::
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' b
    -> ListAndZipListApplicative.ZipList' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b ->
                 ListAndZipListApplicative.$fApplicativeZipList'1 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <ListAndZipListApplicative.ZipList' a>_R
                 ->_R <ListAndZipListApplicative.ZipList' b>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N) -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'_$c<*> ::
    ListAndZipListApplicative.ZipList' (a -> b)
    -> ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fApplicativeZipList'3
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <ListAndZipListApplicative.ZipList' (a -> b)>_R
                 ->_R <ListAndZipListApplicative.ZipList' a>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <b>_N) -}
f1642dbabbabf590b5d851575c40e67a
  $fApplicativeZipList'_$cpure ::
    a -> ListAndZipListApplicative.ZipList' a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fApplicativeZipList'4
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (ListAndZipListApplicative.List a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (ListAndZipListApplicative.List a)
                  (ListAndZipListApplicative.$fArbitraryList_$carbitrary
                     @ a
                     $dArbitrary)
                  (ListAndZipListApplicative.$fArbitraryList_$cshrink
                     @ a
                     $dArbitrary) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> ListAndZipListApplicative.List a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,A)><L,U><S(S),U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 (ListAndZipListApplicative.arbitraryList @ a $dArbitrary eta1)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <ListAndZipListApplicative.List a>_R)
                   eta
                   eta1) -}
e94611870e0a143271ecf29c5697c00a
  $fArbitraryList2 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (GHC.Types.Bool -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fArbitraryList_$s$fArbitrary(->) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (ListAndZipListApplicative.List a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,A)><L,U><S(S),U(U)>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fArbitraryList1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <ListAndZipListApplicative.List a>_R)) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    ListAndZipListApplicative.List a
    -> [ListAndZipListApplicative.List a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds :: ListAndZipListApplicative.List a) ->
                 GHC.Types.[] @ (ListAndZipListApplicative.List a)) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList_$s$cshrink ::
    ListAndZipListApplicative.List GHC.Types.Bool
    -> [ListAndZipListApplicative.List GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: ListAndZipListApplicative.List GHC.Types.Bool) ->
                 GHC.Types.[] @ (ListAndZipListApplicative.List GHC.Types.Bool)) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList_$s$cshrink1 ::
    ListAndZipListApplicative.List (GHC.Types.Bool -> GHC.Types.Bool)
    -> [ListAndZipListApplicative.List
          (GHC.Types.Bool -> GHC.Types.Bool)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: ListAndZipListApplicative.List
                            (GHC.Types.Bool -> GHC.Types.Bool)) ->
                 GHC.Types.[]
                   @ (ListAndZipListApplicative.List
                        (GHC.Types.Bool -> GHC.Types.Bool))) -}
edda8f89e6d8e37ba88cb810aea8af2e
  $fArbitraryList_$s$fArbitrary(->) ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (GHC.Types.Bool -> GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Bool -> GHC.Types.Bool)
                  (Test.QuickCheck.Arbitrary.$fArbitrary(->)_$carbitrary
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     Test.QuickCheck.Arbitrary.$fCoArbitraryBool_$ccoarbitrary
                       `cast`
                     (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                               <GHC.Types.Bool>_N))
                     Test.QuickCheck.Arbitrary.$fArbitraryBool)
                  ListAndZipListApplicative.$fArbitraryList_$s$fArbitrary(->)_$cshrink -}
c846aa391b4dbfef649c2b5d6160559a
  $fArbitraryList_$s$fArbitrary(->)_$cshrink ::
    (GHC.Types.Bool -> GHC.Types.Bool)
    -> [GHC.Types.Bool -> GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Bool -> GHC.Types.Bool) ->
                 GHC.Types.[] @ (GHC.Types.Bool -> GHC.Types.Bool)) -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList_$s$fArbitraryList ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (ListAndZipListApplicative.List GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.List GHC.Types.Bool)
                  (ListAndZipListApplicative.$fArbitraryList_$carbitrary
                     @ GHC.Types.Bool
                     Test.QuickCheck.Arbitrary.$fArbitraryBool)
                  ListAndZipListApplicative.$fArbitraryList_$s$cshrink -}
520c4825b3734c824b982bc559d925cc
  $fArbitraryList_$s$fArbitraryList1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (ListAndZipListApplicative.List (GHC.Types.Bool -> GHC.Types.Bool))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.List
                       (GHC.Types.Bool -> GHC.Types.Bool))
                  (ListAndZipListApplicative.$fArbitraryList_$carbitrary
                     @ (GHC.Types.Bool -> GHC.Types.Bool)
                     ListAndZipListApplicative.$fArbitraryList2)
                  ListAndZipListApplicative.$fArbitraryList_$s$cshrink1 -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList' ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (ListAndZipListApplicative.ZipList' a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (ListAndZipListApplicative.ZipList' a)
                  (ListAndZipListApplicative.$fArbitraryZipList'_$carbitrary
                     @ a
                     $dArbitrary)
                  (ListAndZipListApplicative.$fArbitraryZipList'_$cshrink
                     @ a
                     $dArbitrary) -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> ListAndZipListApplicative.ZipList' a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 ListAndZipListApplicative.$w$carbitrary
                   @ a
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (ListAndZipListApplicative.ZipList' a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),U(U)>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fArbitraryZipList'1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <ListAndZipListApplicative.ZipList' a>_R)) -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    ListAndZipListApplicative.ZipList' a
    -> [ListAndZipListApplicative.ZipList' a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds :: ListAndZipListApplicative.ZipList' a) ->
                 GHC.Types.[] @ (ListAndZipListApplicative.ZipList' a)) -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'_$s$cshrink ::
    ListAndZipListApplicative.ZipList' GHC.Types.Bool
    -> [ListAndZipListApplicative.ZipList' GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: ListAndZipListApplicative.ZipList' GHC.Types.Bool) ->
                 GHC.Types.[]
                   @ (ListAndZipListApplicative.ZipList' GHC.Types.Bool)) -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'_$s$cshrink1 ::
    ListAndZipListApplicative.ZipList'
      (GHC.Types.Bool -> GHC.Types.Bool)
    -> [ListAndZipListApplicative.ZipList'
          (GHC.Types.Bool -> GHC.Types.Bool)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: ListAndZipListApplicative.ZipList'
                            (GHC.Types.Bool -> GHC.Types.Bool)) ->
                 GHC.Types.[]
                   @ (ListAndZipListApplicative.ZipList'
                        (GHC.Types.Bool -> GHC.Types.Bool))) -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'_$s$fArbitraryZipList' ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (ListAndZipListApplicative.ZipList' GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.ZipList' GHC.Types.Bool)
                  (ListAndZipListApplicative.$fArbitraryZipList'_$carbitrary
                     @ GHC.Types.Bool
                     Test.QuickCheck.Arbitrary.$fArbitraryBool)
                  ListAndZipListApplicative.$fArbitraryZipList'_$s$cshrink -}
f1642dbabbabf590b5d851575c40e67a
  $fArbitraryZipList'_$s$fArbitraryZipList'1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (ListAndZipListApplicative.ZipList'
         (GHC.Types.Bool -> GHC.Types.Bool))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.ZipList'
                       (GHC.Types.Bool -> GHC.Types.Bool))
                  (ListAndZipListApplicative.$fArbitraryZipList'_$carbitrary
                     @ (GHC.Types.Bool -> GHC.Types.Bool)
                     ListAndZipListApplicative.$fArbitraryList2)
                  ListAndZipListApplicative.$fArbitraryZipList'_$s$cshrink1 -}
520c4825b3734c824b982bc559d925cc
  $fEqList ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (ListAndZipListApplicative.List a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (ListAndZipListApplicative.List a)
                  (ListAndZipListApplicative.$fEqList_$c== @ a $dEq)
                  (ListAndZipListApplicative.$fEqList_$c/= @ a $dEq) -}
520c4825b3734c824b982bc559d925cc
  $fEqList_$c/= ::
    GHC.Classes.Eq a =>
    ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: ListAndZipListApplicative.List a)
                   (b :: ListAndZipListApplicative.List a) ->
                 case ListAndZipListApplicative.$fEqList_$c==
                        @ a
                        $dEq
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
520c4825b3734c824b982bc559d925cc
  $fEqList_$c== ::
    GHC.Classes.Eq a =>
    ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
520c4825b3734c824b982bc559d925cc
  $fEqPropList ::
    GHC.Classes.Eq a =>
    Test.QuickCheck.Checkers.EqProp (ListAndZipListApplicative.List a)
  DFunId
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                ListAndZipListApplicative.$fEqPropList_$c=-=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                               <ListAndZipListApplicative.List a>_N)) -}
520c4825b3734c824b982bc559d925cc
  $fEqPropList_$c=-= ::
    GHC.Classes.Eq a =>
    ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List a
    -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: ListAndZipListApplicative.List a)
                   (a' :: ListAndZipListApplicative.List a) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case ListAndZipListApplicative.$fEqList_$c==
                                  @ a
                                  $dEq
                                  a1
                                  a' of wild {
                             GHC.Types.False -> Test.QuickCheck.Property.counterexample1
                             GHC.Types.True -> Test.QuickCheck.Property.succeeded })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
ffa889b169f03db78af96a3bc2bfa8ac
  $fEqPropZipList ::
    GHC.Classes.Eq a =>
    Test.QuickCheck.Checkers.EqProp (Control.Applicative.ZipList a)
  DFunId
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                ListAndZipListApplicative.$fEqPropZipList_$c=-=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                               <Control.Applicative.ZipList a>_N)) -}
f1642dbabbabf590b5d851575c40e67a
  $fEqPropZipList' ::
    GHC.Classes.Eq a =>
    Test.QuickCheck.Checkers.EqProp
      (ListAndZipListApplicative.ZipList' a)
  DFunId
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                ListAndZipListApplicative.$fEqPropZipList'_$c=-=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                               <ListAndZipListApplicative.ZipList' a>_N)) -}
edf458b19af524ac4cb00a71f49d4212
  $fEqPropZipList'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3000#) -}
f1642dbabbabf590b5d851575c40e67a
  $fEqPropZipList'_$c=-= ::
    GHC.Classes.Eq a =>
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' a
    -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (xs :: ListAndZipListApplicative.ZipList' a)
                   (ys :: ListAndZipListApplicative.ZipList' a) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case ListAndZipListApplicative.$fEqList_$c==
                                  @ a
                                  $dEq
                                  (ListAndZipListApplicative.take'
                                     @ a
                                     ListAndZipListApplicative.$fEqPropZipList'1
                                     xs `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N))
                                  (ListAndZipListApplicative.take'
                                     @ a
                                     ListAndZipListApplicative.$fEqPropZipList'1
                                     ys
                                       `cast`
                                     (ListAndZipListApplicative.N:ZipList'[0] <a>_N)) of wild {
                             GHC.Types.False -> Test.QuickCheck.Property.counterexample1
                             GHC.Types.True -> Test.QuickCheck.Property.succeeded })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
29da5c179dc12f5b8d322ca6d6940145
  $fEqPropZipList_$c=-= ::
    GHC.Classes.Eq a =>
    Control.Applicative.ZipList a
    -> Control.Applicative.ZipList a
    -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Control.Applicative.ZipList a)
                   (a' :: Control.Applicative.ZipList a) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case GHC.Classes.$fEq[]_$c==
                                  @ a
                                  $dEq
                                  a1 `cast` (Control.Applicative.N:ZipList[0] <a>_N)
                                  a' `cast` (Control.Applicative.N:ZipList[0] <a>_N) of wild {
                             GHC.Types.False -> Test.QuickCheck.Property.counterexample1
                             GHC.Types.True -> Test.QuickCheck.Property.succeeded })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
f1642dbabbabf590b5d851575c40e67a
  $fEqZipList' ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (ListAndZipListApplicative.ZipList' a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (ListAndZipListApplicative.ZipList' a)
                  (ListAndZipListApplicative.$fEqZipList'_$c== @ a $dEq)
                  (ListAndZipListApplicative.$fEqZipList'_$c/= @ a $dEq) -}
f1642dbabbabf590b5d851575c40e67a
  $fEqZipList'_$c/= ::
    GHC.Classes.Eq a =>
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fEqList_$c/=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
f1642dbabbabf590b5d851575c40e67a
  $fEqZipList'_$c== ::
    GHC.Classes.Eq a =>
    ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fEqList_$c==
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
520c4825b3734c824b982bc559d925cc
  $fFunctorList :: GHC.Base.Functor ListAndZipListApplicative.List
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ListAndZipListApplicative.List
                  ListAndZipListApplicative.$fApplicativeList_$cfmap
                  ListAndZipListApplicative.$fFunctorList_$c<$ -}
520c4825b3734c824b982bc559d925cc
  $fFunctorList_$c<$ ::
    a
    -> ListAndZipListApplicative.List b
    -> ListAndZipListApplicative.List a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: ListAndZipListApplicative.List b) ->
                 ListAndZipListApplicative.$fApplicativeList_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> eta)
                   eta1) -}
f1642dbabbabf590b5d851575c40e67a
  $fFunctorZipList' ::
    GHC.Base.Functor ListAndZipListApplicative.ZipList'
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ListAndZipListApplicative.ZipList'
                  ListAndZipListApplicative.$fFunctorZipList'_$cfmap
                  ListAndZipListApplicative.$fFunctorZipList'_$c<$ -}
f1642dbabbabf590b5d851575c40e67a
  $fFunctorZipList'1 ::
    a
    -> ListAndZipListApplicative.ZipList' b
    -> ListAndZipListApplicative.List a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: ListAndZipListApplicative.ZipList' b) ->
                 ListAndZipListApplicative.$fApplicativeList_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> eta)
                   eta1 `cast` (ListAndZipListApplicative.N:ZipList'[0] <b>_N)) -}
f1642dbabbabf590b5d851575c40e67a
  $fFunctorZipList'2 ::
    (a -> b)
    -> ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: ListAndZipListApplicative.ZipList' a) ->
                 ListAndZipListApplicative.$fApplicativeList_$cfmap
                   @ a
                   @ b
                   f
                   ds `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N)) -}
f1642dbabbabf590b5d851575c40e67a
  $fFunctorZipList'_$c<$ ::
    a
    -> ListAndZipListApplicative.ZipList' b
    -> ListAndZipListApplicative.ZipList' a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fFunctorZipList'1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <ListAndZipListApplicative.ZipList' b>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N) -}
f1642dbabbabf590b5d851575c40e67a
  $fFunctorZipList'_$cfmap ::
    (a -> b)
    -> ListAndZipListApplicative.ZipList' a
    -> ListAndZipListApplicative.ZipList' b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fFunctorZipList'2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <ListAndZipListApplicative.ZipList' a>_R
                 ->_R Sym (ListAndZipListApplicative.N:ZipList'[0]) <b>_N) -}
7963213c6a4f19f275a3d2e357da4ed8
  $fMonoidZipList ::
    GHC.Base.Monoid a =>
    GHC.Base.Monoid (Control.Applicative.ZipList a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dMonoid :: GHC.Base.Monoid a).
                  @ (Control.Applicative.ZipList a)
                  (ListAndZipListApplicative.$fMonoidZipList_$cmempty @ a $dMonoid)
                  (ListAndZipListApplicative.$fMonoidZipList_$cmappend @ a $dMonoid)
                  (ListAndZipListApplicative.$fMonoidZipList_$cmconcat
                     @ a
                     $dMonoid) -}
496102ffea188936ce9920a43a3c78ef
  $fMonoidZipList1 ::
    GHC.Base.Monoid a =>
    Control.Applicative.ZipList a
    -> Control.Applicative.ZipList a -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A)><S,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dMonoid :: GHC.Base.Monoid a)
                   (eta :: Control.Applicative.ZipList a)
                   (eta1 :: Control.Applicative.ZipList a) ->
                 let {
                   f :: a -> a -> a = GHC.Base.mappend @ a $dMonoid
                 } in
                 letrec {
                   go :: [a] -> [a] -> [a] {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [a]) (eta2 :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys
                       -> case eta2 of wild1 {
                            [] -> GHC.Types.[] @ a
                            : y1 ys1 -> GHC.Types.: @ a (f y y1) (go ys ys1) } }
                 } in
                 go
                   eta `cast` (Control.Applicative.N:ZipList[0] <a>_N)
                   eta1 `cast` (Control.Applicative.N:ZipList[0] <a>_N)) -}
5453d263d3a53a1c2f6a2c991753c67f
  $fMonoidZipList2 :: GHC.Base.Monoid a => [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dMonoid :: GHC.Base.Monoid a) ->
                 let {
                   x :: a = GHC.Base.mempty @ a $dMonoid
                 } in
                 letrec { xs :: [a] = GHC.Types.: @ a x xs } in xs) -}
4450ae6576b61c49bf65a2486fc4faa7
  $fMonoidZipList_$cmappend ::
    GHC.Base.Monoid a =>
    Control.Applicative.ZipList a
    -> Control.Applicative.ZipList a -> Control.Applicative.ZipList a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A)><S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fMonoidZipList1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.Monoid a>_R
                 ->_R <Control.Applicative.ZipList a>_R
                 ->_R <Control.Applicative.ZipList a>_R
                 ->_R Sym (Control.Applicative.N:ZipList[0]) <a>_N) -}
2074dde30e0c528f73675ed86ed7b3ec
  $fMonoidZipList_$cmconcat ::
    GHC.Base.Monoid a =>
    [Control.Applicative.ZipList a] -> Control.Applicative.ZipList a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(1*U,U,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dMonoid :: GHC.Base.Monoid a)
                   (eta :: [Control.Applicative.ZipList a]) ->
                 let {
                   x :: a = GHC.Base.mempty @ a $dMonoid
                 } in
                 letrec {
                   xs :: [a] = GHC.Types.: @ a x xs
                 } in
                 letrec {
                   go :: [Control.Applicative.ZipList a]
                         -> Control.Applicative.ZipList a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Control.Applicative.ZipList a]) ->
                     case ds of wild {
                       [] -> xs `cast` (Sym (Control.Applicative.N:ZipList[0]) <a>_N)
                       : y ys
                       -> (ListAndZipListApplicative.$fMonoidZipList1
                             @ a
                             $dMonoid
                             y
                             (go ys))
                            `cast`
                          (Sym (Control.Applicative.N:ZipList[0]) <a>_N) }
                 } in
                 go eta) -}
0f0adc59602c79c5c16327ea8ccf564c
  $fMonoidZipList_$cmempty ::
    GHC.Base.Monoid a => Control.Applicative.ZipList a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.$fMonoidZipList2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.Monoid a>_R
                 ->_R Sym (Control.Applicative.N:ZipList[0]) <a>_N) -}
520c4825b3734c824b982bc559d925cc
  $fShowList ::
    GHC.Show.Show a => GHC.Show.Show (ListAndZipListApplicative.List a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (ListAndZipListApplicative.List a)
                  (ListAndZipListApplicative.$fShowList_$cshowsPrec @ a $dShow)
                  (ListAndZipListApplicative.$fShowList_$cshow @ a $dShow)
                  (ListAndZipListApplicative.$fShowList_$cshowList @ a $dShow) -}
520c4825b3734c824b982bc559d925cc
  $fShowList1 ::
    ListAndZipListApplicative.List GHC.Types.Bool -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (ListAndZipListApplicative.$fShowList_$s$cshowsPrec
                   ListAndZipListApplicative.$fShowList2) -}
985958954cf813432a14ad7ae73f09a9
  $fShowList2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
520c4825b3734c824b982bc559d925cc
  $fShowList3 ::
    ListAndZipListApplicative.List (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (ListAndZipListApplicative.$fShowList_$s$cshowsPrec1
                   ListAndZipListApplicative.$fShowList2) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$cshow ::
    GHC.Show.Show a =>
    ListAndZipListApplicative.List a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: ListAndZipListApplicative.List a) ->
                 ListAndZipListApplicative.$fShowList_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$cshowList ::
    GHC.Show.Show a =>
    [ListAndZipListApplicative.List a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [ListAndZipListApplicative.List a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ListAndZipListApplicative.List a)
                   (ListAndZipListApplicative.$fShowList_$cshowsPrec
                      @ a
                      $dShow
                      ListAndZipListApplicative.$fShowList2)
                   eta
                   eta1) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> ListAndZipListApplicative.List a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$cshow ::
    ListAndZipListApplicative.List GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ListAndZipListApplicative.List GHC.Types.Bool) ->
                 ListAndZipListApplicative.$fShowList_$s$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$cshow1 ::
    ListAndZipListApplicative.List (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ListAndZipListApplicative.List
                           (GHC.Types.Bool -> GHC.Types.Bool)) ->
                 ListAndZipListApplicative.$fShowList_$s$cshowsPrec1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$cshowList ::
    [ListAndZipListApplicative.List GHC.Types.Bool] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [ListAndZipListApplicative.List GHC.Types.Bool])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ListAndZipListApplicative.List GHC.Types.Bool)
                   ListAndZipListApplicative.$fShowList1
                   eta
                   eta1) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$cshowList1 ::
    [ListAndZipListApplicative.List (GHC.Types.Bool -> GHC.Types.Bool)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [ListAndZipListApplicative.List
                              (GHC.Types.Bool -> GHC.Types.Bool)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ListAndZipListApplicative.List
                        (GHC.Types.Bool -> GHC.Types.Bool))
                   ListAndZipListApplicative.$fShowList3
                   eta
                   eta1) -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$cshowsPrec ::
    GHC.Types.Int
    -> ListAndZipListApplicative.List GHC.Types.Bool -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> ListAndZipListApplicative.List
         (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$fShowList ::
    GHC.Show.Show (ListAndZipListApplicative.List GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.List GHC.Types.Bool)
                  ListAndZipListApplicative.$fShowList_$s$cshowsPrec
                  ListAndZipListApplicative.$fShowList_$s$cshow
                  ListAndZipListApplicative.$fShowList_$s$cshowList -}
520c4825b3734c824b982bc559d925cc
  $fShowList_$s$fShowList1 ::
    GHC.Show.Show
      (ListAndZipListApplicative.List (GHC.Types.Bool -> GHC.Types.Bool))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.List
                       (GHC.Types.Bool -> GHC.Types.Bool))
                  ListAndZipListApplicative.$fShowList_$s$cshowsPrec1
                  ListAndZipListApplicative.$fShowList_$s$cshow1
                  ListAndZipListApplicative.$fShowList_$s$cshowList1 -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList' ::
    GHC.Show.Show a =>
    GHC.Show.Show (ListAndZipListApplicative.ZipList' a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (ListAndZipListApplicative.ZipList' a)
                  (ListAndZipListApplicative.$fShowZipList'_$cshowsPrec @ a $dShow)
                  (ListAndZipListApplicative.$fShowZipList'_$cshow @ a $dShow)
                  (ListAndZipListApplicative.$fShowZipList'_$cshowList @ a $dShow) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'1 ::
    ListAndZipListApplicative.ZipList' GHC.Types.Bool -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ListAndZipListApplicative.ZipList'
                           GHC.Types.Bool)
                   (w1 :: GHC.Base.String) ->
                 ListAndZipListApplicative.$w$s$cshowsPrec 0# w w1) -}
45d59b1fe5b2a8a6bf6607d5df0a401d
  $fShowZipList'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
a6285a5eccd689f86eb551db1704ce7a
  $fShowZipList'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZipList' "#) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'4 ::
    ListAndZipListApplicative.ZipList'
      (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ListAndZipListApplicative.ZipList'
                           (GHC.Types.Bool -> GHC.Types.Bool))
                   (w1 :: GHC.Base.String) ->
                 ListAndZipListApplicative.$w$s$cshowsPrec1 0# w w1) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$cshow ::
    GHC.Show.Show a =>
    ListAndZipListApplicative.ZipList' a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: ListAndZipListApplicative.ZipList' a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      ListAndZipListApplicative.$fShowZipList'3)
                   (ListAndZipListApplicative.$fShowList_$cshowsPrec
                      @ a
                      $dShow
                      ListAndZipListApplicative.$fShowZipList'2
                      x `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$cshowList ::
    GHC.Show.Show a =>
    [ListAndZipListApplicative.ZipList' a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [ListAndZipListApplicative.ZipList' a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ListAndZipListApplicative.ZipList' a)
                   (ListAndZipListApplicative.$fShowZipList'_$cshowsPrec
                      @ a
                      $dShow
                      ListAndZipListApplicative.$fShowList2)
                   eta
                   eta1) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> ListAndZipListApplicative.ZipList' a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: ListAndZipListApplicative.ZipList' a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 ListAndZipListApplicative.$w$cshowsPrec @ a w ww1 w2 }) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$cshow ::
    ListAndZipListApplicative.ZipList' GHC.Types.Bool
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ListAndZipListApplicative.ZipList' GHC.Types.Bool) ->
                 ListAndZipListApplicative.$fShowZipList'_$s$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$cshow1 ::
    ListAndZipListApplicative.ZipList'
      (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ListAndZipListApplicative.ZipList'
                           (GHC.Types.Bool -> GHC.Types.Bool)) ->
                 ListAndZipListApplicative.$fShowZipList'_$s$cshowsPrec1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$cshowList ::
    [ListAndZipListApplicative.ZipList' GHC.Types.Bool]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [ListAndZipListApplicative.ZipList' GHC.Types.Bool])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ListAndZipListApplicative.ZipList' GHC.Types.Bool)
                   ListAndZipListApplicative.$fShowZipList'1
                   eta
                   eta1) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$cshowList1 ::
    [ListAndZipListApplicative.ZipList'
       (GHC.Types.Bool -> GHC.Types.Bool)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [ListAndZipListApplicative.ZipList'
                              (GHC.Types.Bool -> GHC.Types.Bool)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ListAndZipListApplicative.ZipList'
                        (GHC.Types.Bool -> GHC.Types.Bool))
                   ListAndZipListApplicative.$fShowZipList'4
                   eta
                   eta1) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$cshowsPrec ::
    GHC.Types.Int
    -> ListAndZipListApplicative.ZipList' GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ListAndZipListApplicative.ZipList' GHC.Types.Bool)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ListAndZipListApplicative.$w$s$cshowsPrec ww1 w1 w2 }) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> ListAndZipListApplicative.ZipList'
         (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ListAndZipListApplicative.ZipList'
                            (GHC.Types.Bool -> GHC.Types.Bool))
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ListAndZipListApplicative.$w$s$cshowsPrec1 ww1 w1 w2 }) -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$fShowZipList' ::
    GHC.Show.Show (ListAndZipListApplicative.ZipList' GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.ZipList' GHC.Types.Bool)
                  ListAndZipListApplicative.$fShowZipList'_$s$cshowsPrec
                  ListAndZipListApplicative.$fShowZipList'_$s$cshow
                  ListAndZipListApplicative.$fShowZipList'_$s$cshowList -}
f1642dbabbabf590b5d851575c40e67a
  $fShowZipList'_$s$fShowZipList'1 ::
    GHC.Show.Show
      (ListAndZipListApplicative.ZipList'
         (GHC.Types.Bool -> GHC.Types.Bool))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ListAndZipListApplicative.ZipList'
                       (GHC.Types.Bool -> GHC.Types.Bool))
                  ListAndZipListApplicative.$fShowZipList'_$s$cshowsPrec1
                  ListAndZipListApplicative.$fShowZipList'_$s$cshow1
                  ListAndZipListApplicative.$fShowZipList'_$s$cshowList1 -}
042a7ae3523239d3819f638a7d696e21
  $tc'Cons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   450253032318945626##
                   11463207314492519186##
                   ListAndZipListApplicative.$trModule
                   ListAndZipListApplicative.$tc'Cons1) -}
4321f3e7bdafe8f3ef3f0aa80d7a4ba4
  $tc'Cons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cons"#) -}
76653b299f899d63eb3bf746e84cd516
  $tc'Nil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11228595711808181455##
                   14845939273035932496##
                   ListAndZipListApplicative.$trModule
                   ListAndZipListApplicative.$tc'Nil1) -}
4a4744a575f5ff8982249dcb1167d6d1
  $tc'Nil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nil"#) -}
98a6a658d483f49b2d35bfcf82406fca
  $tc'ZipList' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15531723492864667532##
                   14784638476078207500##
                   ListAndZipListApplicative.$trModule
                   ListAndZipListApplicative.$tc'ZipList'1) -}
6556efc40a410c5eb59ecb2bda088350
  $tc'ZipList'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ZipList'"#) -}
8966221467997a34c80cabf8cc086b71
  $tcList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11207478098701155475##
                   8193257563133794425##
                   ListAndZipListApplicative.$trModule
                   ListAndZipListApplicative.$tcList1) -}
e47fa2e0f854ff700a51ffa81d038e5e
  $tcList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "List"#) -}
4d482d65bea1cab5fdd55ac6ace665c6
  $tcZipList' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10885860674294896966##
                   1022525599635263107##
                   ListAndZipListApplicative.$trModule
                   ListAndZipListApplicative.$tcZipList'1) -}
fa750b339127da978b7d5da2485d6c5e
  $tcZipList'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ZipList'"#) -}
2fa92f8a9b7c7a97017795d94544b5d4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ListAndZipListApplicative.$trModule2
                   ListAndZipListApplicative.$trModule1) -}
7dfc43b480395e93386c5c8549448728
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ListAndZipListApplicative"#) -}
08ec727cbdbf074d26a94312f28b29f4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "applicativeExercises-0.1.0.0-HyjTDpSECPt6Ni14rKmOa6"#) -}
f1642dbabbabf590b5d851575c40e67a
  $w$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ListAndZipListApplicative.ZipList' a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(U,A)><S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 ((ListAndZipListApplicative.$warbitraryList @ a w ww4)
                    `cast`
                  (Test.QuickCheck.Gen.N:Gen[0] <ListAndZipListApplicative.List a>_R)
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    (GHC.Types.I# ww4))
                   `cast`
                 (Sym (ListAndZipListApplicative.N:ZipList'[0]) <a>_N) }) -}
f1642dbabbabf590b5d851575c40e67a
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> ListAndZipListApplicative.ZipList' a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: ListAndZipListApplicative.ZipList' a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = ListAndZipListApplicative.$fShowList_$cshowsPrec
                       @ a
                       w
                       ListAndZipListApplicative.$fShowZipList'2
                       w1 `cast` (ListAndZipListApplicative.N:ZipList'[0] <a>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ListAndZipListApplicative.$fShowZipList'3
                        (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ListAndZipListApplicative.$fShowZipList'3
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
f1642dbabbabf590b5d851575c40e67a
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> ListAndZipListApplicative.ZipList' GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: ListAndZipListApplicative.ZipList' GHC.Types.Bool)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ListAndZipListApplicative.$fShowZipList'3
                        (ListAndZipListApplicative.$fShowList_$s$cshowsPrec
                           ListAndZipListApplicative.$fShowZipList'2
                           w `cast`
                           (ListAndZipListApplicative.N:ZipList'[0] <GHC.Types.Bool>_N)
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ListAndZipListApplicative.$fShowZipList'3
                           (ListAndZipListApplicative.$fShowList_$s$cshowsPrec
                              ListAndZipListApplicative.$fShowZipList'2
                              w `cast`
                              (ListAndZipListApplicative.N:ZipList'[0] <GHC.Types.Bool>_N)
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }) -}
f1642dbabbabf590b5d851575c40e67a
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> ListAndZipListApplicative.ZipList'
         (GHC.Types.Bool -> GHC.Types.Bool)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: ListAndZipListApplicative.ZipList'
                           (GHC.Types.Bool -> GHC.Types.Bool))
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ListAndZipListApplicative.$fShowZipList'3
                        (ListAndZipListApplicative.$fShowList_$s$cshowsPrec1
                           ListAndZipListApplicative.$fShowZipList'2
                           w `cast`
                           (ListAndZipListApplicative.N:ZipList'[0] <GHC.Types.Bool
                                                                     -> GHC.Types.Bool>_N)
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ListAndZipListApplicative.$fShowZipList'3
                           (ListAndZipListApplicative.$fShowList_$s$cshowsPrec1
                              ListAndZipListApplicative.$fShowZipList'2
                              w `cast`
                              (ListAndZipListApplicative.N:ZipList'[0] <GHC.Types.Bool
                                                                        -> GHC.Types.Bool>_N)
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }) -}
520c4825b3734c824b982bc559d925cc
  $warbitraryList ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.Int#
    -> Test.QuickCheck.Gen.Gen (ListAndZipListApplicative.List a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,A)><S,1*U>,
     Inline: [0] -}
db6c487ce4a6fca687e8227796a1c835
  $wrepeat' :: a -> (# a, ListAndZipListApplicative.List a #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
520c4825b3734c824b982bc559d925cc
  data List a = Nil | Cons a (ListAndZipListApplicative.List a)
f1642dbabbabf590b5d851575c40e67a
  newtype ZipList' a = ZipList' (ListAndZipListApplicative.List a)
520c4825b3734c824b982bc559d925cc
  append ::
    ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
520c4825b3734c824b982bc559d925cc
  arbitraryList ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Types.Int
    -> Test.QuickCheck.Gen.Gen (ListAndZipListApplicative.List a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,A)><S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 ListAndZipListApplicative.$warbitraryList @ a w ww1 }) -}
e426dc7c0cead7b5a2551b963152b5e4
  concat' ::
    ListAndZipListApplicative.List (ListAndZipListApplicative.List a)
    -> ListAndZipListApplicative.List a
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 ListAndZipListApplicative.fold
                   @ (ListAndZipListApplicative.List a)
                   @ (ListAndZipListApplicative.List a)
                   (ListAndZipListApplicative.append @ a)
                   (ListAndZipListApplicative.Nil @ a)) -}
10254f9bc712e58cc88adcbc2cb3a724
  flatMap ::
    (a -> ListAndZipListApplicative.List b)
    -> ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> ListAndZipListApplicative.List b)
                   (as :: ListAndZipListApplicative.List a) ->
                 ListAndZipListApplicative.fold
                   @ (ListAndZipListApplicative.List b)
                   @ (ListAndZipListApplicative.List b)
                   (ListAndZipListApplicative.append @ b)
                   (ListAndZipListApplicative.Nil @ b)
                   (ListAndZipListApplicative.$fApplicativeList_$cfmap
                      @ a
                      @ (ListAndZipListApplicative.List b)
                      f
                      as)) -}
520c4825b3734c824b982bc559d925cc
  fold :: (a -> b -> b) -> b -> ListAndZipListApplicative.List a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,1*U><S,1*U> -}
14662247ebbc27d8ab28fefa811c58c0
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                ListAndZipListApplicative.main1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
43e969e034ab6f7d5d3e439b2c261413
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ListAndZipListApplicative.main6
                        ListAndZipListApplicative.main4 of ww { (,) ww1 ww2 ->
                 case Test.QuickCheck.Checkers.$wcheckBatch
                        Test.QuickCheck.Checkers.quick'
                        ww1
                        ww2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ListAndZipListApplicative.main2
                        ListAndZipListApplicative.main4
                          `cast`
                        (Sym (ListAndZipListApplicative.N:ZipList'[0]) <(GHC.Types.Bool,
                                                                         GHC.Types.Bool,
                                                                         GHC.Types.Bool)>_N) of ww4 { (,) ww5 ww6 ->
                 Test.QuickCheck.Checkers.$wcheckBatch
                   Test.QuickCheck.Checkers.quick'
                   ww5
                   ww6
                   ipv } } }) -}
d57dfc7e7720b44a104b64690eb46c5b
  main2 ::
    ListAndZipListApplicative.ZipList'
      (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool)
    -> Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Test.QuickCheck.Classes.applicative
                   @ ListAndZipListApplicative.ZipList'
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   ListAndZipListApplicative.$fApplicativeZipList'
                   Test.QuickCheck.Arbitrary.$fArbitraryBool
                   Test.QuickCheck.Arbitrary.$fCoArbitraryAll1
                     `cast`
                   (Trans
                        (forall (b :: <*>_N).
                         <GHC.Types.Bool>_R
                         ->_R <Test.QuickCheck.Gen.Gen b>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b>_R))
                        (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                  <GHC.Types.Bool>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool
                   ListAndZipListApplicative.$fArbitraryZipList'_$s$fArbitraryZipList'
                   ListAndZipListApplicative.$fArbitraryZipList'_$s$fArbitraryZipList'1
                   ListAndZipListApplicative.$fShowZipList'_$s$fShowZipList'1
                   ListAndZipListApplicative.$fArbitraryZipList'_$s$fArbitraryZipList'1
                   ListAndZipListApplicative.$fShowZipList'_$s$fShowZipList'1
                   GHC.Show.$fShowBool
                   ListAndZipListApplicative.$fShowZipList'_$s$fShowZipList'
                   ListAndZipListApplicative.main3
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                             <ListAndZipListApplicative.ZipList' GHC.Types.Bool>_N))
                   ListAndZipListApplicative.main3
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                             <ListAndZipListApplicative.ZipList' GHC.Types.Bool>_N))
                   ListAndZipListApplicative.main3
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                             <ListAndZipListApplicative.ZipList' GHC.Types.Bool>_N))) -}
eebcc6666cbe91cae09d73b66b36df39
  main3 ::
    ListAndZipListApplicative.ZipList' GHC.Types.Bool
    -> ListAndZipListApplicative.ZipList' GHC.Types.Bool
    -> Test.QuickCheck.Property.Property
  {- Arity: 2,
     Unfolding: (ListAndZipListApplicative.$fEqPropZipList'_$c=-=
                   @ GHC.Types.Bool
                   GHC.Classes.$fEqBool) -}
a5941fb44a73ae4f791b0124febd7479
  main4 ::
    ListAndZipListApplicative.List
      (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool)
  {- HasNoCafRefs,
     Unfolding: (ListAndZipListApplicative.Cons
                   @ (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool)
                   ListAndZipListApplicative.main5
                   (ListAndZipListApplicative.Nil
                      @ (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool))) -}
cd2f2e3af60ffe792a636746f51ff98c
  main5 :: (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool)
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.True, GHC.Types.False, GHC.Types.False)) -}
2c45ce89ea5cec4f70caeef6d0af385b
  main6 ::
    ListAndZipListApplicative.List
      (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool)
    -> Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Test.QuickCheck.Classes.applicative
                   @ ListAndZipListApplicative.List
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   ListAndZipListApplicative.$fApplicativeList
                   Test.QuickCheck.Arbitrary.$fArbitraryBool
                   Test.QuickCheck.Arbitrary.$fCoArbitraryAll1
                     `cast`
                   (Trans
                        (forall (b :: <*>_N).
                         <GHC.Types.Bool>_R
                         ->_R <Test.QuickCheck.Gen.Gen b>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b>_R))
                        (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                  <GHC.Types.Bool>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryBool
                   ListAndZipListApplicative.$fArbitraryList_$s$fArbitraryList
                   ListAndZipListApplicative.$fArbitraryList_$s$fArbitraryList1
                   ListAndZipListApplicative.$fShowList_$s$fShowList1
                   ListAndZipListApplicative.$fArbitraryList_$s$fArbitraryList1
                   ListAndZipListApplicative.$fShowList_$s$fShowList1
                   GHC.Show.$fShowBool
                   ListAndZipListApplicative.$fShowList_$s$fShowList
                   ListAndZipListApplicative.main7
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                             <ListAndZipListApplicative.List GHC.Types.Bool>_N))
                   ListAndZipListApplicative.main7
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                             <ListAndZipListApplicative.List GHC.Types.Bool>_N))
                   ListAndZipListApplicative.main7
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                             <ListAndZipListApplicative.List GHC.Types.Bool>_N))) -}
b5d32b1ea36b1c5027160751c48e67c9
  main7 ::
    ListAndZipListApplicative.List GHC.Types.Bool
    -> ListAndZipListApplicative.List GHC.Types.Bool
    -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (a1 :: ListAndZipListApplicative.List GHC.Types.Bool)
                   (a' :: ListAndZipListApplicative.List GHC.Types.Bool) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case ListAndZipListApplicative.$fEqList_$c==
                                  @ GHC.Types.Bool
                                  GHC.Classes.$fEqBool
                                  a1
                                  a' of wild {
                             GHC.Types.False -> Test.QuickCheck.Property.counterexample1
                             GHC.Types.True -> Test.QuickCheck.Property.succeeded })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
7285196fd049cbd5fd1255a4fd5388ed
  repeat' :: a -> ListAndZipListApplicative.List a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: a) ->
                 case ListAndZipListApplicative.$wrepeat'
                        @ a
                        w of ww { (#,#) ww1 ww2 ->
                 ListAndZipListApplicative.Cons @ a ww1 ww2 }) -}
ad4316c512955afb2b35398678fe3114
  take' ::
    GHC.Types.Int
    -> ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*U)><S,1*U> -}
485cf5d47147536cc2600a52d2729a54
  zipWith' ::
    (a -> b -> c)
    -> ListAndZipListApplicative.List a
    -> ListAndZipListApplicative.List b
    -> ListAndZipListApplicative.List c
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><S,1*U><L,1*U> -}
instance GHC.Base.Applicative [ListAndZipListApplicative.List]
  = ListAndZipListApplicative.$fApplicativeList
instance GHC.Base.Applicative [ListAndZipListApplicative.ZipList']
  = ListAndZipListApplicative.$fApplicativeZipList'
instance Test.QuickCheck.Arbitrary.Arbitrary [ListAndZipListApplicative.List]
  = ListAndZipListApplicative.$fArbitraryList
instance Test.QuickCheck.Arbitrary.Arbitrary [ListAndZipListApplicative.ZipList']
  = ListAndZipListApplicative.$fArbitraryZipList'
instance GHC.Classes.Eq [ListAndZipListApplicative.List]
  = ListAndZipListApplicative.$fEqList
instance Test.QuickCheck.Checkers.EqProp [ListAndZipListApplicative.List]
  = ListAndZipListApplicative.$fEqPropList
instance Test.QuickCheck.Checkers.EqProp [Control.Applicative.ZipList]
  = ListAndZipListApplicative.$fEqPropZipList
instance Test.QuickCheck.Checkers.EqProp [ListAndZipListApplicative.ZipList']
  = ListAndZipListApplicative.$fEqPropZipList'
instance GHC.Classes.Eq [ListAndZipListApplicative.ZipList']
  = ListAndZipListApplicative.$fEqZipList'
instance GHC.Base.Functor [ListAndZipListApplicative.List]
  = ListAndZipListApplicative.$fFunctorList
instance GHC.Base.Functor [ListAndZipListApplicative.ZipList']
  = ListAndZipListApplicative.$fFunctorZipList'
instance GHC.Base.Monoid [Control.Applicative.ZipList]
  = ListAndZipListApplicative.$fMonoidZipList
instance GHC.Show.Show [ListAndZipListApplicative.List]
  = ListAndZipListApplicative.$fShowList
instance GHC.Show.Show [ListAndZipListApplicative.ZipList']
  = ListAndZipListApplicative.$fShowZipList'
"SPEC $cshow @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowList_$cshow @ (GHC.Types.Bool
                                                 -> GHC.Types.Bool)
                                              $dShow
  = ListAndZipListApplicative.$fShowList_$s$cshow1
"SPEC $cshow @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowZipList'_$cshow @ (GHC.Types.Bool
                                                     -> GHC.Types.Bool)
                                                  $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$cshow1
"SPEC $cshow @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                  GHC.Types.Bool)
  ListAndZipListApplicative.$fShowList_$cshow @ GHC.Types.Bool $dShow
  = ListAndZipListApplicative.$fShowList_$s$cshow
"SPEC $cshow @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                  GHC.Types.Bool)
  ListAndZipListApplicative.$fShowZipList'_$cshow @ GHC.Types.Bool
                                                  $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$cshow
"SPEC $cshowList @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowList_$cshowList @ (GHC.Types.Bool
                                                     -> GHC.Types.Bool)
                                                  $dShow
  = ListAndZipListApplicative.$fShowList_$s$cshowList1
"SPEC $cshowList @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowZipList'_$cshowList @ (GHC.Types.Bool
                                                         -> GHC.Types.Bool)
                                                      $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$cshowList1
"SPEC $cshowList @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      GHC.Types.Bool)
  ListAndZipListApplicative.$fShowList_$cshowList @ GHC.Types.Bool
                                                  $dShow
  = ListAndZipListApplicative.$fShowList_$s$cshowList
"SPEC $cshowList @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      GHC.Types.Bool)
  ListAndZipListApplicative.$fShowZipList'_$cshowList @ GHC.Types.Bool
                                                      $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$cshowList
"SPEC $cshowsPrec @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowList_$cshowsPrec @ (GHC.Types.Bool
                                                      -> GHC.Types.Bool)
                                                   $dShow
  = ListAndZipListApplicative.$fShowList_$s$cshowsPrec1
"SPEC $cshowsPrec @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowZipList'_$cshowsPrec @ (GHC.Types.Bool
                                                          -> GHC.Types.Bool)
                                                       $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$cshowsPrec1
"SPEC $cshowsPrec @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       GHC.Types.Bool)
  ListAndZipListApplicative.$fShowList_$cshowsPrec @ GHC.Types.Bool
                                                   $dShow
  = ListAndZipListApplicative.$fShowList_$s$cshowsPrec
"SPEC $cshowsPrec @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       GHC.Types.Bool)
  ListAndZipListApplicative.$fShowZipList'_$cshowsPrec @ GHC.Types.Bool
                                                       $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$cshowsPrec
"SPEC $cshrink @ (Bool -> Bool)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   (GHC.Types.Bool
                                                                    -> GHC.Types.Bool))
  ListAndZipListApplicative.$fArbitraryList_$cshrink @ (GHC.Types.Bool
                                                        -> GHC.Types.Bool)
                                                     $dArbitrary
  = ListAndZipListApplicative.$fArbitraryList_$s$cshrink1
"SPEC $cshrink @ (Bool -> Bool)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   (GHC.Types.Bool
                                                                    -> GHC.Types.Bool))
  ListAndZipListApplicative.$fArbitraryZipList'_$cshrink @ (GHC.Types.Bool
                                                            -> GHC.Types.Bool)
                                                         $dArbitrary
  = ListAndZipListApplicative.$fArbitraryZipList'_$s$cshrink1
"SPEC $cshrink @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                         GHC.Types.Bool)
  ListAndZipListApplicative.$fArbitraryList_$cshrink @ GHC.Types.Bool
                                                     $dArbitrary
  = ListAndZipListApplicative.$fArbitraryList_$s$cshrink
"SPEC $cshrink @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                         GHC.Types.Bool)
  ListAndZipListApplicative.$fArbitraryZipList'_$cshrink @ GHC.Types.Bool
                                                         $dArbitrary
  = ListAndZipListApplicative.$fArbitraryZipList'_$s$cshrink
"SPEC $fArbitraryList @ (Bool -> Bool)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                          (GHC.Types.Bool
                                                                           -> GHC.Types.Bool))
  ListAndZipListApplicative.$fArbitraryList @ (GHC.Types.Bool
                                               -> GHC.Types.Bool)
                                            $dArbitrary
  = ListAndZipListApplicative.$fArbitraryList_$s$fArbitraryList1
"SPEC $fArbitraryList @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                GHC.Types.Bool)
  ListAndZipListApplicative.$fArbitraryList @ GHC.Types.Bool
                                            $dArbitrary
  = ListAndZipListApplicative.$fArbitraryList_$s$fArbitraryList
"SPEC $fArbitraryZipList' @ (Bool -> Bool)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                              (GHC.Types.Bool
                                                                               -> GHC.Types.Bool))
  ListAndZipListApplicative.$fArbitraryZipList' @ (GHC.Types.Bool
                                                   -> GHC.Types.Bool)
                                                $dArbitrary
  = ListAndZipListApplicative.$fArbitraryZipList'_$s$fArbitraryZipList'1
"SPEC $fArbitraryZipList' @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                    GHC.Types.Bool)
  ListAndZipListApplicative.$fArbitraryZipList' @ GHC.Types.Bool
                                                $dArbitrary
  = ListAndZipListApplicative.$fArbitraryZipList'_$s$fArbitraryZipList'
"SPEC $fShowList @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                (GHC.Types.Bool -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowList @ (GHC.Types.Bool
                                          -> GHC.Types.Bool)
                                       $dShow
  = ListAndZipListApplicative.$fShowList_$s$fShowList1
"SPEC $fShowList @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      GHC.Types.Bool)
  ListAndZipListApplicative.$fShowList @ GHC.Types.Bool $dShow
  = ListAndZipListApplicative.$fShowList_$s$fShowList
"SPEC $fShowZipList' @ (Bool -> Bool)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                    (GHC.Types.Bool
                                                                     -> GHC.Types.Bool))
  ListAndZipListApplicative.$fShowZipList' @ (GHC.Types.Bool
                                              -> GHC.Types.Bool)
                                           $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$fShowZipList'1
"SPEC $fShowZipList' @ Bool" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          GHC.Types.Bool)
  ListAndZipListApplicative.$fShowZipList' @ GHC.Types.Bool $dShow
  = ListAndZipListApplicative.$fShowZipList'_$s$fShowZipList'
"SPEC/ListAndZipListApplicative $fArbitrary(->) @ Bool @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                                 GHC.Types.Bool)
                                                                               ($dCoArbitrary :: Test.QuickCheck.Arbitrary.CoArbitrary
                                                                                                   GHC.Types.Bool)
  Test.QuickCheck.Arbitrary.$fArbitrary(->) @ GHC.Types.Bool
                                            @ GHC.Types.Bool
                                            $dCoArbitrary
                                            $dArbitrary
  = ListAndZipListApplicative.$fArbitraryList_$s$fArbitrary(->)
"SPEC/ListAndZipListApplicative $fArbitrary(->)_$cshrink @ Bool @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                                          GHC.Types.Bool)
                                                                                        ($dCoArbitrary :: Test.QuickCheck.Arbitrary.CoArbitrary
                                                                                                            GHC.Types.Bool)
  Test.QuickCheck.Arbitrary.$fArbitrary(->)_$cshrink @ GHC.Types.Bool
                                                     @ GHC.Types.Bool
                                                     $dCoArbitrary
                                                     $dArbitrary
  = ListAndZipListApplicative.$fArbitraryList_$s$fArbitrary(->)_$cshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

