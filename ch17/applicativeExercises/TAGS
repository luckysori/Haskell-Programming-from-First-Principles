
c:/Projects/Haskell/First-principles/ch17/applicativeExercises/src\Validation.hs,515
module Validation Validation0,1
    Failure' Failure'7,8
  | Success' Success'8,9
instance Functor Functor (Validation e)11,12
  fmap fmap12,13
instance Monoid Monoid e => Applicative (Validation e)15,16
  pure pure16,17
  (F(Failure'e1)17,18
  (F(Failure'e)18,19
  _ _19,20
  (S(Success'a1)20,21
instance (A(Arbitrary e, Arbitrary a) => Arbitrary (Validation e a)22,23
  arbitrary arbitrary23,24
instance (E(Eq e, Eq a) => EqProp (Validation e a)28,29
  (=(=-=)29,30
main main31,32

c:/Projects/Haskell/First-principles/ch17/applicativeExercises/src\ListAndZipListApplicative.hs,1121
module ListAndZipListApplicative ListAndZipListApplicative0,1
instance Monoid Monoid a => Monoid (ZipList a)8,9
  mempty mempty9,10
  mappend mappend10,11
instance Eq Eq a => EqProp (ZipList a)18,19
  (=(=-=)19,20
data List List23,24
    NilNil24,25
  | Cons Cons25,26
instance Functor Functor List28,29
  fmap fmap29,30
append append32,33
fold fold37,38
concat' concat'41,42
flatMap flatMap44,45
instance Applicative Applicative List49,50
  pure pure50,51
  (<(<*>)51,52
arbitraryList arbitraryList57,58
instance Arbitrary Arbitrary a => Arbitrary (List a)63,64
  arbitrary arbitrary64,65
instance Eq Eq a => EqProp (List a)66,67
  (=(=-=)67,68
take' take'71,72
newtype ZipList' ZipList'76,77
instance Eq Eq a => EqProp (ZipList' a)80,81
  xs xs81,82
instance Functor Functor ZipList'87,88
  fmap fmap88,89
zipWith' zipWith'91,92
repeat' repeat'97,98
instance Applicative Applicative ZipList'100,101
  pure pure101,102
  (<(<*>)102,103
instance Arbitrary Arbitrary a => Arbitrary (ZipList' a)105,106
  arbitrary arbitrary106,107
main main110,111

c:/Projects/Haskell/First-principles/ch17/applicativeExercises/src\ChapterExercises.hs,2767
module ChapterExercises ChapterExercises0,1
listPure listPure11,12
listApply listApply14,15
ioPure ioPure19,20
ioApply ioApply22,23
tuplePure tuplePure27,28
tupleApply tupleApply30,31
functionPure functionPure35,36
functionApply functionApply38,39
data Pair Pair44,45
data Pair a = Pair Pair44,45
instance Functor Functor Pair46,47
  fmap fmap47,48
instance Applicative Applicative Pair49,50
  pure pure50,51
  (<(<*>)51,52
instance Arbitrary Arbitrary a => Arbitrary (Pair a)53,54
  arbitrary arbitrary54,55
instance (E(Eq a) => EqProp (Pair a)59,60
  (=(=-=)60,61
data Two Two64,65
data Two a b = Two Two64,65
instance Functor Functor (Two a)66,67
  fmap fmap67,68
instance Monoid Monoid a => Applicative (Two a)69,70
  pure pure70,71
  (<(<*>)71,72
instance (A(Arbitrary a, Arbitrary b) => Arbitrary (Two a b)73,74
  arbitrary arbitrary74,75
instance (E(Eq a, Eq b) => EqProp (Two a b)79,80
  (=(=-=)80,81
data Three Three84,85
data Three a b c = Three Three84,85
instance Functor Functor (Three a b)86,87
  fmap fmap87,88
instance (M(Monoid a, Monoid b) => Applicative (Three a b)89,90
  pure pure90,91
  (<(<*>)91,92
instance (A(Arbitrary a, Arbitrary b, Arbitrary c) => Arbitrary (Three a b c)96,97
  arbitrary arbitrary98,99
instance (E(Eq a, Eq b, Eq c) => EqProp (Three a b c)104,105
  (=(=-=)105,106
data Three' Three'109,110
data Three' a b = Three' Three'109,110
instance Functor Functor (Three' a)111,112
  fmap fmap112,113
instance Monoid Monoid a => Applicative (Three' a)114,115
  pure pure115,116
  (<(<*>)116,117
instance (A(Arbitrary a, Arbitrary b) => Arbitrary (Three' a b)121,122
  arbitrary arbitrary123,124
instance (E(Eq a, Eq b) => EqProp (Three' a b)129,130
  (=(=-=)130,131
data Four Four134,135
data Four a b c d = Four Four134,135
instance Functor Functor (Four a b c)136,137
  fmap fmap137,138
instance (M(Monoid a, Monoid b, Monoid c) => Applicative (Four a b c)139,140
  pure pure141,142
  (<(<*>)142,143
instance (A(Arbitrary a, Arbitrary b, Arbitrary c, Arbitrary d) => Arbitrary (Four a b c d)148,149
  arbitrary arbitrary150,151
instance (E(Eq a, Eq b, Eq c, Eq d) => EqProp (Four a b c d)157,158
  (=(=-=)158,159
data Four' Four'162,163
data Four' a b = Four' Four'162,163
instance Functor Functor (Four' a)164,165
  fmap fmap165,166
instance (M(Monoid a) => Applicative (Four' a)167,168
  pure pure168,169
  (<(<*>)169,170
instance (A(Arbitrary a, Arbitrary b) => Arbitrary (Four' a b)175,176
  arbitrary arbitrary177,178
instance (E(Eq a, Eq b) => EqProp (Four' a b)184,185
  (=(=-=)185,186
stops stops189,190
vowels vowels192,193
combos combos195,196
main main198,199

c:/Projects/Haskell/First-principles/ch17/applicativeExercises/Setup.hs,15
main main1,2
