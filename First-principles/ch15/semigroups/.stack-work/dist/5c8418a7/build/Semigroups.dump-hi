
==================== FINAL INTERFACE ====================
2018-05-02 17:14:38.8924147 UTC

interface semigroups-0.1.0.0-3q2oYBy5YQ9CZf31WgaiJs:Semigroups 8022
  interface hash: f5950a9697e932b4dbc5e9a7e4dd99c8
  ABI hash: e548dce1293ad50dc771bf90fec69599
  export-list hash: 2902ab74505ad6f1e7c8ac8061ca144f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0db3658e8db58f936d8d66225b82f996
  sig of: Nothing
  used TH splices: False
  where
exports:
  Semigroups.genCombine
  Semigroups.genComp
  Semigroups.main
  Semigroups.semigroupAssoc
  Semigroups.semigroupCombineAssoc
  Semigroups.semigroupCompAssoc
  Semigroups.BoolConj{Semigroups.BoolConj}
  Semigroups.BoolConjAssoc
  Semigroups.BoolDisj{Semigroups.BoolDisj}
  Semigroups.BoolDisjAssoc
  Semigroups.CombAssoc
  Semigroups.Combine{Semigroups.Combine unCombine}
  Semigroups.Comp{Semigroups.Comp unComp}
  Semigroups.CompAssoc
  Semigroups.Four{Semigroups.Four}
  Semigroups.FourAssoc
  Semigroups.IdAssoc
  Semigroups.Identity{Semigroups.Identity}
  Semigroups.Or{Semigroups.Fst Semigroups.Snd}
  Semigroups.OrAssoc
  Semigroups.Three{Semigroups.Three}
  Semigroups.ThreeAssoc
  Semigroups.TrivAssoc
  Semigroups.Trivial{Semigroups.Trivial}
  Semigroups.Two{Semigroups.Two}
  Semigroups.TwoAssoc
module dependencies:
package dependencies: QuickCheck-2.10.1 Win32-2.5.4.1 array-0.5.2.0
                      base-4.10.1.0* containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
                      pretty-1.1.3.3 primitive-0.6.3.0 random-1.1
                      template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.10.1:Test.QuickCheck 384b265bb43b04f88515d0030a3eea23
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Arbitrary 51fd4b6bcba53aba3b6366311b8a279d
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Gen 430eb19bc4de8eb76a84005ff990c1d7
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Test be49a7a630d6c3b9fb5263d1d7f2f4b6
import  -/  base-4.10.1.0:Data.Monoid f056d3911f36ed0db0c6f6ab55ef865c
import  -/  base-4.10.1.0:Data.Semigroup bb5cd12b517774ef92378fd3003585a4
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
2cb82ba35413dd6b2c3ef87b1806847e
  $fArbitraryBoolConj ::
    Test.QuickCheck.Arbitrary.Arbitrary Semigroups.BoolConj
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolConj
                  Semigroups.$fArbitraryBoolConj_$carbitrary
                  Semigroups.$fArbitraryBoolConj_$cshrink -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fArbitraryBoolConj1 :: [Semigroups.BoolConj]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Semigroups.BoolConj
                   GHC.Types.True `cast` (Sym (Semigroups.N:BoolConj[0]))
                   Semigroups.$fArbitraryBoolConj2) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fArbitraryBoolConj2 :: [Semigroups.BoolConj]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Semigroups.BoolConj
                   GHC.Types.False `cast` (Sym (Semigroups.N:BoolConj[0]))
                   (GHC.Types.[] @ Semigroups.BoolConj)) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fArbitraryBoolConj_$carbitrary ::
    Test.QuickCheck.Gen.Gen Semigroups.BoolConj
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ Semigroups.BoolConj
                   Semigroups.$fArbitraryBoolConj1) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fArbitraryBoolConj_$cshrink ::
    Semigroups.BoolConj -> [Semigroups.BoolConj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.BoolConj) ->
                 GHC.Types.[] @ Semigroups.BoolConj) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fArbitraryBoolDisj ::
    Test.QuickCheck.Arbitrary.Arbitrary Semigroups.BoolDisj
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolDisj
                  Semigroups.$fArbitraryBoolDisj_$carbitrary
                  Semigroups.$fArbitraryBoolDisj_$cshrink -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fArbitraryBoolDisj1 :: [Semigroups.BoolDisj]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Semigroups.BoolDisj
                   GHC.Types.True `cast` (Sym (Semigroups.N:BoolDisj[0]))
                   Semigroups.$fArbitraryBoolDisj2) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fArbitraryBoolDisj2 :: [Semigroups.BoolDisj]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Semigroups.BoolDisj
                   GHC.Types.False `cast` (Sym (Semigroups.N:BoolDisj[0]))
                   (GHC.Types.[] @ Semigroups.BoolDisj)) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fArbitraryBoolDisj_$carbitrary ::
    Test.QuickCheck.Gen.Gen Semigroups.BoolDisj
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ Semigroups.BoolDisj
                   Semigroups.$fArbitraryBoolDisj1) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fArbitraryBoolDisj_$cshrink ::
    Semigroups.BoolDisj -> [Semigroups.BoolDisj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.BoolDisj) ->
                 GHC.Types.[] @ Semigroups.BoolDisj) -}
1680422b1fc36f6b30d90805ebb5f560
  $fArbitraryCombine ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Combine a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U(U,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Semigroups.Combine a b)
                  (Semigroups.$fArbitraryCombine1 @ a @ b v v1)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Combine a b>_R))
                  (\ (ds :: Semigroups.Combine a b) ->
                   GHC.Types.[] @ (Semigroups.Combine a b)) -}
1680422b1fc36f6b30d90805ebb5f560
  $fArbitraryCombine1 ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Combine a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$wgenCombine @ a @ b w w1 ww1 ww2 ww3 ww4 w3 }) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fArbitraryComp ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Comp a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U(U,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      (v :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Semigroups.Comp a)
                  (Semigroups.$fArbitraryComp1 @ a v v1)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Comp a>_R))
                  (\ (ds :: Semigroups.Comp a) ->
                   GHC.Types.[] @ (Semigroups.Comp a)) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fArbitraryComp1 ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Semigroups.Comp a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$wgenComp @ a w w1 ww1 ww2 ww3 ww4 w3 }) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fArbitraryFour ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      (v :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      (v2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                      (v3 :: Test.QuickCheck.Arbitrary.Arbitrary d).
                  @ (Semigroups.Four a b c d)
                  (Semigroups.$fArbitraryFour1 @ a @ b @ c @ d v v1 v2 v3)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Four a b c d>_R))
                  (\ (ds :: Semigroups.Four a b c d) ->
                   GHC.Types.[] @ (Semigroups.Four a b c d)) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fArbitraryFour1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Semigroups.$w$carbitrary
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        ww1
                        ww2
                        ww3
                        ww4
                        w5 of ww7 { (#,,,#) ww8 ww9 ww10 ww11 ->
                 Semigroups.Four @ a @ b @ c @ d ww8 ww9 ww10 ww11 } }) -}
3782c9ca86c08548ace68d59bad425cf
  $fArbitraryFour_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Semigroups.Four
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Semigroups.$w$s$carbitrary
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,,,#) ww8 ww9 ww10 ww11 ->
                 Semigroups.Four
                   @ (Data.Monoid.Sum GHC.Types.Int)
                   @ (Data.Monoid.Product GHC.Types.Int)
                   @ (Data.Monoid.Product GHC.Types.Int)
                   @ (Data.Monoid.Sum GHC.Types.Int)
                   ww8
                   ww9
                   ww10
                   ww11 } }) -}
1eb6844ec49db02af3857e0653ef365c
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Semigroups.Identity a)
                  (Semigroups.$fArbitraryIdentity1 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Identity a>_R))
                  (\ (ds :: Semigroups.Identity a) ->
                   GHC.Types.[] @ (Semigroups.Identity a)) -}
1eb6844ec49db02af3857e0653ef365c
  $fArbitraryIdentity1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$carbitrary1 @ a w ww1 ww2 ww3 ww4 w2 }) -}
851e595e2271717f98fae0ff97d8baf5
  $fArbitraryOr ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Semigroups.Or a b)
                  (Semigroups.$fArbitraryOr1 @ a @ b v v1)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Or a b>_R))
                  (\ (ds :: Semigroups.Or a b) ->
                   GHC.Types.[] @ (Semigroups.Or a b)) -}
851e595e2271717f98fae0ff97d8baf5
  $fArbitraryOr1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Semigroups.Or a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$carbitrary2 @ a @ b w w1 ww1 ww2 ww3 ww4 w3 }) -}
1e2a6478d79545cd5ffba876d03d1e47
  $fArbitraryOr_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Or GHC.Types.Int GHC.Types.Char
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$s$carbitrary1 ww1 ww2 ww3 ww4 w1 }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fArbitraryThree ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      (v :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      (v2 :: Test.QuickCheck.Arbitrary.Arbitrary c).
                  @ (Semigroups.Three a b c)
                  (Semigroups.$fArbitraryThree1 @ a @ b @ c v v1 v2)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Three a b c>_R))
                  (\ (ds :: Semigroups.Three a b c) ->
                   GHC.Types.[] @ (Semigroups.Three a b c)) -}
722dd06aa40b86490cd9453af01ec7d4
  $fArbitraryThree1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 case w3
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Semigroups.$w$carbitrary3
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        ww4
                        w4 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 Semigroups.Three @ a @ b @ c ww8 ww9 ww10 } }) -}
3304c16ae125d45074f3676bed432f57
  $fArbitraryThree_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Semigroups.Three
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Semigroups.$w$s$carbitrary2
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 Semigroups.Three
                   @ (Data.Monoid.Sum GHC.Types.Int)
                   @ (Data.Monoid.Product GHC.Types.Int)
                   @ (Data.Monoid.Sum GHC.Types.Int)
                   ww8
                   ww9
                   ww10 } }) -}
f3ff4d280629b1d149877cdd80c9301e
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Semigroups.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.Trivial
                  Semigroups.$fArbitraryTrivial1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Trivial>_R))
                  Semigroups.$fArbitraryTrivial_$cshrink -}
f3ff4d280629b1d149877cdd80c9301e
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Semigroups.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Semigroups.Trivial) -}
f3ff4d280629b1d149877cdd80c9301e
  $fArbitraryTrivial_$cshrink ::
    Semigroups.Trivial -> [Semigroups.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Trivial) ->
                 GHC.Types.[] @ Semigroups.Trivial) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fArbitraryTwo ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Semigroups.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Semigroups.Two a b)
                  (Semigroups.$fArbitraryTwo1 @ a @ b v v1)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Two a b>_R))
                  (\ (ds :: Semigroups.Two a b) ->
                   GHC.Types.[] @ (Semigroups.Two a b)) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fArbitraryTwo1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Semigroups.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Semigroups.$w$carbitrary4
                        @ a
                        @ b
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        ww4
                        w3 of ww7 { (#,#) ww8 ww9 ->
                 Semigroups.Two @ a @ b ww8 ww9 } }) -}
d9e773fcff0e797ad1f674ebf553aaa6
  $fArbitraryTwo_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Semigroups.Two
         (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Semigroups.$w$s$carbitrary3
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Semigroups.Two
                   @ (Data.Monoid.Sum GHC.Types.Int)
                   @ (Data.Monoid.Product GHC.Types.Int)
                   ww8
                   ww9 } }) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fEqBoolConj :: GHC.Classes.Eq Semigroups.BoolConj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolConj
                  GHC.Classes.$fEqBool_$c==
                    `cast`
                  (Sym (Semigroups.N:BoolConj[0])
                   ->_R Sym (Semigroups.N:BoolConj[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEqBool_$c/=
                    `cast`
                  (Sym (Semigroups.N:BoolConj[0])
                   ->_R Sym (Semigroups.N:BoolConj[0])
                   ->_R <GHC.Types.Bool>_R) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fEqBoolDisj :: GHC.Classes.Eq Semigroups.BoolDisj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolDisj
                  GHC.Classes.$fEqBool_$c==
                    `cast`
                  (Sym (Semigroups.N:BoolDisj[0])
                   ->_R Sym (Semigroups.N:BoolDisj[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEqBool_$c/=
                    `cast`
                  (Sym (Semigroups.N:BoolDisj[0])
                   ->_R Sym (Semigroups.N:BoolDisj[0])
                   ->_R <GHC.Types.Bool>_R) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fEqFour ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Semigroups.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      (v :: GHC.Classes.Eq d)
                      (v1 :: GHC.Classes.Eq c)
                      (v2 :: GHC.Classes.Eq b)
                      (v3 :: GHC.Classes.Eq a).
                  @ (Semigroups.Four a b c d)
                  (Semigroups.$fEqFour_$c== @ a @ b @ c @ d v v1 v2 v3)
                  (Semigroups.$fEqFour_$c/= @ a @ b @ c @ d v v1 v2 v3) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fEqFour_$c/= ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    Semigroups.Four a b c d
    -> Semigroups.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: GHC.Classes.Eq d)
                   ($dEq1 :: GHC.Classes.Eq c)
                   ($dEq2 :: GHC.Classes.Eq b)
                   ($dEq3 :: GHC.Classes.Eq a)
                   (a1 :: Semigroups.Four a b c d)
                   (b1 :: Semigroups.Four a b c d) ->
                 case Semigroups.$fEqFour_$c==
                        @ a
                        @ b
                        @ c
                        @ d
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fEqFour_$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    Semigroups.Four a b c d
    -> Semigroups.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: GHC.Classes.Eq d)
                   ($dEq1 :: GHC.Classes.Eq c)
                   ($dEq2 :: GHC.Classes.Eq b)
                   ($dEq3 :: GHC.Classes.Eq a)
                   (ds :: Semigroups.Four a b c d)
                   (ds1 :: Semigroups.Four a b c d) ->
                 case ds of wild { Semigroups.Four a1 a2 a3 a4 ->
                 case ds1 of wild1 { Semigroups.Four b1 b2 b3 b4 ->
                 case GHC.Classes.== @ a $dEq3 a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b $dEq2 a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.== @ c $dEq1 a3 b3 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ d $dEq a4 b4 } } } } }) -}
1eb6844ec49db02af3857e0653ef365c
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Semigroups.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Semigroups.Identity a)
                  (GHC.Classes.== @ a v)
                    `cast`
                  (Sym (Semigroups.N:Identity[0] <a>_R)
                   ->_R Sym (Semigroups.N:Identity[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (GHC.Classes./= @ a v)
                    `cast`
                  (Sym (Semigroups.N:Identity[0] <a>_R)
                   ->_R Sym (Semigroups.N:Identity[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R) -}
851e595e2271717f98fae0ff97d8baf5
  $fEqOr ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Semigroups.Or a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq b)
                      (v1 :: GHC.Classes.Eq a).
                  @ (Semigroups.Or a b)
                  (Semigroups.$fEqOr_$c== @ a @ b v v1)
                  (Semigroups.$fEqOr_$c/= @ a @ b v v1) -}
851e595e2271717f98fae0ff97d8baf5
  $fEqOr_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Semigroups.Or a b -> Semigroups.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Semigroups.Or a b)
                   (b1 :: Semigroups.Or a b) ->
                 case a1 of wild {
                   Semigroups.Fst a2
                   -> case b1 of wild1 {
                        Semigroups.Fst b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Semigroups.Snd ipv -> GHC.Types.True }
                   Semigroups.Snd a2
                   -> case b1 of wild1 {
                        Semigroups.Fst ipv -> GHC.Types.True
                        Semigroups.Snd b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
851e595e2271717f98fae0ff97d8baf5
  $fEqOr_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Semigroups.Or a b -> Semigroups.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Semigroups.Or a b)
                   (ds1 :: Semigroups.Or a b) ->
                 case ds of wild {
                   Semigroups.Fst a1
                   -> case ds1 of wild1 {
                        Semigroups.Fst b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Semigroups.Snd ipv -> GHC.Types.False }
                   Semigroups.Snd a1
                   -> case ds1 of wild1 {
                        Semigroups.Fst ipv -> GHC.Types.False
                        Semigroups.Snd b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fEqThree ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Semigroups.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      (v :: GHC.Classes.Eq c)
                      (v1 :: GHC.Classes.Eq b)
                      (v2 :: GHC.Classes.Eq a).
                  @ (Semigroups.Three a b c)
                  (Semigroups.$fEqThree_$c== @ a @ b @ c v v1 v2)
                  (Semigroups.$fEqThree_$c/= @ a @ b @ c v v1 v2) -}
722dd06aa40b86490cd9453af01ec7d4
  $fEqThree_$c/= ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Semigroups.Three a b c -> Semigroups.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dEq :: GHC.Classes.Eq c)
                   ($dEq1 :: GHC.Classes.Eq b)
                   ($dEq2 :: GHC.Classes.Eq a)
                   (a1 :: Semigroups.Three a b c)
                   (b1 :: Semigroups.Three a b c) ->
                 case Semigroups.$fEqThree_$c==
                        @ a
                        @ b
                        @ c
                        $dEq
                        $dEq1
                        $dEq2
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fEqThree_$c== ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Semigroups.Three a b c -> Semigroups.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (w3 :: Semigroups.Three a b c)
                   (w4 :: Semigroups.Three a b c) ->
                 case w3 of ww { Semigroups.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { Semigroups.Three ww5 ww6 ww7 ->
                 Semigroups.$w$c==
                   @ a
                   @ b
                   @ c
                   w
                   w1
                   w2
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
f3ff4d280629b1d149877cdd80c9301e
  $fEqTrivial :: GHC.Classes.Eq Semigroups.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.Trivial
                  Semigroups.$fEqTrivial_$c==
                  Semigroups.$fEqTrivial_$c/= -}
f3ff4d280629b1d149877cdd80c9301e
  $fEqTrivial_$c/= ::
    Semigroups.Trivial -> Semigroups.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Semigroups.Trivial) (b :: Semigroups.Trivial) ->
                 case a of wild { Semigroups.Trivial ->
                 case b of wild1 { Semigroups.Trivial -> GHC.Types.False } }) -}
f3ff4d280629b1d149877cdd80c9301e
  $fEqTrivial_$c== ::
    Semigroups.Trivial -> Semigroups.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Semigroups.Trivial) (ds1 :: Semigroups.Trivial) ->
                 case ds of wild { Semigroups.Trivial ->
                 case ds1 of wild1 { Semigroups.Trivial -> GHC.Types.True } }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fEqTwo ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Semigroups.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq b)
                      (v1 :: GHC.Classes.Eq a).
                  @ (Semigroups.Two a b)
                  (Semigroups.$fEqTwo_$c== @ a @ b v v1)
                  (Semigroups.$fEqTwo_$c/= @ a @ b v v1) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fEqTwo_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Semigroups.Two a b -> Semigroups.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Semigroups.Two a b)
                   (w3 :: Semigroups.Two a b) ->
                 case w2 of ww { Semigroups.Two ww1 ww2 ->
                 case w3 of ww3 { Semigroups.Two ww4 ww5 ->
                 Semigroups.$w$c/= @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fEqTwo_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Semigroups.Two a b -> Semigroups.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Semigroups.Two a b)
                   (w3 :: Semigroups.Two a b) ->
                 case w2 of ww { Semigroups.Two ww1 ww2 ->
                 case w3 of ww3 { Semigroups.Two ww4 ww5 ->
                 Semigroups.$w$c==1 @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fSemigroupBoolConj :: Data.Semigroup.Semigroup Semigroups.BoolConj
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolConj
                  Semigroups.$fSemigroupBoolConj_$c<>
                  Semigroups.$fSemigroupBoolConj_$csconcat
                  Semigroups.$fSemigroupBoolConj_$cstimes -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fSemigroupBoolConj_$c<> ::
    Semigroups.BoolConj -> Semigroups.BoolConj -> Semigroups.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Semigroups.BoolConj) (ds1 :: Semigroups.BoolConj) ->
                 case ds `cast` (Semigroups.N:BoolConj[0]) of wild {
                   GHC.Types.False
                   -> GHC.Types.False `cast` (Sym (Semigroups.N:BoolConj[0]))
                   GHC.Types.True -> ds1 }) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fSemigroupBoolConj_$csconcat ::
    Data.List.NonEmpty.NonEmpty Semigroups.BoolConj
    -> Semigroups.BoolConj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty Semigroups.BoolConj) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 Semigroups.$fSemigroupBoolConj_go a1 as }) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fSemigroupBoolConj_$cstimes ::
    GHC.Real.Integral b =>
    b -> Semigroups.BoolConj -> Semigroups.BoolConj
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fSemigroupBoolConj_go ::
    Semigroups.BoolConj -> [Semigroups.BoolConj] -> Semigroups.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fSemigroupBoolDisj :: Data.Semigroup.Semigroup Semigroups.BoolDisj
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolDisj
                  Semigroups.$fSemigroupBoolDisj_$c<>
                  Semigroups.$fSemigroupBoolDisj_$csconcat
                  Semigroups.$fSemigroupBoolDisj_$cstimes -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fSemigroupBoolDisj_$c<> ::
    Semigroups.BoolDisj -> Semigroups.BoolDisj -> Semigroups.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Semigroups.BoolDisj) (ds1 :: Semigroups.BoolDisj) ->
                 case ds `cast` (Semigroups.N:BoolDisj[0]) of wild {
                   GHC.Types.False -> ds1
                   GHC.Types.True
                   -> GHC.Types.True `cast` (Sym (Semigroups.N:BoolDisj[0])) }) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fSemigroupBoolDisj_$csconcat ::
    Data.List.NonEmpty.NonEmpty Semigroups.BoolDisj
    -> Semigroups.BoolDisj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty Semigroups.BoolDisj) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 Semigroups.$fSemigroupBoolDisj_go a1 as }) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fSemigroupBoolDisj_$cstimes ::
    GHC.Real.Integral b =>
    b -> Semigroups.BoolDisj -> Semigroups.BoolDisj
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fSemigroupBoolDisj_go ::
    Semigroups.BoolDisj -> [Semigroups.BoolDisj] -> Semigroups.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1680422b1fc36f6b30d90805ebb5f560
  $fSemigroupCombine ::
    Data.Semigroup.Semigroup b =>
    Data.Semigroup.Semigroup (Semigroups.Combine a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ b @ a (v :: Data.Semigroup.Semigroup b).
                  @ (Semigroups.Combine a b)
                  (Semigroups.$fSemigroupCombine1 @ b @ a v)
                    `cast`
                  (<Semigroups.Combine a b>_R
                   ->_R <Semigroups.Combine a b>_R
                   ->_R Sym (Semigroups.N:Combine[0]) <a>_N <b>_N)
                  (Semigroups.$fSemigroupCombine_$csconcat @ b @ a v)
                  (Semigroups.$fSemigroupCombine_$cstimes @ b @ a v) -}
1680422b1fc36f6b30d90805ebb5f560
  $fSemigroupCombine1 ::
    Data.Semigroup.Semigroup b =>
    Semigroups.Combine a b -> Semigroups.Combine a b -> a -> b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup b)
                   (c1 :: Semigroups.Combine a b)
                   (c2 :: Semigroups.Combine a b)
                   (n :: a) ->
                 Data.Semigroup.<>
                   @ b
                   $dSemigroup
                   (c1 `cast` (Semigroups.N:Combine[0] <a>_N <b>_N) n)
                   (c2 `cast` (Semigroups.N:Combine[0] <a>_N <b>_N) n)) -}
1680422b1fc36f6b30d90805ebb5f560
  $fSemigroupCombine_$csconcat ::
    Data.Semigroup.Semigroup b =>
    Data.List.NonEmpty.NonEmpty (Semigroups.Combine a b)
    -> Semigroups.Combine a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Semigroups.Combine a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Semigroups.$w$csconcat @ b @ a w ww1 ww2 }) -}
1680422b1fc36f6b30d90805ebb5f560
  $fSemigroupCombine_$cstimes ::
    Data.Semigroup.Semigroup b =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Semigroups.Combine a b -> Semigroups.Combine a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
4860b4ccd05862bc07207bcfb8fa433d
  $fSemigroupComp :: Data.Semigroup.Semigroup (Semigroups.Comp a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Semigroups.Comp a)
                  (Semigroups.$fSemigroupComp2 @ a)
                    `cast`
                  (<Semigroups.Comp a>_R
                   ->_R <Semigroups.Comp a>_R
                   ->_R Sym (Semigroups.N:Comp[0] <a>_R))
                  (Semigroups.$fSemigroupComp_$csconcat @ a)
                  (Semigroups.$fSemigroupComp_$cstimes @ a) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fSemigroupComp1 ::
    Semigroups.Comp a -> [Semigroups.Comp a] -> Semigroups.Comp a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
4860b4ccd05862bc07207bcfb8fa433d
  $fSemigroupComp2 ::
    Semigroups.Comp a -> Semigroups.Comp a -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (c1 :: Semigroups.Comp a)
                   (c2 :: Semigroups.Comp a)
                   (x :: a) ->
                 c1 `cast` (Semigroups.N:Comp[0] <a>_R)
                   (c2 `cast` (Semigroups.N:Comp[0] <a>_R) x)) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fSemigroupComp_$csconcat ::
    Data.List.NonEmpty.NonEmpty (Semigroups.Comp a)
    -> Semigroups.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.List.NonEmpty.NonEmpty (Semigroups.Comp a)) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 Semigroups.$fSemigroupComp1 @ a a1 as }) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fSemigroupComp_$cstimes ::
    GHC.Real.Integral b => b -> Semigroups.Comp a -> Semigroups.Comp a
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fSemigroupFour ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.Semigroup.Semigroup (Semigroups.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      (v :: Data.Semigroup.Semigroup a)
                      (v1 :: Data.Semigroup.Semigroup b)
                      (v2 :: Data.Semigroup.Semigroup c)
                      (v3 :: Data.Semigroup.Semigroup d).
                  @ (Semigroups.Four a b c d)
                  (Semigroups.$fSemigroupFour_$c<> @ a @ b @ c @ d v v1 v2 v3)
                  (Semigroups.$fSemigroupFour_$csconcat @ a @ b @ c @ d v v1 v2 v3)
                  (Semigroups.$fSemigroupFour_$cstimes @ a @ b @ c @ d v v1 v2 v3) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fSemigroupFour_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Semigroups.Four a b c d
    -> Semigroups.Four a b c d -> Semigroups.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>m,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   ($dSemigroup2 :: Data.Semigroup.Semigroup c)
                   ($dSemigroup3 :: Data.Semigroup.Semigroup d)
                   (ds :: Semigroups.Four a b c d)
                   (ds1 :: Semigroups.Four a b c d) ->
                 case ds of wild { Semigroups.Four a1 b1 c1 d1 ->
                 case ds1 of wild1 { Semigroups.Four e f g h ->
                 Semigroups.Four
                   @ a
                   @ b
                   @ c
                   @ d
                   (Data.Semigroup.<> @ a $dSemigroup a1 e)
                   (Data.Semigroup.<> @ b $dSemigroup1 b1 f)
                   (Data.Semigroup.<> @ c $dSemigroup2 c1 g)
                   (Data.Semigroup.<> @ d $dSemigroup3 d1 h) } }) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fSemigroupFour_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.List.NonEmpty.NonEmpty (Semigroups.Four a b c d)
    -> Semigroups.Four a b c d
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: Data.List.NonEmpty.NonEmpty (Semigroups.Four a b c d)) ->
                 case w4 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Semigroups.Four ww4 ww5 ww6 ww7 ->
                 case Semigroups.$w$csconcat1
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww2 of ww8 { (#,,,#) ww9 ww10 ww11 ww12 ->
                 Semigroups.Four @ a @ b @ c @ d ww9 ww10 ww11 ww12 } } }) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fSemigroupFour_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Semigroups.Four a b c d -> Semigroups.Four a b c d
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A),A),U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,1*U(U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   @ b1
                   (w4 :: GHC.Real.Integral b1)
                   (w5 :: b1)
                   (w6 :: Semigroups.Four a b c d) ->
                 case w6 of ww { Semigroups.Four ww1 ww2 ww3 ww4 ->
                 case Semigroups.$w$cstimes
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        @ b1
                        w4
                        w5
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Semigroups.Four @ a @ b @ c @ d ww6 ww7 ww8 ww9 } }) -}
1eb6844ec49db02af3857e0653ef365c
  $fSemigroupIdentity ::
    Data.Semigroup.Semigroup (Semigroups.Identity a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Semigroups.Identity a)
                  (Semigroups.$fSemigroupIdentity_$c<> @ a)
                  (Semigroups.$fSemigroupIdentity_$csconcat @ a)
                  (Semigroups.$fSemigroupIdentity_$cstimes @ a) -}
1eb6844ec49db02af3857e0653ef365c
  $fSemigroupIdentity_$c<> ::
    Semigroups.Identity a
    -> Semigroups.Identity a -> Semigroups.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (ds :: Semigroups.Identity a)
                   (ds1 :: Semigroups.Identity a) ->
                 ds) -}
1eb6844ec49db02af3857e0653ef365c
  $fSemigroupIdentity_$csconcat ::
    Data.List.NonEmpty.NonEmpty (Semigroups.Identity a)
    -> Semigroups.Identity a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Data.List.NonEmpty.NonEmpty (Semigroups.Identity a)) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 case as of wild1 { DEFAULT -> a1 } }) -}
1eb6844ec49db02af3857e0653ef365c
  $fSemigroupIdentity_$cstimes ::
    GHC.Real.Integral b =>
    b -> Semigroups.Identity a -> Semigroups.Identity a
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,1*U> -}
851e595e2271717f98fae0ff97d8baf5
  $fSemigroupOr :: Data.Semigroup.Semigroup (Semigroups.Or a b)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Semigroups.Or a b)
                  (Semigroups.$fSemigroupOr_$c<> @ a @ b)
                  (Semigroups.$fSemigroupOr_$csconcat @ a @ b)
                  (Semigroups.$fSemigroupOr_$cstimes @ a @ b) -}
851e595e2271717f98fae0ff97d8baf5
  $fSemigroupOr1 ::
    Semigroups.Or a b -> [Semigroups.Or a b] -> Semigroups.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
851e595e2271717f98fae0ff97d8baf5
  $fSemigroupOr_$c<> ::
    Semigroups.Or a b -> Semigroups.Or a b -> Semigroups.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: Semigroups.Or a b) (ds1 :: Semigroups.Or a b) ->
                 case ds of wild {
                   Semigroups.Fst ds2 -> ds1
                   Semigroups.Snd x -> Semigroups.Snd @ a @ b x }) -}
851e595e2271717f98fae0ff97d8baf5
  $fSemigroupOr_$csconcat ::
    Data.List.NonEmpty.NonEmpty (Semigroups.Or a b)
    -> Semigroups.Or a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: Data.List.NonEmpty.NonEmpty (Semigroups.Or a b)) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 Semigroups.$fSemigroupOr1 @ a @ b a1 as }) -}
851e595e2271717f98fae0ff97d8baf5
  $fSemigroupOr_$cstimes ::
    GHC.Real.Integral b2 =>
    b2 -> Semigroups.Or a b1 -> Semigroups.Or a b1
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
722dd06aa40b86490cd9453af01ec7d4
  $fSemigroupThree ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.Semigroup.Semigroup (Semigroups.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      (v :: Data.Semigroup.Semigroup a)
                      (v1 :: Data.Semigroup.Semigroup b)
                      (v2 :: Data.Semigroup.Semigroup c).
                  @ (Semigroups.Three a b c)
                  (Semigroups.$fSemigroupThree_$c<> @ a @ b @ c v v1 v2)
                  (Semigroups.$fSemigroupThree_$csconcat @ a @ b @ c v v1 v2)
                  (Semigroups.$fSemigroupThree_$cstimes @ a @ b @ c v v1 v2) -}
722dd06aa40b86490cd9453af01ec7d4
  $fSemigroupThree_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Semigroups.Three a b c
    -> Semigroups.Three a b c -> Semigroups.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Semigroups.Three a b c)
                   (w4 :: Semigroups.Three a b c) ->
                 case w3 of ww { Semigroups.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { Semigroups.Three ww5 ww6 ww7 ->
                 Semigroups.Three
                   @ a
                   @ b
                   @ c
                   (Data.Semigroup.<> @ a w ww1 ww5)
                   (Data.Semigroup.<> @ b w1 ww2 ww6)
                   (Data.Semigroup.<> @ c w2 ww3 ww7) } }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fSemigroupThree_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.List.NonEmpty.NonEmpty (Semigroups.Three a b c)
    -> Semigroups.Three a b c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.List.NonEmpty.NonEmpty (Semigroups.Three a b c)) ->
                 case w3 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Semigroups.Three ww4 ww5 ww6 ->
                 case Semigroups.$w$csconcat2
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        ww4
                        ww5
                        ww6
                        ww2 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 Semigroups.Three @ a @ b @ c ww8 ww9 ww10 } } }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fSemigroupThree_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Semigroups.Three a b c -> Semigroups.Three a b c
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A),A),U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   @ b1
                   (w3 :: GHC.Real.Integral b1)
                   (w4 :: b1)
                   (w5 :: Semigroups.Three a b c) ->
                 case w5 of ww { Semigroups.Three ww1 ww2 ww3 ->
                 case Semigroups.$w$cstimes1
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        @ b1
                        w3
                        w4
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Semigroups.Three @ a @ b @ c ww5 ww6 ww7 } }) -}
f3ff4d280629b1d149877cdd80c9301e
  $fSemigroupTrivial :: Data.Semigroup.Semigroup Semigroups.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.Trivial
                  Semigroups.$fSemigroupTrivial_$c<>
                  Semigroups.$fSemigroupTrivial_$csconcat
                  Semigroups.$fSemigroupTrivial_$cstimes -}
f3ff4d280629b1d149877cdd80c9301e
  $fSemigroupTrivial_$c<> ::
    Semigroups.Trivial -> Semigroups.Trivial -> Semigroups.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Semigroups.Trivial) (ds1 :: Semigroups.Trivial) ->
                 Semigroups.Trivial) -}
f3ff4d280629b1d149877cdd80c9301e
  $fSemigroupTrivial_$csconcat ::
    Data.List.NonEmpty.NonEmpty Semigroups.Trivial
    -> Semigroups.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty Semigroups.Trivial) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 case as of wild1 { [] -> a1 : c cs -> Semigroups.Trivial } }) -}
f3ff4d280629b1d149877cdd80c9301e
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b =>
    b -> Semigroups.Trivial -> Semigroups.Trivial
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U()> -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fSemigroupTwo ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (Semigroups.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Data.Semigroup.Semigroup a)
                      (v1 :: Data.Semigroup.Semigroup b).
                  @ (Semigroups.Two a b)
                  (Semigroups.$fSemigroupTwo_$c<> @ a @ b v v1)
                  (Semigroups.$fSemigroupTwo_$csconcat @ a @ b v v1)
                  (Semigroups.$fSemigroupTwo_$cstimes @ a @ b v v1) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fSemigroupTwo_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Semigroups.Two a b -> Semigroups.Two a b -> Semigroups.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: Semigroups.Two a b)
                   (ds1 :: Semigroups.Two a b) ->
                 case ds of wild { Semigroups.Two x y ->
                 case ds1 of wild1 { Semigroups.Two w z ->
                 Semigroups.Two
                   @ a
                   @ b
                   (Data.Semigroup.<> @ a $dSemigroup x w)
                   (Data.Semigroup.<> @ b $dSemigroup1 y z) } }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fSemigroupTwo_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (Semigroups.Two a b)
    -> Semigroups.Two a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty (Semigroups.Two a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Semigroups.Two ww4 ww5 ->
                 case Semigroups.$w$csconcat3
                        @ a
                        @ b
                        w
                        w1
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 Semigroups.Two @ a @ b ww7 ww8 } } }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fSemigroupTwo_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Semigroups.Two a b -> Semigroups.Two a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A),A),U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   @ b1
                   (w2 :: GHC.Real.Integral b1)
                   (w3 :: b1)
                   (w4 :: Semigroups.Two a b) ->
                 case w4 of ww { Semigroups.Two ww1 ww2 ->
                 case Semigroups.$w$cstimes2
                        @ a
                        @ b
                        w
                        w1
                        @ b1
                        w2
                        w3
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Semigroups.Two @ a @ b ww4 ww5 } }) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fShowBoolConj :: GHC.Show.Show Semigroups.BoolConj
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolConj
                  Semigroups.$fShowBoolConj_$cshowsPrec
                  Semigroups.$fShowBoolConj_$cshow
                  Semigroups.$fShowBoolConj_$cshowList -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fShowBoolConj1 :: Semigroups.BoolConj -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (ds :: Semigroups.BoolConj) (x :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Semigroups.$fShowBoolConj2
                   (case ds `cast` (Semigroups.N:BoolConj[0]) of wild {
                      GHC.Types.False
                      -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool3 x
                      GHC.Types.True
                      -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool1 x })) -}
1a1e567b4905ae3bfcbbe7282a9bf49b
  $fShowBoolConj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolConj "#) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fShowBoolConj_$cshow :: Semigroups.BoolConj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Semigroups.BoolConj) ->
                 GHC.CString.unpackAppendCString#
                   Semigroups.$fShowBoolConj2
                   (case x `cast` (Semigroups.N:BoolConj[0]) of wild {
                      GHC.Types.False -> GHC.Show.$fShowBool3
                      GHC.Types.True -> GHC.Show.$fShowBool1 })) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fShowBoolConj_$cshowList ::
    [Semigroups.BoolConj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Semigroups.BoolConj
                   Semigroups.$fShowBoolConj1) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $fShowBoolConj_$cshowsPrec ::
    GHC.Types.Int -> Semigroups.BoolConj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.BoolConj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Semigroups.$w$cshowsPrec ww1 w1 w2 }) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fShowBoolDisj :: GHC.Show.Show Semigroups.BoolDisj
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.BoolDisj
                  Semigroups.$fShowBoolDisj_$cshowsPrec
                  Semigroups.$fShowBoolDisj_$cshow
                  Semigroups.$fShowBoolDisj_$cshowList -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fShowBoolDisj1 :: Semigroups.BoolDisj -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (ds :: Semigroups.BoolDisj) (x :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Semigroups.$fShowBoolDisj2
                   (case ds `cast` (Semigroups.N:BoolDisj[0]) of wild {
                      GHC.Types.False
                      -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool3 x
                      GHC.Types.True
                      -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool1 x })) -}
27e4c6e0d9ddd26c7047b36a0fad7775
  $fShowBoolDisj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolDisj "#) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fShowBoolDisj_$cshow :: Semigroups.BoolDisj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Semigroups.BoolDisj) ->
                 GHC.CString.unpackAppendCString#
                   Semigroups.$fShowBoolDisj2
                   (case x `cast` (Semigroups.N:BoolDisj[0]) of wild {
                      GHC.Types.False -> GHC.Show.$fShowBool3
                      GHC.Types.True -> GHC.Show.$fShowBool1 })) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fShowBoolDisj_$cshowList ::
    [Semigroups.BoolDisj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Semigroups.BoolDisj
                   Semigroups.$fShowBoolDisj1) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $fShowBoolDisj_$cshowsPrec ::
    GHC.Types.Int -> Semigroups.BoolDisj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.BoolDisj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Semigroups.$w$cshowsPrec1 ww1 w1 w2 }) -}
1680422b1fc36f6b30d90805ebb5f560
  $fShowCombine :: GHC.Show.Show (Semigroups.Combine a b)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Semigroups.Combine a b)
                  (Semigroups.$fShowCombine_$cshowsPrec @ a @ b)
                  (Semigroups.$fShowCombine_$cshow @ a @ b)
                  (Semigroups.$fShowCombine_$cshowList @ a @ b) -}
1680422b1fc36f6b30d90805ebb5f560
  $fShowCombine1 ::
    Semigroups.Combine a b -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (x :: Semigroups.Combine a b)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString# "Combine arbFunc"# s) -}
757ddb52b1d7bb666bc81e6af224907e
  $fShowCombine2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Semigroups.$fShowCombine3) -}
9a7dae38127daf58b529809ac9630b9a
  $fShowCombine3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Combine arbFunc"#) -}
1680422b1fc36f6b30d90805ebb5f560
  $fShowCombine_$cshow :: Semigroups.Combine a b -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ b (ds :: Semigroups.Combine a b) ->
                 Semigroups.$fShowCombine2) -}
1680422b1fc36f6b30d90805ebb5f560
  $fShowCombine_$cshowList ::
    [Semigroups.Combine a b] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (ls :: [Semigroups.Combine a b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Combine a b)
                   (Semigroups.$fShowCombine1 @ a @ b)
                   ls
                   s) -}
1680422b1fc36f6b30d90805ebb5f560
  $fShowCombine_$cshowsPrec ::
    GHC.Types.Int -> Semigroups.Combine a b -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (ds :: GHC.Types.Int)
                   (x :: Semigroups.Combine a b)
                   (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString# "Combine arbFunc"# s) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fShowComp :: GHC.Show.Show (Semigroups.Comp a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Semigroups.Comp a)
                  (Semigroups.$fShowComp_$cshowsPrec @ a)
                  (Semigroups.$fShowComp_$cshow @ a)
                  (Semigroups.$fShowComp_$cshowList @ a) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fShowComp1 ::
    Semigroups.Comp a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Semigroups.Comp a) (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString# "Comp arbFunc"# s) -}
32f5e137f8fc8efb1de64955ab434177
  $fShowComp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Semigroups.$fShowComp3) -}
835d3e55146a9f5419aeacd68fcc0d7c
  $fShowComp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Comp arbFunc"#) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fShowComp_$cshow :: Semigroups.Comp a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Semigroups.Comp a) -> Semigroups.$fShowComp2) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fShowComp_$cshowList :: [Semigroups.Comp a] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ls :: [Semigroups.Comp a]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Comp a)
                   (Semigroups.$fShowComp1 @ a)
                   ls
                   s) -}
4860b4ccd05862bc07207bcfb8fa433d
  $fShowComp_$cshowsPrec ::
    GHC.Types.Int -> Semigroups.Comp a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Semigroups.Comp a)
                   (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString# "Comp arbFunc"# s) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fShowFour ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Show.Show (Semigroups.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      (v :: GHC.Show.Show d)
                      (v1 :: GHC.Show.Show c)
                      (v2 :: GHC.Show.Show b)
                      (v3 :: GHC.Show.Show a).
                  @ (Semigroups.Four a b c d)
                  (Semigroups.$fShowFour_$cshowsPrec @ a @ b @ c @ d v v1 v2 v3)
                  (Semigroups.$fShowFour_$cshow @ a @ b @ c @ d v v1 v2 v3)
                  (Semigroups.$fShowFour_$cshowList @ a @ b @ c @ d v v1 v2 v3) -}
c721a384fe5159e6de3674beffe7a8b4
  $fShowFour1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
265315d9da04f84a86ebc221774fe58d
  $fShowFour2 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b "Four "# c n) -}
c64b9fe67cf8c3049d8158fe6d482736
  $fShowFour3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
e1de9573afe3a3547ff1a1e1c1a538dc
  $fShowFour4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Four "#) -}
509f0f0797874d253f2816c822cac5ff
  $fShowFour5 ::
    Semigroups.Four
      (Data.Monoid.Sum GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>,
     Unfolding: (\ (w :: Semigroups.Four
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)) ->
                 case w of ww { Semigroups.Four ww1 ww2 ww3 ww4 ->
                 Semigroups.$w$s$cshowsPrec 0# ww1 ww2 ww3 ww4 }) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fShowFour_$cshow ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    Semigroups.Four a b c d -> GHC.Base.String
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow :: GHC.Show.Show d)
                   ($dShow1 :: GHC.Show.Show c)
                   ($dShow2 :: GHC.Show.Show b)
                   ($dShow3 :: GHC.Show.Show a)
                   (x :: Semigroups.Four a b c d) ->
                 Semigroups.$fShowFour_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   @ d
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   Semigroups.$fShowFour1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fShowFour_$cshowList ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    [Semigroups.Four a b c d] -> GHC.Show.ShowS
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow :: GHC.Show.Show d)
                   ($dShow1 :: GHC.Show.Show c)
                   ($dShow2 :: GHC.Show.Show b)
                   ($dShow3 :: GHC.Show.Show a)
                   (eta :: [Semigroups.Four a b c d])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Four a b c d)
                   (Semigroups.$fShowFour_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      @ d
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      Semigroups.$fShowFour1)
                   eta
                   eta1) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fShowFour_$cshowsPrec ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Types.Int -> Semigroups.Four a b c d -> GHC.Show.ShowS
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (w4 :: GHC.Types.Int)
                   (w5 :: Semigroups.Four a b c d) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { Semigroups.Four ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$cshowsPrec2
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
fb06b75de9f8ceac691e1774f4df3acf
  $fShowFour_$s$cshowList ::
    [Semigroups.Four
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Semigroups.Four
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Sum GHC.Types.Int)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Four
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))
                   Semigroups.$fShowFour5
                   eta
                   eta1) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fShowFour_$s$cshowsPrec ::
    GHC.Types.Int
    -> Semigroups.Four
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S,1*U(U,U,U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.Four
                            (Data.Monoid.Sum GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)
                            (Data.Monoid.Sum GHC.Types.Int)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Semigroups.Four ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$s$cshowsPrec ww1 ww3 ww4 ww5 ww6 } }) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $fShowFour_$s$fShowFour ::
    GHC.Show.Show
      (Semigroups.Four
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Semigroups.Four
                       (Data.Monoid.Sum GHC.Types.Int)
                       (Data.Monoid.Product GHC.Types.Int)
                       (Data.Monoid.Product GHC.Types.Int)
                       (Data.Monoid.Sum GHC.Types.Int))
                  Semigroups.$fShowFour_$s$cshowsPrec
                  (\ (x :: Semigroups.Four
                             (Data.Monoid.Sum GHC.Types.Int)
                             (Data.Monoid.Product GHC.Types.Int)
                             (Data.Monoid.Product GHC.Types.Int)
                             (Data.Monoid.Sum GHC.Types.Int)) ->
                   case x of wild { Semigroups.Four b1 b2 b3 b4 ->
                   let {
                     f :: GHC.Base.String -> GHC.Base.String
                     = Data.Monoid.$fShowSum_$cshowsPrec
                         @ GHC.Types.Int
                         GHC.Show.$fShowInt
                         Semigroups.$fShowFour3
                         b1
                   } in
                   let {
                     f1 :: GHC.Base.String -> GHC.Base.String
                     = Data.Monoid.$fShowProduct_$cshowsPrec
                         @ GHC.Types.Int
                         GHC.Show.$fShowInt
                         Semigroups.$fShowFour3
                         b2
                   } in
                   let {
                     f2 :: GHC.Base.String -> GHC.Base.String
                     = Data.Monoid.$fShowProduct_$cshowsPrec
                         @ GHC.Types.Int
                         GHC.Show.$fShowInt
                         Semigroups.$fShowFour3
                         b3
                   } in
                   let {
                     g :: GHC.Base.String -> GHC.Base.String
                     = Data.Monoid.$fShowSum_$cshowsPrec
                         @ GHC.Types.Int
                         GHC.Show.$fShowInt
                         Semigroups.$fShowFour3
                         b4
                   } in
                   let {
                     p :: GHC.Show.ShowS {- Arity: 1 -}
                     = \ (x1 :: GHC.Base.String) ->
                       GHC.Base.augment
                         @ GHC.Types.Char
                         Semigroups.$fShowFour2
                         (f (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (f1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (f2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (g x1)))))))
                   } in
                   case GHC.Classes.geInt
                          Semigroups.$fShowFour1
                          Semigroups.$fShowFour3 of wild1 {
                     GHC.Types.False -> p (GHC.Types.[] @ GHC.Types.Char)
                     GHC.Types.True
                     -> GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)4
                          (p (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)2
                                (GHC.Types.[] @ GHC.Types.Char))) } })
                  (\ (eta :: [Semigroups.Four
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Sum GHC.Types.Int)])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Semigroups.Four
                          (Data.Monoid.Sum GHC.Types.Int)
                          (Data.Monoid.Product GHC.Types.Int)
                          (Data.Monoid.Product GHC.Types.Int)
                          (Data.Monoid.Sum GHC.Types.Int))
                     (Semigroups.$fShowFour_$s$cshowsPrec Semigroups.$fShowFour1)
                     eta
                     eta1) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Semigroups.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Semigroups.Identity a)
                  (Semigroups.$fShowIdentity_$cshowsPrec @ a v)
                  (Semigroups.$fShowIdentity_$cshow @ a v)
                  (Semigroups.$fShowIdentity_$cshowList @ a v) -}
c34b54d0e69b8c427fe0d0dd14cb8b78
  $fShowIdentity1 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 letrec {
                   go :: [GHC.Types.Char] -> b {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild { [] -> n : y ys -> c y (go ys) }
                 } in
                 go Semigroups.$fShowIdentity2) -}
410541e538ac74e4b92c27cf60ac20f2
  $fShowIdentity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Semigroups.$fShowIdentity3) -}
165e9c36224bb9447dcee20aa14c3e9f
  $fShowIdentity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Identity "#) -}
07035774a1f4d9ac6dc9429ffb8df1b6
  $fShowIdentity4 ::
    Semigroups.Identity GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ (ds :: Semigroups.Identity GHC.Types.Int)
                   (x :: GHC.Base.String) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Semigroups.$fShowIdentity2
                   (case ds
                           `cast`
                         (Semigroups.N:Identity[0]
                              <GHC.Types.Int>_R) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Semigroups.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Semigroups.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Semigroups.$fShowIdentity2)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Semigroups.$fShowFour3
                      x `cast` (Semigroups.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Semigroups.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Semigroups.Identity a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Identity a)
                   (Semigroups.$fShowIdentity_$cshowsPrec
                      @ a
                      $dShow
                      Semigroups.$fShowFour1)
                   eta
                   eta1) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Semigroups.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Semigroups.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Semigroups.$w$cshowsPrec3 @ a w ww1 w2 }) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity_$s$cshow ::
    Semigroups.Identity GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Semigroups.Identity GHC.Types.Int) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Semigroups.$fShowIdentity2
                   (case x `cast`
                         (Semigroups.N:Identity[0]
                              <GHC.Types.Int>_R) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
cf0db73e786f25a2c692f41f3af6ff96
  $fShowIdentity_$s$cshowList ::
    [Semigroups.Identity GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Semigroups.Identity GHC.Types.Int])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Identity GHC.Types.Int)
                   Semigroups.$fShowIdentity4
                   eta
                   eta1) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity_$s$cshowsPrec ::
    GHC.Types.Int
    -> Semigroups.Identity GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.Identity GHC.Types.Int)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Semigroups.$w$s$cshowsPrec1 ww1 w1 w2 }) -}
1eb6844ec49db02af3857e0653ef365c
  $fShowIdentity_$s$fShowIdentity ::
    GHC.Show.Show (Semigroups.Identity GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Semigroups.Identity GHC.Types.Int)
                  Semigroups.$fShowIdentity_$s$cshowsPrec
                  Semigroups.$fShowIdentity_$s$cshow
                  (\ (eta :: [Semigroups.Identity GHC.Types.Int])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Semigroups.Identity GHC.Types.Int)
                     (\ (ds :: Semigroups.Identity GHC.Types.Int) ->
                      case GHC.Classes.geInt
                             Semigroups.$fShowFour1
                             Semigroups.$fShowFour3 of wild {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String)[OneShot] ->
                           GHC.Base.augment
                             @ GHC.Types.Char
                             Semigroups.$fShowIdentity1
                             (GHC.Show.showSignedInt
                                Semigroups.$fShowFour3
                                ds `cast` (Semigroups.N:Identity[0] <GHC.Types.Int>_R)
                                x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String)[OneShot] ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                Semigroups.$fShowIdentity1
                                (GHC.Show.showSignedInt
                                   Semigroups.$fShowFour3
                                   ds `cast` (Semigroups.N:Identity[0] <GHC.Types.Int>_R)
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) })
                     eta
                     eta1) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Semigroups.Or a b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Show.Show b)
                      (v1 :: GHC.Show.Show a).
                  @ (Semigroups.Or a b)
                  (Semigroups.$fShowOr_$cshowsPrec @ a @ b v v1)
                  (Semigroups.$fShowOr_$cshow @ a @ b v v1)
                  (Semigroups.$fShowOr_$cshowList @ a @ b v v1) -}
f13ca1718b5b11356ee84452ef6a2611
  $fShowOr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowChar1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b335c75085c473b3d947493a3ed4a228
  $fShowOr2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShowChar3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
34267628834a4615d49d30b1657ba702
  $fShowOr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Semigroups.$fShowOr4) -}
630aefbae7feac8cd3d52934aed7398b
  $fShowOr4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Snd "#) -}
90b7b90441ab4d4a2b0672de12e39e05
  $fShowOr5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Semigroups.$fShowOr6) -}
0b4fdfbaf8bd46e049ddaf5a6a7897e6
  $fShowOr6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fst "#) -}
943f5ed626064eda57051ce7c2b246d8
  $fShowOr7 ::
    Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Semigroups.Or GHC.Types.Int GHC.Types.Char)
                   (w1 :: GHC.Base.String) ->
                 Semigroups.$w$s$cshowsPrec2 0# w w1) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Semigroups.Or a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Semigroups.Or a b) ->
                 case x of wild {
                   Semigroups.Fst b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Semigroups.$fShowOr5
                        (GHC.Show.showsPrec
                           @ a
                           $dShow1
                           Semigroups.$fShowFour3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Semigroups.Snd b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Semigroups.$fShowOr3
                        (GHC.Show.showsPrec
                           @ b
                           $dShow
                           Semigroups.$fShowFour3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Semigroups.Or a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Semigroups.Or a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Or a b)
                   (Semigroups.$fShowOr_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Semigroups.$fShowFour1)
                   eta
                   eta1) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Semigroups.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Semigroups.Or a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Semigroups.$w$cshowsPrec4 @ a @ b w w1 ww1 w3 }) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr_$s$cshow ::
    Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Semigroups.Or GHC.Types.Int GHC.Types.Char) ->
                 case x of wild {
                   Semigroups.Fst b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Semigroups.$fShowOr5
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Semigroups.Snd b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Semigroups.$fShowOr3
                        (case b1 of ww { GHC.Types.C# ww1 ->
                         case ww1 of ds {
                           DEFAULT
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShowChar3
                                (GHC.Show.$wshowLitChar ds Semigroups.$fShowOr2)
                           '\''# -> Semigroups.$fShowOr1 } }) }) -}
80d168166a0f703ed1a0062d07dc94e1
  $fShowOr_$s$cshowList ::
    [Semigroups.Or GHC.Types.Int GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Semigroups.Or GHC.Types.Int GHC.Types.Char])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                   Semigroups.$fShowOr7
                   eta
                   eta1) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr_$s$cshowsPrec ::
    GHC.Types.Int
    -> Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.Or GHC.Types.Int GHC.Types.Char)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Semigroups.$w$s$cshowsPrec2 ww1 w1 w2 }) -}
851e595e2271717f98fae0ff97d8baf5
  $fShowOr_$s$fShowOr ::
    GHC.Show.Show (Semigroups.Or GHC.Types.Int GHC.Types.Char)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                  Semigroups.$fShowOr_$s$cshowsPrec
                  Semigroups.$fShowOr_$s$cshow
                  (\ (eta :: [Semigroups.Or GHC.Types.Int GHC.Types.Char])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                     (Semigroups.$fShowOr_$s$cshowsPrec Semigroups.$fShowFour1)
                     eta
                     eta1) -}
722dd06aa40b86490cd9453af01ec7d4
  $fShowThree ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Semigroups.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      (v :: GHC.Show.Show c)
                      (v1 :: GHC.Show.Show b)
                      (v2 :: GHC.Show.Show a).
                  @ (Semigroups.Three a b c)
                  (Semigroups.$fShowThree_$cshowsPrec @ a @ b @ c v v1 v2)
                  (Semigroups.$fShowThree_$cshow @ a @ b @ c v v1 v2)
                  (Semigroups.$fShowThree_$cshowList @ a @ b @ c v v1 v2) -}
4400b074a664b5c8fe004141bc2744db
  $fShowThree1 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b "Three "# c n) -}
ca2a5abd8785aee585009c90372da9f6
  $fShowThree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Three "#) -}
15ccc96f24757a0d178388be7c7c02bb
  $fShowThree3 ::
    Semigroups.Three
      (Data.Monoid.Sum GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>,
     Unfolding: (\ (w :: Semigroups.Three
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)) ->
                 case w of ww { Semigroups.Three ww1 ww2 ww3 ->
                 Semigroups.$w$s$cshowsPrec3 0# ww1 ww2 ww3 }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fShowThree_$cshow ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    Semigroups.Three a b c -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show a)
                   (x :: Semigroups.Three a b c) ->
                 Semigroups.$fShowThree_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   $dShow
                   $dShow1
                   $dShow2
                   Semigroups.$fShowFour1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
722dd06aa40b86490cd9453af01ec7d4
  $fShowThree_$cshowList ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    [Semigroups.Three a b c] -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show a)
                   (eta :: [Semigroups.Three a b c])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Three a b c)
                   (Semigroups.$fShowThree_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      $dShow
                      $dShow1
                      $dShow2
                      Semigroups.$fShowFour1)
                   eta
                   eta1) -}
722dd06aa40b86490cd9453af01ec7d4
  $fShowThree_$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Semigroups.Three a b c -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (w3 :: GHC.Types.Int)
                   (w4 :: Semigroups.Three a b c) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { Semigroups.Three ww3 ww4 ww5 ->
                 Semigroups.$w$cshowsPrec5
                   @ a
                   @ b
                   @ c
                   w
                   w1
                   w2
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
2110dd8308edcc0b038c3fb28a260f6b
  $fShowThree_$s$cshowList ::
    [Semigroups.Three
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Semigroups.Three
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Sum GHC.Types.Int)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Three
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))
                   Semigroups.$fShowThree3
                   eta
                   eta1) -}
722dd06aa40b86490cd9453af01ec7d4
  $fShowThree_$s$cshowsPrec ::
    GHC.Types.Int
    -> Semigroups.Three
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.Three
                            (Data.Monoid.Sum GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)
                            (Data.Monoid.Sum GHC.Types.Int)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Semigroups.Three ww3 ww4 ww5 ->
                 Semigroups.$w$s$cshowsPrec3 ww1 ww3 ww4 ww5 } }) -}
722dd06aa40b86490cd9453af01ec7d4
  $fShowThree_$s$fShowThree ::
    GHC.Show.Show
      (Semigroups.Three
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Semigroups.Three
                       (Data.Monoid.Sum GHC.Types.Int)
                       (Data.Monoid.Product GHC.Types.Int)
                       (Data.Monoid.Sum GHC.Types.Int))
                  Semigroups.$fShowThree_$s$cshowsPrec
                  (\ (x :: Semigroups.Three
                             (Data.Monoid.Sum GHC.Types.Int)
                             (Data.Monoid.Product GHC.Types.Int)
                             (Data.Monoid.Sum GHC.Types.Int)) ->
                   case x of wild { Semigroups.Three b1 b2 b3 ->
                   case GHC.Classes.geInt
                          Semigroups.$fShowFour1
                          Semigroups.$fShowFour3 of wild1 {
                     GHC.Types.False
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          Semigroups.$fShowThree1
                          (Data.Monoid.$fShowSum_$cshowsPrec
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             Semigroups.$fShowFour3
                             b1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Data.Monoid.$fShowProduct_$cshowsPrec
                                   @ GHC.Types.Int
                                   GHC.Show.$fShowInt
                                   Semigroups.$fShowFour3
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (Data.Monoid.$fShowSum_$cshowsPrec
                                         @ GHC.Types.Int
                                         GHC.Show.$fShowInt
                                         Semigroups.$fShowFour3
                                         b3
                                         (GHC.Types.[] @ GHC.Types.Char))))))
                     GHC.Types.True
                     -> GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)4
                          (GHC.Base.augment
                             @ GHC.Types.Char
                             Semigroups.$fShowThree1
                             (Data.Monoid.$fShowSum_$cshowsPrec
                                @ GHC.Types.Int
                                GHC.Show.$fShowInt
                                Semigroups.$fShowFour3
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (Data.Monoid.$fShowProduct_$cshowsPrec
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      Semigroups.$fShowFour3
                                      b2
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (Data.Monoid.$fShowSum_$cshowsPrec
                                            @ GHC.Types.Int
                                            GHC.Show.$fShowInt
                                            Semigroups.$fShowFour3
                                            b3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               (GHC.Types.[] @ GHC.Types.Char)))))))) } })
                  (\ (eta :: [Semigroups.Three
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Sum GHC.Types.Int)])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Semigroups.Three
                          (Data.Monoid.Sum GHC.Types.Int)
                          (Data.Monoid.Product GHC.Types.Int)
                          (Data.Monoid.Sum GHC.Types.Int))
                     (Semigroups.$fShowThree_$s$cshowsPrec Semigroups.$fShowFour1)
                     eta
                     eta1) -}
f3ff4d280629b1d149877cdd80c9301e
  $fShowTrivial :: GHC.Show.Show Semigroups.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Semigroups.Trivial
                  Semigroups.$fShowTrivial_$cshowsPrec
                  Semigroups.$fShowTrivial_$cshow
                  Semigroups.$fShowTrivial_$cshowList -}
f3ff4d280629b1d149877cdd80c9301e
  $fShowTrivial1 :: Semigroups.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Semigroups.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Semigroups.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Semigroups.$fShowTrivial2)
                   eta }) -}
41a9b920048bdd77241f1acc0e14ed70
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Semigroups.$fShowTrivial3) -}
fe3d5aca25050f8a09d89bfe5961f632
  $fShowTrivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Trivial"#) -}
f3ff4d280629b1d149877cdd80c9301e
  $fShowTrivial_$cshow :: Semigroups.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Semigroups.Trivial) ->
                 case x of wild { Semigroups.Trivial ->
                 Semigroups.$fShowTrivial2 }) -}
f3ff4d280629b1d149877cdd80c9301e
  $fShowTrivial_$cshowList :: [Semigroups.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Semigroups.Trivial
                   Semigroups.$fShowTrivial1) -}
f3ff4d280629b1d149877cdd80c9301e
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Semigroups.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Semigroups.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Semigroups.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Semigroups.$fShowTrivial2)
                   eta }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fShowTwo ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Semigroups.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Show.Show b)
                      (v1 :: GHC.Show.Show a).
                  @ (Semigroups.Two a b)
                  (Semigroups.$fShowTwo_$cshowsPrec @ a @ b v v1)
                  (Semigroups.$fShowTwo_$cshow @ a @ b v v1)
                  (Semigroups.$fShowTwo_$cshowList @ a @ b v v1) -}
445980521fa1f0476ff874067998d933
  $fShowTwo1 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b "Two "# c n) -}
fed70e4e4dc9bb52afe56e37ce20fb32
  $fShowTwo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two "#) -}
3744a1aa07fdd10bf2bbf88fc8f6acde
  $fShowTwo3 ::
    Semigroups.Two
      (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>,
     Unfolding: (\ (w :: Semigroups.Two
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)) ->
                 case w of ww { Semigroups.Two ww1 ww2 ->
                 Semigroups.$w$s$cshowsPrec4 0# ww1 ww2 }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fShowTwo_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Semigroups.Two a b -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Semigroups.Two a b) ->
                 Semigroups.$fShowTwo_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   Semigroups.$fShowFour1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fShowTwo_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Semigroups.Two a b] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Semigroups.Two a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Two a b)
                   (Semigroups.$fShowTwo_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Semigroups.$fShowFour1)
                   eta
                   eta1) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fShowTwo_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Semigroups.Two a b -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Semigroups.Two a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Semigroups.Two ww3 ww4 ->
                 Semigroups.$w$cshowsPrec6 @ a @ b w w1 ww1 ww3 ww4 } }) -}
4c49bf3ee879ccf4fe08d13e0ee7822c
  $fShowTwo_$s$cshowList ::
    [Semigroups.Two
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Semigroups.Two
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Semigroups.Two
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int))
                   Semigroups.$fShowTwo3
                   eta
                   eta1) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fShowTwo_$s$cshowsPrec ::
    GHC.Types.Int
    -> Semigroups.Two
         (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Semigroups.Two
                            (Data.Monoid.Sum GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Semigroups.Two ww3 ww4 ->
                 Semigroups.$w$s$cshowsPrec4 ww1 ww3 ww4 } }) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $fShowTwo_$s$fShowTwo ::
    GHC.Show.Show
      (Semigroups.Two
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Semigroups.Two
                       (Data.Monoid.Sum GHC.Types.Int)
                       (Data.Monoid.Product GHC.Types.Int))
                  Semigroups.$fShowTwo_$s$cshowsPrec
                  (\ (x :: Semigroups.Two
                             (Data.Monoid.Sum GHC.Types.Int)
                             (Data.Monoid.Product GHC.Types.Int)) ->
                   case x of wild { Semigroups.Two b1 b2 ->
                   case GHC.Classes.geInt
                          Semigroups.$fShowFour1
                          Semigroups.$fShowFour3 of wild1 {
                     GHC.Types.False
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          Semigroups.$fShowTwo1
                          (Data.Monoid.$fShowSum_$cshowsPrec
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             Semigroups.$fShowFour3
                             b1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Data.Monoid.$fShowProduct_$cshowsPrec
                                   @ GHC.Types.Int
                                   GHC.Show.$fShowInt
                                   Semigroups.$fShowFour3
                                   b2
                                   (GHC.Types.[] @ GHC.Types.Char))))
                     GHC.Types.True
                     -> GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)4
                          (GHC.Base.augment
                             @ GHC.Types.Char
                             Semigroups.$fShowTwo1
                             (Data.Monoid.$fShowSum_$cshowsPrec
                                @ GHC.Types.Int
                                GHC.Show.$fShowInt
                                Semigroups.$fShowFour3
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (Data.Monoid.$fShowProduct_$cshowsPrec
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      Semigroups.$fShowFour3
                                      b2
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)2
                                         (GHC.Types.[] @ GHC.Types.Char)))))) } })
                  (\ (eta :: [Semigroups.Two
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Semigroups.Two
                          (Data.Monoid.Sum GHC.Types.Int)
                          (Data.Monoid.Product GHC.Types.Int))
                     (Semigroups.$fShowTwo_$s$cshowsPrec Semigroups.$fShowFour1)
                     eta
                     eta1) -}
24df63035de6763122e322a406251e6a
  $s$fTestable(->)10 ::
    (Semigroups.Identity GHC.Types.Int
     -> Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Identity GHC.Types.Int
                         -> Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable2 w ww1 ww2 ww3 ww4 w2 }) -}
5281ce0a65f816c3ed965e9e68e72341
  $s$fTestable(->)11 ::
    Semigroups.Identity GHC.Types.Int
    -> [Semigroups.Identity GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Identity GHC.Types.Int) ->
                 GHC.Types.[] @ (Semigroups.Identity GHC.Types.Int)) -}
44f3bf05f00420ba22173222a3f28f98
  $s$fTestable(->)12 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Identity GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Semigroups.$wlvl ww1 ww2 ww3 ww4 ww8 of ww9 { DEFAULT ->
                 (GHC.Types.I# ww9)
                   `cast`
                 (Sym (Semigroups.N:Identity[0] <GHC.Types.Int>_R)) } } }) -}
96f09a8908aa2c9183caf41b2f5e8fee
  $s$fTestable(->)13 ::
    (Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable3 w ww1 ww2 ww3 ww4 w2 }) -}
87ea4e20f0696f80a0ab00b4688d8005
  $s$fTestable(->)14 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Identity GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Semigroups.$wlvl1 ww1 ww2 ww3 ww4 ww8 of ww9 { DEFAULT ->
                 (GHC.Types.I# ww9)
                   `cast`
                 (Sym (Semigroups.N:Identity[0] <GHC.Types.Int>_R)) } } }) -}
db77ffbc7b096a5c7504d85ee70191a0
  $s$fTestable(->)18 ::
    (Semigroups.BoolDisj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.BoolDisj -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable4 w ww1 ww2 ww3 ww4 w2 }) -}
5d55d9d5bd424394c13270af535227c0
  $s$fTestable(->)20 ::
    (Semigroups.BoolDisj -> Semigroups.BoolDisj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.BoolDisj
                         -> Semigroups.BoolDisj -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable5 w ww1 ww2 ww3 ww4 w2 }) -}
72c844f2a01a4730cc4ebf72e3976a0c
  $s$fTestable(->)23 ::
    (Semigroups.BoolConj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.BoolConj -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable6 w ww1 ww2 ww3 ww4 w2 }) -}
5a4b325d53b7e73d88d65c99c0202063
  $s$fTestable(->)25 ::
    (Semigroups.BoolConj -> Semigroups.BoolConj -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.BoolConj
                         -> Semigroups.BoolConj -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable7 w ww1 ww2 ww3 ww4 w2 }) -}
45a43407139649988a9241998135969f
  $s$fTestable(->)30 ::
    (Semigroups.Four
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Four
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable8 w ww1 ww2 ww3 ww4 w2 }) -}
a1042128cc0a3571b797fa6c1ef66c93
  $s$fTestable(->)31 ::
    Semigroups.Four
      (Data.Monoid.Sum GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Sum GHC.Types.Int)
    -> [Semigroups.Four
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Sum GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Four
                            (Data.Monoid.Sum GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)
                            (Data.Monoid.Sum GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Semigroups.Four
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))) -}
a60b448d80f1be4b8da7ed380f53bafa
  $s$fTestable(->)33 ::
    (Semigroups.Four
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> Semigroups.Four
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Four
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> Semigroups.Four
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable9 w ww1 ww2 ww3 ww4 w2 }) -}
aeecf1f99f56db12962b159eb8896bfa
  $s$fTestable(->)35 ::
    (Semigroups.Three
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Three
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable10 w ww1 ww2 ww3 ww4 w2 }) -}
adcb4a0eddc2c181f85825bc1bf25883
  $s$fTestable(->)36 ::
    Semigroups.Three
      (Data.Monoid.Sum GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Sum GHC.Types.Int)
    -> [Semigroups.Three
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Sum GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Three
                            (Data.Monoid.Sum GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)
                            (Data.Monoid.Sum GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Semigroups.Three
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))) -}
a7098ac371f39460696b16dae0e19569
  $s$fTestable(->)38 ::
    (Semigroups.Three
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> Semigroups.Three
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Three
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> Semigroups.Three
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable11 w ww1 ww2 ww3 ww4 w2 }) -}
77a055124f0a64cacafe4e92255a85eb
  $s$fTestable(->)4 ::
    (Semigroups.Or GHC.Types.Int GHC.Types.Char
     -> Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Or GHC.Types.Int GHC.Types.Char
                         -> Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
36420e2b35cda31b9e1309acccf0528b
  $s$fTestable(->)40 ::
    (Semigroups.Two
       (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Two
                           (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable12 w ww1 ww2 ww3 ww4 w2 }) -}
62c1ed0db85cef0a50841633b6f4e503
  $s$fTestable(->)41 ::
    Semigroups.Two
      (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
    -> [Semigroups.Two
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Two
                            (Data.Monoid.Sum GHC.Types.Int)
                            (Data.Monoid.Product GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Semigroups.Two
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int))) -}
665b26a70db82945dd912f9520d15149
  $s$fTestable(->)43 ::
    (Semigroups.Two
       (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
     -> Semigroups.Two
          (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Two
                           (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                         -> Semigroups.Two
                              (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable13 w ww1 ww2 ww3 ww4 w2 }) -}
13c1b7ebd1414662513d1413bb727a6f
  $s$fTestable(->)45 ::
    (Semigroups.Comp GHC.Types.Int
     -> Semigroups.Comp GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Comp GHC.Types.Int
                         -> Semigroups.Comp GHC.Types.Int
                         -> GHC.Types.Int
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable14 w ww1 ww2 ww3 ww4 w2 }) -}
f3832a5f44df7079f456018fb3ffce1f
  $s$fTestable(->)46 ::
    Semigroups.Comp GHC.Types.Int -> [Semigroups.Comp GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Comp GHC.Types.Int) ->
                 GHC.Types.[] @ (Semigroups.Comp GHC.Types.Int)) -}
98774d07278e895ffb5cc1d0d0853a8e
  $s$fTestable(->)47 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Comp GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$wlvl2 ww1 ww2 ww3 ww4 w1 }) -}
ee085485ba33fdb88d283153d0f69cf6
  $s$fTestable(->)48 ::
    (Semigroups.Comp GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Comp GHC.Types.Int
                         -> GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable15 w ww1 ww2 ww3 ww4 w2 }) -}
5f8ca17d5ed1740149e5bb9639042666
  $s$fTestable(->)49 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Semigroups.Comp GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$wlvl3 ww1 ww2 ww3 ww4 w1 }) -}
86bf28f04658f163884cf1481c77c5f0
  $s$fTestable(->)5 ::
    Semigroups.Or GHC.Types.Int GHC.Types.Char
    -> [Semigroups.Or GHC.Types.Int GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Or GHC.Types.Int GHC.Types.Char) ->
                 GHC.Types.[] @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)) -}
6546f3f6dbecddd84acce9924690783d
  $s$fTestable(->)50 ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable16 w ww1 ww2 ww3 ww4 w2 }) -}
6b2ce608e1dced52d06173d46b58b8db
  $s$fTestable(->)53 ::
    (Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
     -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Int
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Combine
                           GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                         -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Int
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable17 w ww1 ww2 ww3 ww4 w2 }) -}
e103cc53af2703724ddc83aa76c2fe7c
  $s$fTestable(->)54 ::
    Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
    -> [Semigroups.Combine
          GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Semigroups.Combine
                            GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Semigroups.Combine
                        GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))) -}
b7b8cfe45542f209970e34ccf7597302
  $s$fTestable(->)55 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$wlvl4 ww1 ww2 ww3 ww4 w1 }) -}
9475413d295d981c04a625dc07cac3b6
  $s$fTestable(->)56 ::
    (Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Combine
                           GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable18 w ww1 ww2 ww3 ww4 w2 }) -}
4701d97826351e3456c2d70f4a936eea
  $s$fTestable(->)57 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$wlvl5 ww1 ww2 ww3 ww4 w1 }) -}
cc599b7427e4487155129aebcd14a546
  $s$fTestable(->)6 ::
    (Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Or GHC.Types.Int GHC.Types.Char
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
bd6d5b1f58401c1acbd6eb84ecbbcf01
  $s$fTestable(->)63 ::
    (Semigroups.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable19 w ww1 ww2 ww3 ww4 w2 }) -}
0079f8d92129403b1e8cb7475011fad2
  $s$fTestable(->)65 ::
    (Semigroups.Trivial -> Semigroups.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Semigroups.Trivial
                         -> Semigroups.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Semigroups.$w$dTestable20 w ww1 ww2 ww3 ww4 w2 }) -}
470ac285128c8259aa13b024d5e1a683
  $tc'BoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10948651566850143930##
                   13710557847016661751##
                   Semigroups.$trModule
                   Semigroups.$tc'BoolConj2
                   0#
                   Semigroups.$tc'BoolConj1) -}
18207bfeeca0fb6548dcb6ff9a60c693
  $tc'BoolConj1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7cb145857ed60050c657ff70696ca72
  $tc'BoolConj2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'BoolConj3) -}
475dbebdd60faf2819aa912273bbecc2
  $tc'BoolConj3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolConj"#) -}
732da50511020b57c1175bddc28685a9
  $tc'BoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8075393434986757600##
                   6756530459998887331##
                   Semigroups.$trModule
                   Semigroups.$tc'BoolDisj2
                   0#
                   Semigroups.$tc'BoolDisj1) -}
df600dcff20efd23f92465c8a4a9e90c
  $tc'BoolDisj1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
50c080c580847119630327ffb5b91279
  $tc'BoolDisj2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'BoolDisj3) -}
305453c0ba4d8e875d791d83a5727c1a
  $tc'BoolDisj3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolDisj"#) -}
0b1d60343ab855213206a72e2663b02e
  $tc'Combine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16636349160660496373##
                   14602173765017079286##
                   Semigroups.$trModule
                   Semigroups.$tc'Combine2
                   2#
                   Semigroups.$tc'Combine1) -}
97e9d64e9ec0ce2a9886b2d75a14022e
  $tc'Combine1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bb787ea3f49654dde1d1f590a5c17ea6
  $tc'Combine2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Combine3) -}
a5a5f2ee531bfd1baf3a4702c466faf8
  $tc'Combine3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Combine"#) -}
78c49444b9c21a8fc339065ed1a51a15
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5929568413347813063##
                   15189921528589323291##
                   Semigroups.$trModule
                   Semigroups.$tc'Comp2
                   1#
                   Semigroups.$tc'Comp1) -}
f9c63c3beb9449a3b35c53157b83f56f
  $tc'Comp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2fdc82ad640e1f1f5152f012486a1d89
  $tc'Comp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Comp3) -}
bdc9f20c88269ee764b3c3685aea2396
  $tc'Comp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Comp"#) -}
43155c925dfbeb60c5b66088b9a70939
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7322827632172013742##
                   16014190535535391435##
                   Semigroups.$trModule
                   Semigroups.$tc'Four2
                   4#
                   Semigroups.$tc'Four1) -}
6b7635648a4791a9380115eac8777af2
  $tc'Four1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
af2cdfe46f961cfaa0b4f9f190be56f6
  $tc'Four2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Four3) -}
50a6c9c0505b54c84475b73663c64c64
  $tc'Four3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Four"#) -}
4e0315c607e4293e48092f50a74b9bc6
  $tc'Fst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7648654090268277567##
                   11053291352181326968##
                   Semigroups.$trModule
                   Semigroups.$tc'Fst2
                   2#
                   Semigroups.$tc'Fst1) -}
bf044a775314c8945bfe3dfb0b2c51b6
  $tc'Fst1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b50b06471b110ff10bbfe646aafd816
  $tc'Fst2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Fst3) -}
7f854543f59e8237f8b071d23a266a56
  $tc'Fst3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fst"#) -}
d9aa4c3ca69d21cd61a4f6612ff08025
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6139283657622407955##
                   3590501956343482526##
                   Semigroups.$trModule
                   Semigroups.$tc'Identity2
                   1#
                   Semigroups.$tc'Identity1) -}
df1a7cb7115773481c769ff4c457b390
  $tc'Identity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
18c3419bdf653370d5f57a8096258111
  $tc'Identity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Identity3) -}
d56b371f08da93b5431b9606c7dfdf84
  $tc'Identity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Identity"#) -}
4f42db15d6a55a38a786b91d56c16235
  $tc'Snd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14545868684622649292##
                   6153080335357880051##
                   Semigroups.$trModule
                   Semigroups.$tc'Snd2
                   2#
                   Semigroups.$tc'Snd1) -}
af0f558734145f2c3e08c96dd9474d2f
  $tc'Snd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f9fe30df1a0ebae623a5b99dae5a70c2
  $tc'Snd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Snd3) -}
1f0dbc6c69ba6f0a70762884a6c48063
  $tc'Snd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Snd"#) -}
e58d3aba75515af13b114cbd4894794d
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13326302554942351642##
                   468797797874311821##
                   Semigroups.$trModule
                   Semigroups.$tc'Three2
                   3#
                   Semigroups.$tc'Three1) -}
9c514e02563c855cb57a83356859e9d6
  $tc'Three1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94aab7e2ab22359bde358a7c027208ba
  $tc'Three2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Three3) -}
a8cce349bcda564bfcd4db57d9e53063
  $tc'Three3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Three"#) -}
a0c5796c761dfa2a7059d0e735f224a1
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1357457057024994406##
                   15513173264119196267##
                   Semigroups.$trModule
                   Semigroups.$tc'Trivial2
                   0#
                   Semigroups.$tc'Trivial1) -}
873c97a8cd40676c26371d7af316c504
  $tc'Trivial1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
012c280eef32dfa4ecd14e1999f75e85
  $tc'Trivial2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Trivial3) -}
91c257f083b50d50e304a14a2fdc4644
  $tc'Trivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Trivial"#) -}
10ad1aa6a6695e273d733b288d859c45
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4656114903861766479##
                   10984922624866865495##
                   Semigroups.$trModule
                   Semigroups.$tc'Two2
                   2#
                   Semigroups.$tc'Two1) -}
252ebcf9be50c2c9aa83299770ef5405
  $tc'Two1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6658311e1918749085edab89abc3451e
  $tc'Two2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tc'Two3) -}
6c8faa91bbc87367f84f318f0f3d87ed
  $tc'Two3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
ec20477ee4314560c523439dc4c110c6
  $tcBoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1178871333134435290##
                   4230246534239957168##
                   Semigroups.$trModule
                   Semigroups.$tcBoolConj1
                   0#
                   GHC.Types.krep$*) -}
6d1e622fc25fce124f7698f3218365d4
  $tcBoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcBoolConj2) -}
ecb82c35061e0f65dc64951beb8bdad2
  $tcBoolConj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolConj"#) -}
1eb59006bfc2cdbb4931085f54722fa6
  $tcBoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3968791570561996174##
                   18320981427767277446##
                   Semigroups.$trModule
                   Semigroups.$tcBoolDisj1
                   0#
                   GHC.Types.krep$*) -}
7edff52459cd71b57b81e6606bda8086
  $tcBoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcBoolDisj2) -}
0150fd3be3f755e83c4d94aef39cee75
  $tcBoolDisj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolDisj"#) -}
401427fcf2fbbd19a5e72cdc4c2421c6
  $tcCombine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3460666944570852418##
                   1694938341780968521##
                   Semigroups.$trModule
                   Semigroups.$tcCombine1
                   0#
                   GHC.Types.krep$*->*->*) -}
d2af2d374b45acedbe4d9cb4aeffc091
  $tcCombine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcCombine2) -}
dfdd19101839a248d63756e1b9573340
  $tcCombine2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Combine"#) -}
f81803a11b3a2807cb7af4eaedc4d809
  $tcComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10477350491337996396##
                   17450885141672061781##
                   Semigroups.$trModule
                   Semigroups.$tcComp1
                   0#
                   GHC.Types.krep$*Arr*) -}
c283472f2b3704d751f66b7eabdb80e0
  $tcComp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcComp2) -}
88f9092d36ff7605778fc775a26e609a
  $tcComp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Comp"#) -}
87342a23870da61ac8b987962ff3fe01
  $tcFour :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8076788860323469677##
                   16099256608452688410##
                   Semigroups.$trModule
                   Semigroups.$tcFour2
                   0#
                   Semigroups.$tcFour1) -}
6936354a41ef626e0d27f725e53f0ec4
  $tcFour1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b21e2db8ba9886b568727a7af2c8bba8
  $tcFour2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcFour3) -}
2a2aed232d1cbc8658b868136d57cc93
  $tcFour3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Four"#) -}
07d1851127e9dde05c42470b37d8bb4f
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17218735853945395969##
                   15484038231204856199##
                   Semigroups.$trModule
                   Semigroups.$tcIdentity1
                   0#
                   GHC.Types.krep$*Arr*) -}
68e90caaaf00b348860c4548e19fe195
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcIdentity2) -}
ece59edb21033df01f3aefda19664cad
  $tcIdentity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Identity"#) -}
71230d67546ac8fff9702e67bbdb195a
  $tcOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16433066845964069576##
                   6078556732127707386##
                   Semigroups.$trModule
                   Semigroups.$tcOr1
                   0#
                   GHC.Types.krep$*->*->*) -}
fc43a6af1c5b3049eecab8b9b167f1c5
  $tcOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcOr2) -}
d890389fa75578aa7916d810d4a7afd7
  $tcOr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Or"#) -}
249e76ae9a360bca9bf88992600bdfe8
  $tcThree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5500756861364745099##
                   17900064423949722511##
                   Semigroups.$trModule
                   Semigroups.$tcThree2
                   0#
                   Semigroups.$tcThree1) -}
e7f1a9ff2be1ac461000c4de9f0db8ea
  $tcThree1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7480515390a0cabd6ee8a1c22f62deec
  $tcThree2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcThree3) -}
78cb5514e3016810fc86cc4573eae57a
  $tcThree3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Three"#) -}
85b664f8f5b69871b7b76376ff595d02
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9282552567932466827##
                   14131029249302402885##
                   Semigroups.$trModule
                   Semigroups.$tcTrivial1
                   0#
                   GHC.Types.krep$*) -}
fed60dab11d91acef1a76986df77698d
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$fShowTrivial3) -}
50672f28fb519ffc7b8ac062face920a
  $tcTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5826727961003945504##
                   4308755066727090455##
                   Semigroups.$trModule
                   Semigroups.$tcTwo1
                   0#
                   GHC.Types.krep$*->*->*) -}
fa54a9f1e293e32dfdcd5712d56b6ad3
  $tcTwo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$tcTwo2) -}
fb053df9280107d874f59ac3ceda9eea
  $tcTwo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
efa3b368f0d0bb16ca927faa9dfe2c5f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Semigroups.$trModule3
                   Semigroups.$trModule1) -}
59bf57538f3ad3d1f2d9273325a1466a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$trModule2) -}
c97c1ec0d39b2f16b1d8d4c5eda987ca
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Semigroups"#) -}
4fb806b275c46a0bd6f0d26d55f6d65a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Semigroups.$trModule4) -}
542b1d7e359f084784d69954862cac80
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("semigroups-0.1.0.0-3q2oYBy5YQ9CZf31WgaiJs"#) -}
5d50ab37a9e665891b8d1329e373eb83
  $w$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
8464b3e99637e5b104163abfd58e479b
  $w$c== ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> c -> a -> b -> c -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: a)
                   (ww4 :: b)
                   (ww5 :: c) ->
                 case GHC.Classes.== @ a w2 ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w1 ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.== @ c w ww2 ww5 } }) -}
4d8513cecfa24d203fb5eab01847f82a
  $w$c==1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w ww1 ww3 }) -}
8caac3b90741a215e9889bcbdfeba82b
  $w$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b, c, d #)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w4 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 case ww26 of ww27 { System.Random.TF.Gen.TFGen ww28 ww29 ww30 ww31 ww32 ww33 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww28
                        ww29
                        ww30
                        ww31 of ww34 { (#,#) ww35 ww36 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ d w3)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <d>_R)
                      ww35 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w4 #) } } } } } } }) -}
1eb6844ec49db02af3857e0653ef365c
  $w$carbitrary1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Identity a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                    `cast`
                  (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w1)
                   `cast`
                 (Sym (Semigroups.N:Identity[0] <a>_R)) }) -}
851e595e2271717f98fae0ff97d8baf5
  $w$carbitrary2 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Or a b
  {- Arity: 7,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (Test.QuickCheck.Gen.elements
                    @ (Semigroups.Or a b)
                    (GHC.Types.:
                       @ (Semigroups.Or a b)
                       (Semigroups.Fst
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                             w2))
                       (GHC.Types.:
                          @ (Semigroups.Or a b)
                          (Semigroups.Snd
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                w2))
                          (GHC.Types.[] @ (Semigroups.Or a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Or a b>_R)
                   ww16 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   w2 } } }) -}
7605a00f06ea5b722d8889e79f7f4b77
  $w$carbitrary3 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b, c #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w3 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3 #) } } } } }) -}
74f12ba9f0bdec98341ea304ab8bb117
  $w$carbitrary4 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2 #) } } }) -}
1680422b1fc36f6b30d90805ebb5f560
  $w$csconcat ::
    Data.Semigroup.Semigroup b =>
    Semigroups.Combine a b
    -> [Semigroups.Combine a b] -> Semigroups.Combine a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (ww :: Semigroups.Combine a b)
                   (ww1 :: [Semigroups.Combine a b]) ->
                 letrec {
                   go :: Semigroups.Combine a b
                         -> [Semigroups.Combine a b] -> Semigroups.Combine a b
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b1 :: Semigroups.Combine a b)
                       (ds1 :: [Semigroups.Combine a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> let {
                            c2 :: Semigroups.Combine a b = go c cs
                          } in
                          (\ (n :: a) ->
                           Data.Semigroup.<>
                             @ b
                             w
                             (b1 `cast` (Semigroups.N:Combine[0] <a>_N <b>_N) n)
                             (c2 `cast` (Semigroups.N:Combine[0] <a>_N <b>_N) n))
                            `cast`
                          (Sym (Semigroups.N:Combine[0]) <a>_N <b>_N) }
                 } in
                 go ww ww1) -}
5068f1e999bedd4ca4e0ba187b8d58a7
  $w$csconcat1 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    a -> b -> c -> d -> [Semigroups.Four a b c d] -> (# a, b, c, d #)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: [Semigroups.Four a b c d]) ->
                 letrec {
                   $wgo :: a
                           -> b -> c -> d -> [Semigroups.Four a b c d] -> (# a, b, c, d #)
                     {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww5 :: a)
                       (ww6 :: b)
                       (ww7 :: c)
                       (ww8 :: d)
                       (w4 :: [Semigroups.Four a b c d]) ->
                     case w4 of wild1 {
                       [] -> (# ww5, ww6, ww7, ww8 #)
                       : c1 cs
                       -> case c1 of ww9 { Semigroups.Four ww10 ww11 ww12 ww13 ->
                          case $wgo
                                 ww10
                                 ww11
                                 ww12
                                 ww13
                                 cs of ww14 { (#,,,#) ww15 ww16 ww17 ww18 ->
                          (# Data.Semigroup.<> @ a w ww5 ww15,
                             Data.Semigroup.<> @ b w1 ww6 ww16,
                             Data.Semigroup.<> @ c w2 ww7 ww17,
                             Data.Semigroup.<> @ d w3 ww8 ww18 #) } } }
                 } in
                 $wgo ww ww1 ww2 ww3 ww4) -}
722dd06aa40b86490cd9453af01ec7d4
  $w$csconcat2 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    a -> b -> c -> [Semigroups.Three a b c] -> (# a, b, c #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: [Semigroups.Three a b c]) ->
                 letrec {
                   $wgo :: a -> b -> c -> [Semigroups.Three a b c] -> (# a, b, c #)
                     {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww4 :: a)
                       (ww5 :: b)
                       (ww6 :: c)
                       (w3 :: [Semigroups.Three a b c]) ->
                     case w3 of wild1 {
                       [] -> (# ww4, ww5, ww6 #)
                       : c1 cs
                       -> case c1 of ww7 { Semigroups.Three ww8 ww9 ww10 ->
                          case $wgo ww8 ww9 ww10 cs of ww11 { (#,,#) ww12 ww13 ww14 ->
                          (# Data.Semigroup.<> @ a w ww4 ww12,
                             Data.Semigroup.<> @ b w1 ww5 ww13,
                             Data.Semigroup.<> @ c w2 ww6 ww14 #) } } }
                 } in
                 $wgo ww ww1 ww2 ww3) -}
cffec5801c55894f6d3cbe6feee6a5ab
  $w$csconcat3 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    a -> b -> [Semigroups.Two a b] -> (# a, b #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: [Semigroups.Two a b]) ->
                 letrec {
                   $wgo :: a -> b -> [Semigroups.Two a b] -> (# a, b #)
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww3 :: a) (ww4 :: b) (w2 :: [Semigroups.Two a b]) ->
                     case w2 of wild1 {
                       [] -> (# ww3, ww4 #)
                       : c cs
                       -> case c of ww5 { Semigroups.Two ww6 ww7 ->
                          case $wgo ww6 ww7 cs of ww8 { (#,#) ww9 ww10 ->
                          (# Data.Semigroup.<> @ a w ww3 ww9,
                             Data.Semigroup.<> @ b w1 ww4 ww10 #) } } }
                 } in
                 $wgo ww ww1 ww2) -}
2cb82ba35413dd6b2c3ef87b1806847e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Semigroups.BoolConj -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Semigroups.BoolConj)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.CString.unpackAppendCString#
                        Semigroups.$fShowBoolConj2
                        (case w `cast` (Semigroups.N:BoolConj[0]) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool3 w1
                           GHC.Types.True
                           -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool1 w1 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Semigroups.$fShowBoolConj2
                           (case w `cast` (Semigroups.N:BoolConj[0]) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowBool3
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                              GHC.Types.True
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowBool1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1) })) }) -}
d221c48d68a3bdfce5c3b501ebb0ddfb
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Semigroups.BoolDisj -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Semigroups.BoolDisj)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.CString.unpackAppendCString#
                        Semigroups.$fShowBoolDisj2
                        (case w `cast` (Semigroups.N:BoolDisj[0]) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool3 w1
                           GHC.Types.True
                           -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool1 w1 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Semigroups.$fShowBoolDisj2
                           (case w `cast` (Semigroups.N:BoolDisj[0]) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowBool3
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                              GHC.Types.True
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowBool1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1) })) }) -}
800e299ec93be98b96c8ddff0ca6f9bb
  $w$cshowsPrec2 ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> d -> GHC.Show.ShowS
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c)
                   (ww4 :: d) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w3 Semigroups.$fShowFour3 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w2 Semigroups.$fShowFour3 ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ c w1 Semigroups.$fShowFour3 ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ d w Semigroups.$fShowFour3 ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Semigroups.$fShowFour4
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
1eb6844ec49db02af3857e0653ef365c
  $w$cshowsPrec3 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Semigroups.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Semigroups.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Semigroups.$fShowFour3
                       w1 `cast` (Semigroups.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Semigroups.$fShowIdentity2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Semigroups.$fShowIdentity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
851e595e2271717f98fae0ff97d8baf5
  $w$cshowsPrec4 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Semigroups.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Semigroups.Or a b) ->
                 case w2 of wild {
                   Semigroups.Fst b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Semigroups.$fShowFour3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Semigroups.$fShowOr5 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Semigroups.$fShowOr5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Semigroups.Snd b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Semigroups.$fShowFour3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Semigroups.$fShowOr3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Semigroups.$fShowOr3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
158286a7647f214e18739fb9844058c8
  $w$cshowsPrec5 ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> GHC.Show.ShowS
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w2 Semigroups.$fShowFour3 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w1 Semigroups.$fShowFour3 ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ c w Semigroups.$fShowFour3 ww3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Semigroups.$fShowThree2
                        (f (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (f1 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Semigroups.$fShowThree2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (f1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
28e54e4c101747f1666ef09988ed3859
  $w$cshowsPrec6 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w1 Semigroups.$fShowFour3 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w Semigroups.$fShowFour3 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Semigroups.$fShowTwo2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Semigroups.$fShowTwo2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
bc0212caa9ea523c178c4294adace849
  $w$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> d -> (# a, b, c, d #)
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
727f7c536118c4cb830e3f6de39051d2
  $w$cstimes1 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> (# a, b, c #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
6407d83ca2bfa0d71a9b989fbd796523
  $w$cstimes2 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1. GHC.Real.Integral b1 => b1 -> a -> b -> (# a, b #)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S(LS(S(C(C(S))L)LLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,1*C1(C1(U)),A,A,A,A),A),1*U(A,C(U),A,A,A,A,A,A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U>,
     Inline: [0] -}
9eb2e6cce30b6abdfdad319969cf3319
  $w$dTestable ::
    (Semigroups.Or GHC.Types.Int GHC.Types.Char
     -> Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Or GHC.Types.Int GHC.Types.Char
                         -> Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                   @ (Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
                   Semigroups.$fShowOr_$s$fShowOr
                   Semigroups.$s$fTestable(->)6
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Or
                                                              GHC.Types.Int GHC.Types.Char
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                      -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                       -> Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                      -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                   -> Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryOr_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Or GHC.Types.Int GHC.Types.Char>_R))
                   Semigroups.$s$fTestable(->)5
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
4f4116fc3142d31809d6650497fdf379
  $w$dTestable1 ::
    (Semigroups.Or GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Or GHC.Types.Int GHC.Types.Char
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                   @ GHC.Types.Bool
                   Semigroups.$fShowOr_$s$fShowOr
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Or GHC.Types.Int GHC.Types.Char)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Or GHC.Types.Int GHC.Types.Char
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryOr_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Or GHC.Types.Int GHC.Types.Char>_R))
                   Semigroups.$s$fTestable(->)5
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
718bd76514da02aaf49ecf20a75c3da2
  $w$dTestable10 ::
    (Semigroups.Three
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Three
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Three
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))
                   @ GHC.Types.Bool
                   Semigroups.$fShowThree_$s$fShowThree
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Three
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Three
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Three
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Three
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryThree_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Three
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Sum GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)36
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
34b1504b1e40f409360bf4b37f6c4c00
  $w$dTestable11 ::
    (Semigroups.Three
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> Semigroups.Three
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Three
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> Semigroups.Three
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Three
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))
                   @ (Semigroups.Three
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int)
                      -> GHC.Types.Bool)
                   Semigroups.$fShowThree_$s$fShowThree
                   Semigroups.$s$fTestable(->)35
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Three
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Three
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Three
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Three
                                                              (Data.Monoid.Sum GHC.Types.Int)
                                                              (Data.Monoid.Product GHC.Types.Int)
                                                              (Data.Monoid.Sum GHC.Types.Int)
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Three
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                      -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Three
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                       -> Semigroups.Three
                                                            (Data.Monoid.Sum GHC.Types.Int)
                                                            (Data.Monoid.Product GHC.Types.Int)
                                                            (Data.Monoid.Sum GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Three
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                      -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Three
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                   -> Semigroups.Three
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryThree_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Three
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Sum GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)36
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
dd4f7d0bce5b98b5ebfa38dc6a660cca
  $w$dTestable12 ::
    (Semigroups.Two
       (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Two
                           (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Two
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int))
                   @ GHC.Types.Bool
                   Semigroups.$fShowTwo_$s$fShowTwo
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Two
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Two
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Two
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Two
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Two
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)41
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
9916028d84c4908cebeec6fdeaf68907
  $w$dTestable13 ::
    (Semigroups.Two
       (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
     -> Semigroups.Two
          (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Two
                           (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                         -> Semigroups.Two
                              (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Two
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int))
                   @ (Semigroups.Two
                        (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
                      -> GHC.Types.Bool)
                   Semigroups.$fShowTwo_$s$fShowTwo
                   Semigroups.$s$fTestable(->)40
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Two
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Two
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Two
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Two
                                                              (Data.Monoid.Sum GHC.Types.Int)
                                                              (Data.Monoid.Product GHC.Types.Int)
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Two
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                      -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Two
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                       -> Semigroups.Two
                                                            (Data.Monoid.Sum GHC.Types.Int)
                                                            (Data.Monoid.Product GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Two
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                      -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Two
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                   -> Semigroups.Two
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Two
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)41
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
0d5949af8de437505778b061db3e7e61
  $w$dTestable14 ::
    (Semigroups.Comp GHC.Types.Int
     -> Semigroups.Comp GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Comp GHC.Types.Int
                         -> Semigroups.Comp GHC.Types.Int
                         -> GHC.Types.Int
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Comp GHC.Types.Int)
                   @ (Semigroups.Comp GHC.Types.Int
                      -> GHC.Types.Int -> GHC.Types.Bool)
                   (Semigroups.$fShowComp @ GHC.Types.Int)
                   Semigroups.$s$fTestable(->)48
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Comp GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Comp GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Comp GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Comp GHC.Types.Int
                                                       -> Semigroups.Comp GHC.Types.Int
                                                       -> GHC.Types.Int
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Comp GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Comp GHC.Types.Int
                                                   -> Semigroups.Comp GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$s$fTestable(->)47
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Comp GHC.Types.Int>_R))
                   Semigroups.$s$fTestable(->)46
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
f8f9701f93f341e0739d6e5d8696fdf6
  $w$dTestable15 ::
    (Semigroups.Comp GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Comp GHC.Types.Int
                         -> GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Comp GHC.Types.Int)
                   @ (GHC.Types.Int -> GHC.Types.Bool)
                   (Semigroups.$fShowComp @ GHC.Types.Int)
                   Semigroups.$s$fTestable(->)50
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Comp GHC.Types.Int
                                                       -> GHC.Types.Int -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show (Semigroups.Comp GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Comp GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$s$fTestable(->)49
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Comp GHC.Types.Int>_R))
                   Semigroups.$s$fTestable(->)46
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
bc795ebcca145d53883c4cc850e83437
  $w$dTestable16 ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Int -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
e4ecdc071bcfdb1c5dcdfea201f54fe8
  $w$dTestable17 ::
    (Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
     -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Int
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Combine
                           GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                         -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Int
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Combine
                        GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))
                   @ (Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                      -> GHC.Types.Int -> GHC.Types.Bool)
                   (Semigroups.$fShowCombine
                      @ GHC.Types.Int
                      @ (Data.Monoid.Sum GHC.Types.Int))
                   Semigroups.$s$fTestable(->)56
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Combine
                                                   GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Combine
                                                     GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Combine
                                                   GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Combine
                                                              GHC.Types.Int
                                                              (Data.Monoid.Sum GHC.Types.Int)
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Combine
                                                   GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Combine
                                                         GHC.Types.Int
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                       -> Semigroups.Combine
                                                            GHC.Types.Int
                                                            (Data.Monoid.Sum GHC.Types.Int)
                                                       -> GHC.Types.Int
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Combine
                                                   GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Combine
                                                     GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                                                   -> Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$s$fTestable(->)55
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Combine
                                GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)54
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
615f44bb0b5df10dc1a7b0bfd148b417
  $w$dTestable18 ::
    (Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Combine
                           GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Combine
                        GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))
                   @ (GHC.Types.Int -> GHC.Types.Bool)
                   (Semigroups.$fShowCombine
                      @ GHC.Types.Int
                      @ (Data.Monoid.Sum GHC.Types.Int))
                   Semigroups.$s$fTestable(->)50
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Combine
                                                   GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Combine
                                                         GHC.Types.Int
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                       -> GHC.Types.Int -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Combine
                                                   GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Combine
                                                        GHC.Types.Int
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Combine
                                                     GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$s$fTestable(->)57
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Combine
                                GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)54
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
8c8b88ed45d9d11433895b0ea9eec41c
  $w$dTestable19 ::
    (Semigroups.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Semigroups.Trivial
                   @ GHC.Types.Bool
                   Semigroups.$fShowTrivial
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.Trivial>_R
                                             ->_R <GHC.Show.Show Semigroups.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Trivial -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.Trivial>_R
                                             ->_R <GHC.Show.Show Semigroups.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Trivial>_R))
                   Semigroups.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
ee3d5456a39cdf3e0a7d1bdfd1fa7820
  $w$dTestable2 ::
    (Semigroups.Identity GHC.Types.Int
     -> Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Identity GHC.Types.Int
                         -> Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Identity GHC.Types.Int)
                   @ (Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
                   Semigroups.$fShowIdentity_$s$fShowIdentity
                   Semigroups.$s$fTestable(->)13
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Identity GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Identity GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Identity GHC.Types.Int
                                                      -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Identity GHC.Types.Int
                                                       -> Semigroups.Identity GHC.Types.Int
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Identity GHC.Types.Int
                                                      -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Identity GHC.Types.Int
                                                   -> Semigroups.Identity GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$s$fTestable(->)12
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Identity GHC.Types.Int>_R))
                   Semigroups.$s$fTestable(->)11
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
f743e0a26c765f8aa60c294b32cad9bf
  $w$dTestable20 ::
    (Semigroups.Trivial -> Semigroups.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Trivial
                         -> Semigroups.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Semigroups.Trivial
                   @ (Semigroups.Trivial -> GHC.Types.Bool)
                   Semigroups.$fShowTrivial
                   Semigroups.$s$fTestable(->)63
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.Trivial>_R
                                             ->_R <GHC.Show.Show Semigroups.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.Trivial>_R
                                             ->_R <GHC.Show.Show Semigroups.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Trivial
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.Trivial>_R
                                             ->_R <GHC.Show.Show Semigroups.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Trivial -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Trivial
                                                       -> Semigroups.Trivial -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.Trivial>_R
                                             ->_R <GHC.Show.Show Semigroups.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Trivial -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Trivial
                                                   -> Semigroups.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Trivial>_R))
                   Semigroups.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
52e17d46bcf07cbf6c2bf975557d5aee
  $w$dTestable3 ::
    (Semigroups.Identity GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Identity GHC.Types.Int
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Identity GHC.Types.Int)
                   @ GHC.Types.Bool
                   Semigroups.$fShowIdentity_$s$fShowIdentity
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Identity GHC.Types.Int
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Identity GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Identity GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$s$fTestable(->)14
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Identity GHC.Types.Int>_R))
                   Semigroups.$s$fTestable(->)11
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
c59059e9d747911a42c5d24f006f9468
  $w$dTestable4 ::
    (Semigroups.BoolDisj -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.BoolDisj -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Semigroups.BoolDisj
                   @ GHC.Types.Bool
                   Semigroups.$fShowBoolDisj
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolDisj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolDisj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.BoolDisj -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolDisj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolDisj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.BoolDisj -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryBoolDisj_$carbitrary
                   Semigroups.$fArbitraryBoolDisj_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
c41136b8f087f60f563bd15cd29925de
  $w$dTestable5 ::
    (Semigroups.BoolDisj -> Semigroups.BoolDisj -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.BoolDisj
                         -> Semigroups.BoolDisj -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Semigroups.BoolDisj
                   @ (Semigroups.BoolDisj -> GHC.Types.Bool)
                   Semigroups.$fShowBoolDisj
                   Semigroups.$s$fTestable(->)18
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolDisj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolDisj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.BoolDisj -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolDisj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolDisj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.BoolDisj
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolDisj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolDisj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.BoolDisj -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.BoolDisj
                                                       -> Semigroups.BoolDisj -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolDisj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolDisj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.BoolDisj -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.BoolDisj
                                                   -> Semigroups.BoolDisj -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryBoolDisj_$carbitrary
                   Semigroups.$fArbitraryBoolDisj_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
e068d4046ada83832f2d184b0015130f
  $w$dTestable6 ::
    (Semigroups.BoolConj -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.BoolConj -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Semigroups.BoolConj
                   @ GHC.Types.Bool
                   Semigroups.$fShowBoolConj
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolConj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolConj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.BoolConj -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolConj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolConj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.BoolConj -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryBoolConj_$carbitrary
                   Semigroups.$fArbitraryBoolConj_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
f7a31c4c0a8fdba09a9b1003796ba0fa
  $w$dTestable7 ::
    (Semigroups.BoolConj -> Semigroups.BoolConj -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.BoolConj
                         -> Semigroups.BoolConj -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Semigroups.BoolConj
                   @ (Semigroups.BoolConj -> GHC.Types.Bool)
                   Semigroups.$fShowBoolConj
                   Semigroups.$s$fTestable(->)23
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolConj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolConj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.BoolConj -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolConj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolConj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.BoolConj
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolConj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolConj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.BoolConj -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.BoolConj
                                                       -> Semigroups.BoolConj -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                Semigroups.BoolConj>_R
                                             ->_R <GHC.Show.Show Semigroups.BoolConj>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.BoolConj -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.BoolConj
                                                   -> Semigroups.BoolConj -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryBoolConj_$carbitrary
                   Semigroups.$fArbitraryBoolConj_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
ada4d100dd7a731468db239a21e01af9
  $w$dTestable8 ::
    (Semigroups.Four
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Four
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Four
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))
                   @ GHC.Types.Bool
                   Semigroups.$fShowFour_$s$fShowFour
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Four
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Four
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Four
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Four
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryFour_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Four
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Sum GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)31
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
9e385b59d35ba52ef4fb86ae137d2ca3
  $w$dTestable9 ::
    (Semigroups.Four
       (Data.Monoid.Sum GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Product GHC.Types.Int)
       (Data.Monoid.Sum GHC.Types.Int)
     -> Semigroups.Four
          (Data.Monoid.Sum GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Product GHC.Types.Int)
          (Data.Monoid.Sum GHC.Types.Int)
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Semigroups.Four
                           (Data.Monoid.Sum GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Product GHC.Types.Int)
                           (Data.Monoid.Sum GHC.Types.Int)
                         -> Semigroups.Four
                              (Data.Monoid.Sum GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Product GHC.Types.Int)
                              (Data.Monoid.Sum GHC.Types.Int)
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Semigroups.Four
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int))
                   @ (Semigroups.Four
                        (Data.Monoid.Sum GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Product GHC.Types.Int)
                        (Data.Monoid.Sum GHC.Types.Int)
                      -> GHC.Types.Bool)
                   Semigroups.$fShowFour_$s$fShowFour
                   Semigroups.$s$fTestable(->)30
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Four
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Semigroups.Four
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Four
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <Semigroups.Four
                                                              (Data.Monoid.Sum GHC.Types.Int)
                                                              (Data.Monoid.Product GHC.Types.Int)
                                                              (Data.Monoid.Product GHC.Types.Int)
                                                              (Data.Monoid.Sum GHC.Types.Int)
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Four
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                      -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Semigroups.Four
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                         (Data.Monoid.Product GHC.Types.Int)
                                                         (Data.Monoid.Sum GHC.Types.Int)
                                                       -> Semigroups.Four
                                                            (Data.Monoid.Sum GHC.Types.Int)
                                                            (Data.Monoid.Product GHC.Types.Int)
                                                            (Data.Monoid.Product GHC.Types.Int)
                                                            (Data.Monoid.Sum GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Semigroups.Four
                                                   (Data.Monoid.Sum GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Product GHC.Types.Int)
                                                   (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <GHC.Show.Show
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int))>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                      -> GHC.Types.Bool)>_R
                                             ->_R <Semigroups.Four
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Product GHC.Types.Int)
                                                     (Data.Monoid.Sum GHC.Types.Int)
                                                   -> Semigroups.Four
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Product GHC.Types.Int)
                                                        (Data.Monoid.Sum GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Semigroups.$fArbitraryFour_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Semigroups.Four
                                (Data.Monoid.Sum GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Product GHC.Types.Int)
                                (Data.Monoid.Sum GHC.Types.Int)>_R))
                   Semigroups.$s$fTestable(->)31
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
657c2b525af35a04240819df21a8d021
  $w$s$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Data.Monoid.Sum GHC.Types.Int,
          Data.Monoid.Product GHC.Types.Int,
          Data.Monoid.Product GHC.Types.Int, Data.Monoid.Sum GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 case ww26 of ww27 { System.Random.TF.Gen.TFGen ww28 ww29 ww30 ww31 ww32 ww33 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww28
                        ww29
                        ww30
                        ww31 of ww34 { (#,#) ww35 ww36 ->
                 (# (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)),
                    (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Product[0] <GHC.Types.Int>_R)),
                    (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Product[0] <GHC.Types.Int>_R)),
                    (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww35 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)) #) } } } } } } }) -}
9bd6ae199383e1c7a31790db8c53fa64
  $w$s$carbitrary1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Or GHC.Types.Int GHC.Types.Char
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (Test.QuickCheck.Gen.elements
                    @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                    (GHC.Types.:
                       @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                       (Semigroups.Fst
                          @ GHC.Types.Int
                          @ GHC.Types.Char
                          (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                             ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                             w))
                       (GHC.Types.:
                          @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)
                          (Semigroups.Snd
                             @ GHC.Types.Int
                             @ GHC.Types.Char
                             (Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R)
                                ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                w))
                          (GHC.Types.[] @ (Semigroups.Or GHC.Types.Int GHC.Types.Char)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <Semigroups.Or GHC.Types.Int GHC.Types.Char>_R)
                   ww16 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   w } } }) -}
abe062b68d09aab5b80602c51074c916
  $w$s$carbitrary2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Data.Monoid.Sum GHC.Types.Int,
          Data.Monoid.Product GHC.Types.Int, Data.Monoid.Sum GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)),
                    (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Product[0] <GHC.Types.Int>_R)),
                    (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)) #) } } } } }) -}
8ceaf1652e3df62d501094d208436244
  $w$s$carbitrary3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Data.Monoid.Sum GHC.Types.Int,
          Data.Monoid.Product GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)),
                    (Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                       ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w)
                      `cast`
                    (Sym (Data.Monoid.N:Product[0] <GHC.Types.Int>_R)) #) } } }) -}
721124d7ab5b6b767453431dbbc3e012
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Monoid.Sum GHC.Types.Int
    -> Data.Monoid.Product GHC.Types.Int
    -> Data.Monoid.Product GHC.Types.Int
    -> Data.Monoid.Sum GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Monoid.Sum GHC.Types.Int)
                   (ww2 :: Data.Monoid.Product GHC.Types.Int)
                   (ww3 :: Data.Monoid.Product GHC.Types.Int)
                   (ww4 :: Data.Monoid.Sum GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec7
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec6
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec6
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec7
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Semigroups.$fShowFour4
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
1eb6844ec49db02af3857e0653ef365c
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Semigroups.Identity GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Semigroups.Identity GHC.Types.Int)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Semigroups.$fShowIdentity2
                        (case w `cast`
                              (Semigroups.N:Identity[0]
                                   <GHC.Types.Int>_R) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Semigroups.$fShowIdentity2
                           (case w `cast`
                                 (Semigroups.N:Identity[0]
                                      <GHC.Types.Int>_R) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
851e595e2271717f98fae0ff97d8baf5
  $w$s$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Semigroups.Or GHC.Types.Int GHC.Types.Char
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Semigroups.Or GHC.Types.Int GHC.Types.Char)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Semigroups.Fst b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Semigroups.$fShowOr5
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Semigroups.$fShowOr5
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Semigroups.Snd b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Semigroups.$fShowOr3
                             (case b1 of ww1 { GHC.Types.C# ww2 ->
                              case ww2 of ds {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShowChar3
                                     (GHC.Show.$wshowLitChar
                                        ds
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShowChar3 w1))
                                '\''# -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowChar1 w1 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Semigroups.$fShowOr3
                                (case b1 of ww1 { GHC.Types.C# ww2 ->
                                 case ww2 of ds {
                                   DEFAULT
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowChar3
                                        (GHC.Show.$wshowLitChar
                                           ds
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShowChar3
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)2
                                                 w1)))
                                   '\''#
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowChar1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) } })) } }) -}
94fbc1b5fc914913ceca0739d92be184
  $w$s$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Data.Monoid.Sum GHC.Types.Int
    -> Data.Monoid.Product GHC.Types.Int
    -> Data.Monoid.Sum GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Monoid.Sum GHC.Types.Int)
                   (ww2 :: Data.Monoid.Product GHC.Types.Int)
                   (ww3 :: Data.Monoid.Sum GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec7
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec6
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec7
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Semigroups.$fShowThree2
                        (f (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (f1 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Semigroups.$fShowThree2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (f1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
d52b784814a79ae98d59aced5075efff
  $w$s$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Data.Monoid.Sum GHC.Types.Int
    -> Data.Monoid.Product GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Monoid.Sum GHC.Types.Int)
                   (ww2 :: Data.Monoid.Product GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec7
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Monoid.$w$cshowsPrec6
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       11#
                       ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Semigroups.$fShowTwo2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Semigroups.$fShowTwo2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
1680422b1fc36f6b30d90805ebb5f560
  $wgenCombine ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Combine a b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Test.QuickCheck.Arbitrary.$fArbitrary(->)1
                    @ a
                    @ b
                    w
                    w1
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w2)
                   `cast`
                 (Sym (Semigroups.N:Combine[0]) <a>_N <b>_N) }) -}
4860b4ccd05862bc07207bcfb8fa433d
  $wgenComp ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Comp a
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Test.QuickCheck.Arbitrary.$fArbitrary(->)1
                    @ a
                    @ a
                    w
                    w1
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w2)
                   `cast`
                 (Sym (Semigroups.N:Comp[0] <a>_R)) }) -}
60aaad1a72c113b874611448f04428b8
  $wlvl ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                   ww6
                   ww10
                   ww11
                   ww12
                   ww4 } }) -}
65b29bfe1bcfeae1ae23e3039b707012
  $wlvl1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                   ww6
                   ww10
                   ww11
                   ww12
                   ww4 } }) -}
8e1ca4fbabc12ab2a685c0b70eed22b1
  $wlvl2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Comp GHC.Types.Int
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (\ (r1 :: GHC.Types.Int) ->
                  Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                    @ GHC.Types.Int
                    r1
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      `cast`
                    (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                    ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w)
                   `cast`
                 (Sym (Semigroups.N:Comp[0] <GHC.Types.Int>_R)) } } }) -}
bf35ab9fa3035db9ae10dab1dfc7760c
  $wlvl3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Comp GHC.Types.Int
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (\ (r1 :: GHC.Types.Int) ->
                  Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                    @ GHC.Types.Int
                    r1
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      `cast`
                    (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                    ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w)
                   `cast`
                 (Sym (Semigroups.N:Comp[0] <GHC.Types.Int>_R)) } } }) -}
fe116eca95866e0662e133305d36d7d7
  $wlvl4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (\ (r1 :: GHC.Types.Int) ->
                  Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                    @ (Data.Monoid.Sum GHC.Types.Int)
                    r1
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      `cast`
                    (Sym (Test.QuickCheck.Gen.N:Gen[0]
                              (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                    ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w)
                   `cast`
                 (Sym (Semigroups.N:Combine[0]) <GHC.Types.Int>_N <Data.Monoid.Sum
                                                                     GHC.Types.Int>_N) } } }) -}
4daa47264d2bc8d629b054bd25edfe39
  $wlvl5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (\ (r1 :: GHC.Types.Int) ->
                  Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                    @ (Data.Monoid.Sum GHC.Types.Int)
                    r1
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      `cast`
                    (Sym (Test.QuickCheck.Gen.N:Gen[0]
                              (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                    ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w)
                   `cast`
                 (Sym (Semigroups.N:Combine[0]) <GHC.Types.Int>_N <Data.Monoid.Sum
                                                                     GHC.Types.Int>_N) } } }) -}
2cb82ba35413dd6b2c3ef87b1806847e
  newtype BoolConj = BoolConj GHC.Types.Bool
690de961b6e57e3d72c3645c8a845e9f
  type BoolConjAssoc =
    Semigroups.BoolConj
    -> Semigroups.BoolConj -> Semigroups.BoolConj -> GHC.Types.Bool
d221c48d68a3bdfce5c3b501ebb0ddfb
  newtype BoolDisj = BoolDisj GHC.Types.Bool
1f1b3a72e10e4c38a7ccbdf0c8b82e1d
  type BoolDisjAssoc =
    Semigroups.BoolDisj
    -> Semigroups.BoolDisj -> Semigroups.BoolDisj -> GHC.Types.Bool
fbbf06857cb311a8a7fef910221ec0a4
  type CombAssoc =
    Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Combine GHC.Types.Int (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Bool
1680422b1fc36f6b30d90805ebb5f560
  newtype Combine a b = Combine {unCombine :: a -> b}
4860b4ccd05862bc07207bcfb8fa433d
  newtype Comp a = Comp {unComp :: a -> a}
d7375f146b8009aca86f647b5c2587a3
  type CompAssoc =
    Semigroups.Comp GHC.Types.Int
    -> Semigroups.Comp GHC.Types.Int
    -> Semigroups.Comp GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
5068f1e999bedd4ca4e0ba187b8d58a7
  data Four a b c d = Four a b c d
d0e74bea6e85c3a2a5928bb1a0ef9d5a
  type FourAssoc =
    Semigroups.Four
      (Data.Monoid.Sum GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Four
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Four
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Types.Bool
c610bb97c83133ada36ac19b73068a5d
  type IdAssoc =
    Semigroups.Identity GHC.Types.Int
    -> Semigroups.Identity GHC.Types.Int
    -> Semigroups.Identity GHC.Types.Int
    -> GHC.Types.Bool
1eb6844ec49db02af3857e0653ef365c
  newtype Identity a = Identity a
851e595e2271717f98fae0ff97d8baf5
  data Or a b = Fst a | Snd b
190565cd5f9a9e95b262c7bbeee8145c
  type OrAssoc =
    Semigroups.Or GHC.Types.Int GHC.Types.Char
    -> Semigroups.Or GHC.Types.Int GHC.Types.Char
    -> Semigroups.Or GHC.Types.Int GHC.Types.Char
    -> GHC.Types.Bool
722dd06aa40b86490cd9453af01ec7d4
  data Three a b c = Three a b c
182d2c743dac68c6acbe9d8b2b75a8bf
  type ThreeAssoc =
    Semigroups.Three
      (Data.Monoid.Sum GHC.Types.Int)
      (Data.Monoid.Product GHC.Types.Int)
      (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Three
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Three
         (Data.Monoid.Sum GHC.Types.Int)
         (Data.Monoid.Product GHC.Types.Int)
         (Data.Monoid.Sum GHC.Types.Int)
    -> GHC.Types.Bool
7f0cb196624ad352a24424cd909b8af4
  type TrivAssoc =
    Semigroups.Trivial
    -> Semigroups.Trivial -> Semigroups.Trivial -> GHC.Types.Bool
f3ff4d280629b1d149877cdd80c9301e
  data Trivial = Trivial
cffec5801c55894f6d3cbe6feee6a5ab
  data Two a b = Two a b
20bcc2c87bcc215b63b28cc953095309
  type TwoAssoc =
    Semigroups.Two
      (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
    -> Semigroups.Two
         (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
    -> Semigroups.Two
         (Data.Monoid.Sum GHC.Types.Int) (Data.Monoid.Product GHC.Types.Int)
    -> GHC.Types.Bool
210a0509c02092b9bd57f14c3be61d08
  genCombine ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Semigroups.Combine a b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Semigroups.$fArbitraryCombine1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.CoArbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Semigroups.Combine a b>_R)) -}
016d4b1a6599e920bd6dfc03ac66ef71
  genComp ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Test.QuickCheck.Gen.Gen (Semigroups.Comp a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Semigroups.$fArbitraryComp1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.CoArbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Semigroups.Comp a>_R)) -}
466fb6e8f978cf83bc795199de1bfc03
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Semigroups.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b3c9bb0bac12fe99a9ebc2b99b5ad866
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
4ad27832e74bdb7af5bfad60fb403288
  semigroupAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
6d20afaf37ddcecd6b66436330e12fa5
  semigroupCombineAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    Semigroups.Combine a m
    -> Semigroups.Combine a m
    -> Semigroups.Combine a m
    -> a
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,C(U)><L,C(U)><L,C(U)><L,U>,
     Unfolding: (\ @ m
                   @ a
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (m1 :: Semigroups.Combine a m)
                   (m2 :: Semigroups.Combine a m)
                   (m3 :: Semigroups.Combine a m)
                   (a1 :: a) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (m1 `cast` (Semigroups.N:Combine[0] <a>_N <m>_N) a1)
                      (Data.Semigroup.<>
                         @ m
                         $dSemigroup
                         (m2 `cast` (Semigroups.N:Combine[0] <a>_N <m>_N) a1)
                         (m3 `cast` (Semigroups.N:Combine[0] <a>_N <m>_N) a1)))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<>
                         @ m
                         $dSemigroup
                         (m1 `cast` (Semigroups.N:Combine[0] <a>_N <m>_N) a1)
                         (m2 `cast` (Semigroups.N:Combine[0] <a>_N <m>_N) a1))
                      (m3 `cast` (Semigroups.N:Combine[0] <a>_N <m>_N) a1))) -}
d9f7d7023d76cfd46efe32ab23af199f
  semigroupCombineAssoc_$ssemigroupCombineAssoc ::
    Semigroups.Combine a (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Combine a (Data.Monoid.Sum GHC.Types.Int)
    -> Semigroups.Combine a (Data.Monoid.Sum GHC.Types.Int)
    -> a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S(S)),1*C1(U(U))><C(S(S)),1*C1(U(U))><C(S(S)),1*C1(U(U))><L,U>,
     Unfolding: (\ @ a
                   (m1 :: Semigroups.Combine a (Data.Monoid.Sum GHC.Types.Int))
                   (m2 :: Semigroups.Combine a (Data.Monoid.Sum GHC.Types.Int))
                   (m3 :: Semigroups.Combine a (Data.Monoid.Sum GHC.Types.Int))
                   (a1 :: a) ->
                 case (m1
                         `cast`
                       (Semigroups.N:Combine[0] <a>_N <Data.Monoid.Sum GHC.Types.Int>_N)
                         a1)
                        `cast`
                      (Data.Monoid.N:Sum[0]
                           <GHC.Types.Int>_R) of wild { GHC.Types.I# x ->
                 case (m2
                         `cast`
                       (Semigroups.N:Combine[0] <a>_N <Data.Monoid.Sum GHC.Types.Int>_N)
                         a1)
                        `cast`
                      (Data.Monoid.N:Sum[0]
                           <GHC.Types.Int>_R) of wild1 { GHC.Types.I# x1 ->
                 case (m3
                         `cast`
                       (Semigroups.N:Combine[0] <a>_N <Data.Monoid.Sum GHC.Types.Int>_N)
                         a1)
                        `cast`
                      (Data.Monoid.N:Sum[0]
                           <GHC.Types.Int>_R) of wild2 { GHC.Types.I# y ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.+# x (GHC.Prim.+# x1 y))
                      (GHC.Prim.+# (GHC.Prim.+# x x1) y)) } } }) -}
f83baf2280ac8187f14271d4a509a47b
  semigroupCompAssoc ::
    GHC.Classes.Eq m =>
    Semigroups.Comp m
    -> Semigroups.Comp m -> Semigroups.Comp m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,C(U)><L,C(U)><L,C(U)><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   (m1 :: Semigroups.Comp m)
                   (m2 :: Semigroups.Comp m)
                   (m3 :: Semigroups.Comp m)
                   (a :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (m1 `cast` (Semigroups.N:Comp[0] <m>_R)
                      (m2 `cast` (Semigroups.N:Comp[0] <m>_R)
                         (m3 `cast` (Semigroups.N:Comp[0] <m>_R) a)))
                   (m1 `cast` (Semigroups.N:Comp[0] <m>_R)
                      (m2 `cast` (Semigroups.N:Comp[0] <m>_R)
                         (m3 `cast` (Semigroups.N:Comp[0] <m>_R) a)))) -}
77035206679a21f4c25fb9e78d0bf7c2
  semigroupCompAssoc_$ssemigroupCompAssoc ::
    Semigroups.Comp GHC.Types.Int
    -> Semigroups.Comp GHC.Types.Int
    -> Semigroups.Comp GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S),1*C1(H)><L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ (m1 :: Semigroups.Comp GHC.Types.Int)
                   (m2 :: Semigroups.Comp GHC.Types.Int)
                   (m3 :: Semigroups.Comp GHC.Types.Int)
                   (a :: GHC.Types.Int) ->
                 case m1 `cast` (Semigroups.N:Comp[0] <GHC.Types.Int>_R)
                        (m2 `cast` (Semigroups.N:Comp[0] <GHC.Types.Int>_R)
                           (m3 `cast` (Semigroups.N:Comp[0] <GHC.Types.Int>_R)
                              a)) of wild { GHC.Types.I# x ->
                 GHC.Types.True }) -}
1680422b1fc36f6b30d90805ebb5f560
  unCombine :: Semigroups.Combine a b -> a -> b
  RecSel Left Semigroups.Combine
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Semigroups.unCombine1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Semigroups.Combine a b>_R
                 ->_R Semigroups.N:Combine[0] <a>_N <b>_N) -}
1680422b1fc36f6b30d90805ebb5f560
  unCombine1 :: Semigroups.Combine a b -> Semigroups.Combine a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ b (ds :: Semigroups.Combine a b) -> ds) -}
4860b4ccd05862bc07207bcfb8fa433d
  unComp :: Semigroups.Comp a -> a -> a
  RecSel Left Semigroups.Comp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Semigroups.unComp1
                  `cast`
                (forall (a :: <*>_N).
                 <Semigroups.Comp a>_R ->_R Semigroups.N:Comp[0] <a>_R) -}
4860b4ccd05862bc07207bcfb8fa433d
  unComp1 :: Semigroups.Comp a -> Semigroups.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Semigroups.Comp a) -> ds) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.BoolConj]
  = Semigroups.$fArbitraryBoolConj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.BoolDisj]
  = Semigroups.$fArbitraryBoolDisj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Combine]
  = Semigroups.$fArbitraryCombine
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Comp]
  = Semigroups.$fArbitraryComp
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Four]
  = Semigroups.$fArbitraryFour
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Identity]
  = Semigroups.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Or]
  = Semigroups.$fArbitraryOr
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Three]
  = Semigroups.$fArbitraryThree
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Trivial]
  = Semigroups.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Semigroups.Two]
  = Semigroups.$fArbitraryTwo
instance [safe] GHC.Classes.Eq [Semigroups.BoolConj]
  = Semigroups.$fEqBoolConj
instance [safe] GHC.Classes.Eq [Semigroups.BoolDisj]
  = Semigroups.$fEqBoolDisj
instance [safe] GHC.Classes.Eq [Semigroups.Four]
  = Semigroups.$fEqFour
instance [safe] GHC.Classes.Eq [Semigroups.Identity]
  = Semigroups.$fEqIdentity
instance [safe] GHC.Classes.Eq [Semigroups.Or] = Semigroups.$fEqOr
instance [safe] GHC.Classes.Eq [Semigroups.Three]
  = Semigroups.$fEqThree
instance [safe] GHC.Classes.Eq [Semigroups.Trivial]
  = Semigroups.$fEqTrivial
instance [safe] GHC.Classes.Eq [Semigroups.Two]
  = Semigroups.$fEqTwo
instance [safe] Data.Semigroup.Semigroup [Semigroups.BoolConj]
  = Semigroups.$fSemigroupBoolConj
instance [safe] Data.Semigroup.Semigroup [Semigroups.BoolDisj]
  = Semigroups.$fSemigroupBoolDisj
instance [safe] Data.Semigroup.Semigroup [Semigroups.Combine]
  = Semigroups.$fSemigroupCombine
instance [safe] Data.Semigroup.Semigroup [Semigroups.Comp]
  = Semigroups.$fSemigroupComp
instance [safe] Data.Semigroup.Semigroup [Semigroups.Four]
  = Semigroups.$fSemigroupFour
instance [safe] Data.Semigroup.Semigroup [Semigroups.Identity]
  = Semigroups.$fSemigroupIdentity
instance [safe] Data.Semigroup.Semigroup [Semigroups.Or]
  = Semigroups.$fSemigroupOr
instance [safe] Data.Semigroup.Semigroup [Semigroups.Three]
  = Semigroups.$fSemigroupThree
instance [safe] Data.Semigroup.Semigroup [Semigroups.Trivial]
  = Semigroups.$fSemigroupTrivial
instance [safe] Data.Semigroup.Semigroup [Semigroups.Two]
  = Semigroups.$fSemigroupTwo
instance [safe] GHC.Show.Show [Semigroups.BoolConj]
  = Semigroups.$fShowBoolConj
instance [safe] GHC.Show.Show [Semigroups.BoolDisj]
  = Semigroups.$fShowBoolDisj
instance [safe] GHC.Show.Show [Semigroups.Combine]
  = Semigroups.$fShowCombine
instance [safe] GHC.Show.Show [Semigroups.Comp]
  = Semigroups.$fShowComp
instance [safe] GHC.Show.Show [Semigroups.Four]
  = Semigroups.$fShowFour
instance [safe] GHC.Show.Show [Semigroups.Identity]
  = Semigroups.$fShowIdentity
instance [safe] GHC.Show.Show [Semigroups.Or] = Semigroups.$fShowOr
instance [safe] GHC.Show.Show [Semigroups.Three]
  = Semigroups.$fShowThree
instance [safe] GHC.Show.Show [Semigroups.Trivial]
  = Semigroups.$fShowTrivial
instance [safe] GHC.Show.Show [Semigroups.Two]
  = Semigroups.$fShowTwo
"SPEC $carbitrary @ (Sum Int) @ (Product Int)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                        (Data.Monoid.Product
                                                                           GHC.Types.Int))
                                                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                         (Data.Monoid.Sum
                                                                            GHC.Types.Int))
  Semigroups.$fArbitraryTwo1 @ (Data.Monoid.Sum GHC.Types.Int)
                             @ (Data.Monoid.Product GHC.Types.Int)
                             $dArbitrary1
                             $dArbitrary
  = Semigroups.$fArbitraryTwo_$s$carbitrary
"SPEC $carbitrary @ (Sum Int) @ (Product Int) @ (Product Int) @ (Sum
                                                                  Int)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                                                                                                      (Data.Monoid.Sum
                                                                                                                                                                         GHC.Types.Int))
                                                                                                                                                    ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                                                                                                       (Data.Monoid.Product
                                                                                                                                                                          GHC.Types.Int))
                                                                                                                                                    ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                                                                                                       (Data.Monoid.Product
                                                                                                                                                                          GHC.Types.Int))
                                                                                                                                                    ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                                                                                                       (Data.Monoid.Sum
                                                                                                                                                                          GHC.Types.Int))
  Semigroups.$fArbitraryFour1 @ (Data.Monoid.Sum GHC.Types.Int)
                              @ (Data.Monoid.Product GHC.Types.Int)
                              @ (Data.Monoid.Product GHC.Types.Int)
                              @ (Data.Monoid.Sum GHC.Types.Int)
                              $dArbitrary3
                              $dArbitrary2
                              $dArbitrary1
                              $dArbitrary
  = Semigroups.$fArbitraryFour_$s$carbitrary
"SPEC $carbitrary @ (Sum Int) @ (Product Int) @ (Sum Int)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                    (Data.Monoid.Sum
                                                                                       GHC.Types.Int))
                                                                  ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                     (Data.Monoid.Product
                                                                                        GHC.Types.Int))
                                                                  ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                     (Data.Monoid.Sum
                                                                                        GHC.Types.Int))
  Semigroups.$fArbitraryThree1 @ (Data.Monoid.Sum GHC.Types.Int)
                               @ (Data.Monoid.Product GHC.Types.Int)
                               @ (Data.Monoid.Sum GHC.Types.Int)
                               $dArbitrary2
                               $dArbitrary1
                               $dArbitrary
  = Semigroups.$fArbitraryThree_$s$carbitrary
"SPEC $carbitrary @ Int @ Char" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                         GHC.Types.Char)
                                       ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                          GHC.Types.Int)
  Semigroups.$fArbitraryOr1 @ GHC.Types.Int
                            @ GHC.Types.Char
                            $dArbitrary1
                            $dArbitrary
  = Semigroups.$fArbitraryOr_$s$carbitrary
"SPEC $cshow @ Int" forall ($dShow :: GHC.Show.Show GHC.Types.Int)
  Semigroups.$fShowIdentity_$cshow @ GHC.Types.Int $dShow
  = Semigroups.$fShowIdentity_$s$cshow
"SPEC $cshow @ Int @ Char" forall ($dShow :: GHC.Show.Show
                                               GHC.Types.Int)
                                  ($dShow1 :: GHC.Show.Show GHC.Types.Char)
  Semigroups.$fShowOr_$cshow @ GHC.Types.Int
                             @ GHC.Types.Char
                             $dShow1
                             $dShow
  = Semigroups.$fShowOr_$s$cshow
"SPEC $cshowList @ (Sum Int) @ (Product Int)" forall ($dShow :: GHC.Show.Show
                                                                  (Data.Monoid.Sum GHC.Types.Int))
                                                     ($dShow1 :: GHC.Show.Show
                                                                   (Data.Monoid.Product
                                                                      GHC.Types.Int))
  Semigroups.$fShowTwo_$cshowList @ (Data.Monoid.Sum GHC.Types.Int)
                                  @ (Data.Monoid.Product GHC.Types.Int)
                                  $dShow1
                                  $dShow
  = Semigroups.$fShowTwo_$s$cshowList
"SPEC $cshowList @ (Sum Int) @ (Product Int) @ (Product Int) @ (Sum
                                                                 Int)" forall ($dShow :: GHC.Show.Show
                                                                                                                                                               (Data.Monoid.Sum
                                                                                                                                                                  GHC.Types.Int))
                                                                                                                                                  ($dShow1 :: GHC.Show.Show
                                                                                                                                                                (Data.Monoid.Product
                                                                                                                                                                   GHC.Types.Int))
                                                                                                                                                  ($dShow2 :: GHC.Show.Show
                                                                                                                                                                (Data.Monoid.Product
                                                                                                                                                                   GHC.Types.Int))
                                                                                                                                                  ($dShow3 :: GHC.Show.Show
                                                                                                                                                                (Data.Monoid.Sum
                                                                                                                                                                   GHC.Types.Int))
  Semigroups.$fShowFour_$cshowList @ (Data.Monoid.Sum GHC.Types.Int)
                                   @ (Data.Monoid.Product GHC.Types.Int)
                                   @ (Data.Monoid.Product GHC.Types.Int)
                                   @ (Data.Monoid.Sum GHC.Types.Int)
                                   $dShow3
                                   $dShow2
                                   $dShow1
                                   $dShow
  = Semigroups.$fShowFour_$s$cshowList
"SPEC $cshowList @ (Sum Int) @ (Product Int) @ (Sum Int)" forall ($dShow :: GHC.Show.Show
                                                                              (Data.Monoid.Sum
                                                                                 GHC.Types.Int))
                                                                 ($dShow1 :: GHC.Show.Show
                                                                               (Data.Monoid.Product
                                                                                  GHC.Types.Int))
                                                                 ($dShow2 :: GHC.Show.Show
                                                                               (Data.Monoid.Sum
                                                                                  GHC.Types.Int))
  Semigroups.$fShowThree_$cshowList @ (Data.Monoid.Sum GHC.Types.Int)
                                    @ (Data.Monoid.Product GHC.Types.Int)
                                    @ (Data.Monoid.Sum GHC.Types.Int)
                                    $dShow2
                                    $dShow1
                                    $dShow
  = Semigroups.$fShowThree_$s$cshowList
"SPEC $cshowList @ Int" forall ($dShow :: GHC.Show.Show
                                            GHC.Types.Int)
  Semigroups.$fShowIdentity_$cshowList @ GHC.Types.Int $dShow
  = Semigroups.$fShowIdentity_$s$cshowList
"SPEC $cshowList @ Int @ Char" forall ($dShow :: GHC.Show.Show
                                                   GHC.Types.Int)
                                      ($dShow1 :: GHC.Show.Show GHC.Types.Char)
  Semigroups.$fShowOr_$cshowList @ GHC.Types.Int
                                 @ GHC.Types.Char
                                 $dShow1
                                 $dShow
  = Semigroups.$fShowOr_$s$cshowList
"SPEC $cshowsPrec @ (Sum Int) @ (Product Int)" forall ($dShow :: GHC.Show.Show
                                                                   (Data.Monoid.Sum GHC.Types.Int))
                                                      ($dShow1 :: GHC.Show.Show
                                                                    (Data.Monoid.Product
                                                                       GHC.Types.Int))
  Semigroups.$fShowTwo_$cshowsPrec @ (Data.Monoid.Sum GHC.Types.Int)
                                   @ (Data.Monoid.Product GHC.Types.Int)
                                   $dShow1
                                   $dShow
  = Semigroups.$fShowTwo_$s$cshowsPrec
"SPEC $cshowsPrec @ (Sum Int) @ (Product Int) @ (Product Int) @ (Sum
                                                                  Int)" forall ($dShow :: GHC.Show.Show
                                                                                                                                                                 (Data.Monoid.Sum
                                                                                                                                                                    GHC.Types.Int))
                                                                                                                                                    ($dShow1 :: GHC.Show.Show
                                                                                                                                                                  (Data.Monoid.Product
                                                                                                                                                                     GHC.Types.Int))
                                                                                                                                                    ($dShow2 :: GHC.Show.Show
                                                                                                                                                                  (Data.Monoid.Product
                                                                                                                                                                     GHC.Types.Int))
                                                                                                                                                    ($dShow3 :: GHC.Show.Show
                                                                                                                                                                  (Data.Monoid.Sum
                                                                                                                                                                     GHC.Types.Int))
  Semigroups.$fShowFour_$cshowsPrec @ (Data.Monoid.Sum GHC.Types.Int)
                                    @ (Data.Monoid.Product GHC.Types.Int)
                                    @ (Data.Monoid.Product GHC.Types.Int)
                                    @ (Data.Monoid.Sum GHC.Types.Int)
                                    $dShow3
                                    $dShow2
                                    $dShow1
                                    $dShow
  = Semigroups.$fShowFour_$s$cshowsPrec
"SPEC $cshowsPrec @ (Sum Int) @ (Product Int) @ (Sum Int)" forall ($dShow :: GHC.Show.Show
                                                                               (Data.Monoid.Sum
                                                                                  GHC.Types.Int))
                                                                  ($dShow1 :: GHC.Show.Show
                                                                                (Data.Monoid.Product
                                                                                   GHC.Types.Int))
                                                                  ($dShow2 :: GHC.Show.Show
                                                                                (Data.Monoid.Sum
                                                                                   GHC.Types.Int))
  Semigroups.$fShowThree_$cshowsPrec @ (Data.Monoid.Sum
                                          GHC.Types.Int)
                                     @ (Data.Monoid.Product GHC.Types.Int)
                                     @ (Data.Monoid.Sum GHC.Types.Int)
                                     $dShow2
                                     $dShow1
                                     $dShow
  = Semigroups.$fShowThree_$s$cshowsPrec
"SPEC $cshowsPrec @ Int" forall ($dShow :: GHC.Show.Show
                                             GHC.Types.Int)
  Semigroups.$fShowIdentity_$cshowsPrec @ GHC.Types.Int $dShow
  = Semigroups.$fShowIdentity_$s$cshowsPrec
"SPEC $cshowsPrec @ Int @ Char" forall ($dShow :: GHC.Show.Show
                                                    GHC.Types.Int)
                                       ($dShow1 :: GHC.Show.Show GHC.Types.Char)
  Semigroups.$fShowOr_$cshowsPrec @ GHC.Types.Int
                                  @ GHC.Types.Char
                                  $dShow1
                                  $dShow
  = Semigroups.$fShowOr_$s$cshowsPrec
"SPEC $fShowFour @ (Sum Int) @ (Product Int) @ (Product Int) @ (Sum
                                                                 Int)" forall ($dShow :: GHC.Show.Show
                                                                                                                                                               (Data.Monoid.Sum
                                                                                                                                                                  GHC.Types.Int))
                                                                                                                                                  ($dShow1 :: GHC.Show.Show
                                                                                                                                                                (Data.Monoid.Product
                                                                                                                                                                   GHC.Types.Int))
                                                                                                                                                  ($dShow2 :: GHC.Show.Show
                                                                                                                                                                (Data.Monoid.Product
                                                                                                                                                                   GHC.Types.Int))
                                                                                                                                                  ($dShow3 :: GHC.Show.Show
                                                                                                                                                                (Data.Monoid.Sum
                                                                                                                                                                   GHC.Types.Int))
  Semigroups.$fShowFour @ (Data.Monoid.Sum GHC.Types.Int)
                        @ (Data.Monoid.Product GHC.Types.Int)
                        @ (Data.Monoid.Product GHC.Types.Int)
                        @ (Data.Monoid.Sum GHC.Types.Int)
                        $dShow3
                        $dShow2
                        $dShow1
                        $dShow
  = Semigroups.$fShowFour_$s$fShowFour
"SPEC $fShowIdentity @ Int" forall ($dShow :: GHC.Show.Show
                                                GHC.Types.Int)
  Semigroups.$fShowIdentity @ GHC.Types.Int $dShow
  = Semigroups.$fShowIdentity_$s$fShowIdentity
"SPEC $fShowOr @ Int @ Char" forall ($dShow :: GHC.Show.Show
                                                 GHC.Types.Int)
                                    ($dShow1 :: GHC.Show.Show GHC.Types.Char)
  Semigroups.$fShowOr @ GHC.Types.Int @ GHC.Types.Char $dShow1 $dShow
  = Semigroups.$fShowOr_$s$fShowOr
"SPEC $fShowThree @ (Sum Int) @ (Product Int) @ (Sum Int)" forall ($dShow :: GHC.Show.Show
                                                                               (Data.Monoid.Sum
                                                                                  GHC.Types.Int))
                                                                  ($dShow1 :: GHC.Show.Show
                                                                                (Data.Monoid.Product
                                                                                   GHC.Types.Int))
                                                                  ($dShow2 :: GHC.Show.Show
                                                                                (Data.Monoid.Sum
                                                                                   GHC.Types.Int))
  Semigroups.$fShowThree @ (Data.Monoid.Sum GHC.Types.Int)
                         @ (Data.Monoid.Product GHC.Types.Int)
                         @ (Data.Monoid.Sum GHC.Types.Int)
                         $dShow2
                         $dShow1
                         $dShow
  = Semigroups.$fShowThree_$s$fShowThree
"SPEC $fShowTwo @ (Sum Int) @ (Product Int)" forall ($dShow :: GHC.Show.Show
                                                                 (Data.Monoid.Sum GHC.Types.Int))
                                                    ($dShow1 :: GHC.Show.Show
                                                                  (Data.Monoid.Product
                                                                     GHC.Types.Int))
  Semigroups.$fShowTwo @ (Data.Monoid.Sum GHC.Types.Int)
                       @ (Data.Monoid.Product GHC.Types.Int)
                       $dShow1
                       $dShow
  = Semigroups.$fShowTwo_$s$fShowTwo
"SPEC semigroupCombineAssoc @ (Sum Int) _" forall @ a
                                                  ($dSemigroup :: Data.Semigroup.Semigroup
                                                                    (Data.Monoid.Sum GHC.Types.Int))
                                                  ($dEq :: GHC.Classes.Eq
                                                             (Data.Monoid.Sum GHC.Types.Int))
  Semigroups.semigroupCombineAssoc @ (Data.Monoid.Sum GHC.Types.Int)
                                   @ a
                                   $dEq
                                   $dSemigroup
  = Semigroups.semigroupCombineAssoc_$ssemigroupCombineAssoc @ a
"SPEC semigroupCompAssoc @ Int" forall ($dEq :: GHC.Classes.Eq
                                                  GHC.Types.Int)
  Semigroups.semigroupCompAssoc @ GHC.Types.Int $dEq
  = Semigroups.semigroupCompAssoc_$ssemigroupCompAssoc
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

