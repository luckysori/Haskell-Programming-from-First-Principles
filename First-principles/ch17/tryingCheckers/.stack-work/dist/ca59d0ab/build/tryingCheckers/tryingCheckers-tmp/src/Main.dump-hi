
==================== FINAL INTERFACE ====================
2018-06-10 12:44:50.5409713 UTC

interface main@main:Main 8002
  interface hash: 82fe7de2ca27801fa067536ff15d2a7f
  ABI hash: 625cd20f8715300f0327e2437ed70b81
  export-list hash: d7576b3d32428f2c1a906c37c74bdbdf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 63bafc34e251377c35497568c84fbfad
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.Bull{Main.Fools Main.Twoo}
module dependencies:
package dependencies: QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8
                      Win32-2.3.1.1@Win32-2.3.1.1 array-0.5.1.1@array-0.5.1.1
                      base-4.9.1.0
                      base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg
                      bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE
                      comonad-5.0.3@comonad-5.0.3-1sUq9YbosoKHHQrV5x6ifv
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-CQzfOfECEnE83avAm7o1MS
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      semigroupoids-5.2.2@semigroupoids-5.2.2-29VRzL6jdNeJ5YKL7ou1EO
                      tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4
                      template-haskell-2.11.1.0
                      text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE
                      tf-random-0.5@tf-random-0.5-8zb9gy6kAR08bzNKGLuVb6
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje
                      unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-4.9.1.0:Text.Show.Functions
         base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Checkers
         hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo:Data.Hashable.Generic
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje:Control.Monad.Trans.Instances
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Biff
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Clown
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Flip
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Join
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Joker
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Product
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Tannen
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Control.Monad.Primitive
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Data.Primitive.ByteArray
                         tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
                         unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52:Data.HashMap.Base
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck 55aeb09f4e4110693e8dfdacdc6edfd7
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Arbitrary f5e4f9f82b8cb4abf5ae7a89ddae0f3a
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Gen 559aee5fbf43d977859baf9bbde02f34
import  -/  base-4.9.1.0:Data.Monoid 57d0116342e60080b20e7d5f9e1248f9
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Checkers b83cb912dd39bf33d52b71c90524c765
import  -/  checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Classes 3283683c09ba42d569c3d078a907c591
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull :: Test.QuickCheck.Arbitrary.Arbitrary Main.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.$fArbitraryBull_$carbitrary
                  Main.$fArbitraryBull_$s$dmshrink -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull1 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
                   Main.$fArbitraryBull6
                   Main.$fArbitraryBull2) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull2 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
                   Main.$fArbitraryBull3
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull))) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
  {- HasNoCafRefs,
     Unfolding: ((Main.$fArbitraryBull5,
                  Main.$fArbitraryBull4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Bull>_R)))) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.Twoo) -}
2252c3e4fdb0590e69e059dcf7e391a4
  $fArbitraryBull5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull6 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
  {- HasNoCafRefs,
     Unfolding: ((Main.$fArbitraryBull5,
                  Main.$fArbitraryBull7
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Bull>_R)))) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull7 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.Fools) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull_$carbitrary :: Test.QuickCheck.Gen.Gen Main.Bull
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ Main.Bull
                   Main.$fArbitraryBull1) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fArbitraryBull_$s$dmshrink :: Main.Bull -> [Main.Bull]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds :: Main.Bull) -> GHC.Types.[] @ Main.Bull) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fEqBull :: GHC.Classes.Eq Main.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull Main.$fEqBull_$c== Main.$fEqBull_$c/= -}
a32950e91ea78d63c811adcf3e3b96d6
  $fEqBull_$c/= :: Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Bull) (b :: Main.Bull) ->
                 case a of wild {
                   Main.Fools
                   -> case b of wild1 {
                        Main.Fools -> GHC.Types.False Main.Twoo -> GHC.Types.True }
                   Main.Twoo
                   -> case b of wild1 {
                        Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False } }) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fEqBull_$c== :: Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Bull) (ds1 :: Main.Bull) ->
                 case ds of wild {
                   Main.Fools
                   -> case ds1 of wild1 {
                        Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False }
                   Main.Twoo
                   -> case ds1 of wild1 {
                        Main.Fools -> GHC.Types.False Main.Twoo -> GHC.Types.True } }) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fEqPropBull :: Test.QuickCheck.Checkers.EqProp Main.Bull
  DFunId
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fEqPropBull_$c=-=
                  `cast`
                (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <Main.Bull>_N)) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fEqPropBull_$c=-= ::
    Main.Bull -> Main.Bull -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (a1 :: Main.Bull) (a' :: Main.Bull) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case a1 of wild {
                             Main.Fools
                             -> case a' of wild1 {
                                  Main.Fools -> Test.QuickCheck.Property.succeeded
                                  Main.Twoo -> Test.QuickCheck.Property.counterexample1 }
                             Main.Twoo
                             -> case a' of wild1 {
                                  Main.Fools -> Test.QuickCheck.Property.counterexample1
                                  Main.Twoo -> Test.QuickCheck.Property.succeeded } })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fMonoidBull :: GHC.Base.Monoid Main.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.Fools
                  Main.$fMonoidBull_$cmappend
                  Main.$fMonoidBull_$cmconcat -}
a32950e91ea78d63c811adcf3e3b96d6
  $fMonoidBull_$cmappend :: Main.Bull -> Main.Bull -> Main.Bull
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Main.Bull) (ds1 :: Main.Bull) -> Main.Fools) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fMonoidBull_$cmconcat :: [Main.Bull] -> Main.Bull
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Main.Bull]) ->
                 case eta of wild { DEFAULT -> Main.Fools }) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fShowBull :: GHC.Show.Show Main.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.$fShowBull_$cshowsPrec
                  Main.$fShowBull_$cshow
                  Main.$fShowBull_$cshowList -}
a32950e91ea78d63c811adcf3e3b96d6
  $fShowBull1 :: Main.Bull -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Bull) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Main.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull3)
                        eta
                   Main.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull2)
                        eta }) -}
811bae448d1034de29bd53ebfc3861a1
  $fShowBull2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Twoo"#) -}
cc4cd724d35d3e829732239a603b3dbe
  $fShowBull3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fools"#) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fShowBull_$cshow :: Main.Bull -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Bull) ->
                 case x of wild {
                   Main.Fools -> Main.$fShowBull3 Main.Twoo -> Main.$fShowBull2 }) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fShowBull_$cshowList :: [Main.Bull] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Bull Main.$fShowBull1) -}
a32950e91ea78d63c811adcf3e3b96d6
  $fShowBull_$cshowsPrec ::
    GHC.Types.Int -> Main.Bull -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Bull)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull3)
                        eta
                   Main.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull2)
                        eta }) -}
6ecf17f6d1d1b69b0d6da4a80f1735da
  $tc'Fools :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14565306985209851106##
                   6455718131687022603##
                   Main.$trModule
                   Main.$tc'Fools1) -}
a5897e5dad86f82a6927abf8c15052dd
  $tc'Fools1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fools"#) -}
ece3996b77a8d4e37267a1e07fb36001
  $tc'Twoo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3854190919114193164##
                   11957892805415704562##
                   Main.$trModule
                   Main.$tc'Twoo1) -}
7bb8434c03ea1b490b56a4bdadbaec48
  $tc'Twoo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Twoo"#) -}
a7347b6b60adf91d3b22db8427b29384
  $tcBull :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11498039343873913311##
                   9999654944972621690##
                   Main.$trModule
                   Main.$tcBull1) -}
0d68b6fd348a37f419a6778a4bae5bb1
  $tcBull1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bull"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
a32950e91ea78d63c811adcf3e3b96d6
  data Bull = Fools | Twoo
3a6ea213de294bbc2dc8fba4bb617996
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
aac1f74f02a9de85f0fbfa01cb0fe370
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Checkers.quickBatch1 Main.main2) -}
734fce54d2c0b594d341a075a53a1af0
  main2 :: Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Main.main3 Main.Twoo) -}
516c5f597a4d0f053af0f23cc1d96d26
  main3 :: Main.Bull -> Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Test.QuickCheck.Classes.monoid
                   @ Main.Bull
                   Main.$fMonoidBull
                   Main.$fShowBull
                   Main.$fArbitraryBull
                   Main.$fEqPropBull_$c=-=
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <Main.Bull>_N))) -}
c008a52c5ecefa2dbe96e676588a9476
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.Bull]
  = Main.$fArbitraryBull
instance GHC.Classes.Eq [Main.Bull] = Main.$fEqBull
instance Test.QuickCheck.Checkers.EqProp [Main.Bull]
  = Main.$fEqPropBull
instance GHC.Base.Monoid [Main.Bull] = Main.$fMonoidBull
instance GHC.Show.Show [Main.Bull] = Main.$fShowBull
"SPEC/Main $dmshrink @ Bull" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               Main.Bull)
  Test.QuickCheck.Arbitrary.$dmshrink @ Main.Bull $dArbitrary
  = Main.$fArbitraryBull_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

