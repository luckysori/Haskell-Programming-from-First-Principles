
c:/Projects/Haskell/First-principles/ch21/chapterExercises/src\Main.hs,4900
module Main Main2,3
newtype Identity Identity8,9
instance Functor Functor Identity10,11
  fmap fmap11,12
instance Foldable Foldable Identity13,14
  foldMap foldMap14,15
instance Traversable Traversable Identity16,17
  traverse traverse17,18
instance Arbitrary Arbitrary a => Arbitrary (Identity a)19,20
  arbitrary arbitrary20,21
instance Eq Eq a => EqProp (Identity a)22,23
  (=(=-=)23,24
newtype Constant Constant25,26
  Constant { getConstant getConstant26,27
instance Functor Functor (Constant a)29,30
  fmap fmap30,31
instance Foldable Foldable (Constant a)32,33
  foldMap foldMap33,34
instance Traversable Traversable (Constant a)35,36
  traverse traverse36,37
instance Arbitrary Arbitrary a => Arbitrary (Constant a b)38,39
  arbitrary arbitrary39,40
instance Eq Eq a => EqProp (Constant a b)41,42
  (=(=-=)42,43
data Optional Optional44,45
data Optional a = Nada Nada44,45
data Optional a = Nada | Yep Yep44,45
instance Functor Functor Optional46,47
  fmap fmap47,48
instance Foldable Foldable Optional50,51
  foldMap foldMap51,52
instance Traversable Traversable Optional54,55
  traverse traverse55,56
instance Arbitrary Arbitrary a => Arbitrary (Optional a)58,59
  arbitrary arbitrary59,60
instance Eq Eq a => EqProp (Optional a)63,64
  (=(=-=)64,65
data List List66,67
data List a = Nil Nil66,67
data List a = Nil | Cons Cons66,67
instance Functor Functor List68,69
  fmap fmap69,70
append append72,73
fold fold77,78
concat' concat'81,82
flatMap flatMap84,85
instance Applicative Applicative List89,90
  pure pure90,91
  (<(<*>)91,92
instance Foldable Foldable List95,96
  foldMap foldMap96,97
instance Traversable Traversable List99,100
  traverse traverse100,101
arbitraryList arbitraryList103,104
instance Arbitrary Arbitrary a => Arbitrary (List a)109,110
  arbitrary arbitrary110,111
instance Eq Eq a => EqProp (List a)112,113
  (=(=-=)113,114
data Three Three115,116
data Three a b c = Three Three115,116
instance Functor Functor (Three a b)117,118
  fmap fmap118,119
instance Foldable Foldable (Three a b)120,121
  foldMap foldMap121,122
instance Traversable Traversable (Three a b)123,124
  traverse traverse124,125
instance (A(Arbitrary a, Arbitrary b, Arbitrary c) => Arbitrary (Three a b c)126,127
  arbitrary arbitrary128,129
instance (E(Eq a, Eq b, Eq c) => EqProp (Three a b c)144,145
  (=(=-=)145,146
data Pair Pair147,148
data Pair a b = Pair Pair147,148
instance Functor Functor (Pair a)149,150
  fmap fmap150,151
instance Foldable Foldable (Pair a)152,153
  foldMap foldMap153,154
instance Traversable Traversable (Pair a)155,156
  traverse traverse156,157
instance (A(Arbitrary a, Arbitrary b) => Arbitrary (Pair a b)158,159
  arbitrary arbitrary159,160
instance (E(Eq a, Eq b) => EqProp (Pair a b)161,162
  (=(=-=)162,163
data Big Big164,165
data Big a b = Big Big164,165
instance Functor Functor (Big a)166,167
  fmap fmap167,168
instance Foldable Foldable (Big a)169,170
  foldMap foldMap170,171
instance Traversable Traversable (Big a)172,173
  traverse traverse173,174
instance (A(Arbitrary a, Arbitrary b) => Arbitrary (Big a b)175,176
  arbitrary arbitrary176,177
instance (E(Eq a, Eq b) => EqProp (Big a b)182,183
  (=(=-=)183,184
data Bigger Bigger185,186
data Bigger a b = Bigger Bigger185,186
instance Functor Functor (Bigger a)187,188
  fmap fmap188,189
instance Foldable Foldable (Bigger a)190,191
  foldMap foldMap191,192
instance Traversable Traversable (Bigger a)193,194
  traverse traverse194,195
instance (A(Arbitrary a, Arbitrary b) => Arbitrary (Bigger a b)196,197
  arbitrary arbitrary197,198
instance (E(Eq a, Eq b) => EqProp (Bigger a b)204,205
  (=(=-=)205,206
data S S207,208
data S n a = S S207,208
instance (F(Functor n, Arbitrary (n a), Arbitrary a) => Arbitrary (S n a)209,210
  arbitrary arbitrary210,211
instance (E(Eq a, Eq (n a)) => EqProp (S n a)217,218
  (=(=-=)218,219
instance Functor Functor n => Functor (S n)220,221
  fmap fmap221,222
instance Foldable Foldable n => Foldable (S n)223,224
  foldMap foldMap224,225
instance Traversable Traversable n => Traversable (S n)226,227
  traverse traverse227,228
data Tree Tree229,230
data Tree a = Empty Empty229,230
data Tree a = Empty | Leaf Leaf229,230
data Tree a = Empty | Leaf a | Node Node229,230
instance Functor Functor Tree231,232
  fmap fmap232,233
instance Foldable Foldable Tree236,237
  foldMap foldMap237,238
  foldr foldr242,243
instance Traversable Traversable Tree246,247
  traverse traverse247,248
arbitraryTree arbitraryTree254,255
instance Arbitrary Arbitrary a => Arbitrary (Tree a)263,264
  arbitrary arbitrary264,265
instance Eq Eq a => EqProp (Tree a)266,267
  (=(=-=)267,268
main main269,270

c:/Projects/Haskell/First-principles/ch21/chapterExercises/Setup.hs,15
main main1,2
