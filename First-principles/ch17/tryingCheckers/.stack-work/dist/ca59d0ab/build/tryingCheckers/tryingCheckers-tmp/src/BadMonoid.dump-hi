
==================== FINAL INTERFACE ====================
2018-06-10 12:31:05.7435348 UTC

interface main@main:BadMonoid 8002
  interface hash: 5e423bdce84216b63001d48aebd8f1f0
  ABI hash: dbc6abe7d82b77f1a9148b2a628df8b1
  export-list hash: 66618cafcd662b58473e2d6a7172ae08
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e1bc45458ed5fc9067c08913c67e3be8
  sig of: Nothing
  used TH splices: False
  where
exports:
  BadMonoid.main
  BadMonoid.Bull{BadMonoid.Fools BadMonoid.Twoo}
module dependencies:
package dependencies: QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8
                      Win32-2.3.1.1@Win32-2.3.1.1 array-0.5.1.1@array-0.5.1.1
                      base-4.9.1.0
                      base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg
                      bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE
                      comonad-5.0.3@comonad-5.0.3-1sUq9YbosoKHHQrV5x6ifv
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-CQzfOfECEnE83avAm7o1MS
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      semigroupoids-5.2.2@semigroupoids-5.2.2-29VRzL6jdNeJ5YKL7ou1EO
                      tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4
                      template-haskell-2.11.1.0
                      text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE
                      tf-random-0.5@tf-random-0.5-8zb9gy6kAR08bzNKGLuVb6
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje
                      unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-4.9.1.0:Text.Show.Functions
         base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Checkers
         hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo:Data.Hashable.Generic
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje:Control.Monad.Trans.Instances
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Biff
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Clown
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Flip
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Join
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Joker
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Product
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Tannen
                         bifunctors-5.5.2@bifunctors-5.5.2-7kjeTMgMqWJLcl46Jk5O6h:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Control.Monad.Primitive
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Data.Primitive.ByteArray
                         tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
                         unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52:Data.HashMap.Base
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck 55aeb09f4e4110693e8dfdacdc6edfd7
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Arbitrary f5e4f9f82b8cb4abf5ae7a89ddae0f3a
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Gen 559aee5fbf43d977859baf9bbde02f34
import  -/  base-4.9.1.0:Data.Monoid 57d0116342e60080b20e7d5f9e1248f9
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Checkers b83cb912dd39bf33d52b71c90524c765
import  -/  checkers-0.4.10@checkers-0.4.10-TPfvaaQ22IEZCkl9uodnE:Test.QuickCheck.Classes 3283683c09ba42d569c3d078a907c591
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull ::
    Test.QuickCheck.Arbitrary.Arbitrary BadMonoid.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull
                  BadMonoid.$fArbitraryBull_$carbitrary
                  BadMonoid.$fArbitraryBull_$s$dmshrink -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull1 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
                   BadMonoid.$fArbitraryBull6
                   BadMonoid.$fArbitraryBull2) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull2 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
                   BadMonoid.$fArbitraryBull3
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull))) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
  {- HasNoCafRefs,
     Unfolding: ((BadMonoid.$fArbitraryBull5,
                  BadMonoid.$fArbitraryBull4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <BadMonoid.Bull>_R)))) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> BadMonoid.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 BadMonoid.Twoo) -}
4d93558b677708421ee52163d28c9ec3
  $fArbitraryBull5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull6 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
  {- HasNoCafRefs,
     Unfolding: ((BadMonoid.$fArbitraryBull5,
                  BadMonoid.$fArbitraryBull7
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <BadMonoid.Bull>_R)))) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull7 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> BadMonoid.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 BadMonoid.Fools) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull_$carbitrary ::
    Test.QuickCheck.Gen.Gen BadMonoid.Bull
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ BadMonoid.Bull
                   BadMonoid.$fArbitraryBull1) -}
b4ddd0f3795cb5ce097600956c74d861
  $fArbitraryBull_$s$dmshrink :: BadMonoid.Bull -> [BadMonoid.Bull]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds :: BadMonoid.Bull) -> GHC.Types.[] @ BadMonoid.Bull) -}
b4ddd0f3795cb5ce097600956c74d861
  $fEqBull :: GHC.Classes.Eq BadMonoid.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull BadMonoid.$fEqBull_$c== BadMonoid.$fEqBull_$c/= -}
b4ddd0f3795cb5ce097600956c74d861
  $fEqBull_$c/= :: BadMonoid.Bull -> BadMonoid.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BadMonoid.Bull) (b :: BadMonoid.Bull) ->
                 case a of wild {
                   BadMonoid.Fools
                   -> case b of wild1 {
                        BadMonoid.Fools -> GHC.Types.False
                        BadMonoid.Twoo -> GHC.Types.True }
                   BadMonoid.Twoo
                   -> case b of wild1 {
                        BadMonoid.Fools -> GHC.Types.True
                        BadMonoid.Twoo -> GHC.Types.False } }) -}
b4ddd0f3795cb5ce097600956c74d861
  $fEqBull_$c== :: BadMonoid.Bull -> BadMonoid.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BadMonoid.Bull) (ds1 :: BadMonoid.Bull) ->
                 case ds of wild {
                   BadMonoid.Fools
                   -> case ds1 of wild1 {
                        BadMonoid.Fools -> GHC.Types.True
                        BadMonoid.Twoo -> GHC.Types.False }
                   BadMonoid.Twoo
                   -> case ds1 of wild1 {
                        BadMonoid.Fools -> GHC.Types.False
                        BadMonoid.Twoo -> GHC.Types.True } }) -}
b4ddd0f3795cb5ce097600956c74d861
  $fEqPropBull :: Test.QuickCheck.Checkers.EqProp BadMonoid.Bull
  DFunId
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                BadMonoid.$fEqPropBull_$c=-=
                  `cast`
                (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <BadMonoid.Bull>_N)) -}
b4ddd0f3795cb5ce097600956c74d861
  $fEqPropBull_$c=-= ::
    BadMonoid.Bull
    -> BadMonoid.Bull -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (a1 :: BadMonoid.Bull) (a' :: BadMonoid.Bull) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case a1 of wild {
                             BadMonoid.Fools
                             -> case a' of wild1 {
                                  BadMonoid.Fools -> Test.QuickCheck.Property.succeeded
                                  BadMonoid.Twoo -> Test.QuickCheck.Property.counterexample1 }
                             BadMonoid.Twoo
                             -> case a' of wild1 {
                                  BadMonoid.Fools -> Test.QuickCheck.Property.counterexample1
                                  BadMonoid.Twoo -> Test.QuickCheck.Property.succeeded } })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
b4ddd0f3795cb5ce097600956c74d861
  $fMonoidBull :: GHC.Base.Monoid BadMonoid.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull
                  BadMonoid.Fools
                  BadMonoid.$fMonoidBull_$cmappend
                  BadMonoid.$fMonoidBull_$cmconcat -}
b4ddd0f3795cb5ce097600956c74d861
  $fMonoidBull_$cmappend ::
    BadMonoid.Bull -> BadMonoid.Bull -> BadMonoid.Bull
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: BadMonoid.Bull) (ds1 :: BadMonoid.Bull) ->
                 BadMonoid.Fools) -}
b4ddd0f3795cb5ce097600956c74d861
  $fMonoidBull_$cmconcat :: [BadMonoid.Bull] -> BadMonoid.Bull
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [BadMonoid.Bull]) ->
                 case eta of wild { DEFAULT -> BadMonoid.Fools }) -}
b4ddd0f3795cb5ce097600956c74d861
  $fShowBull :: GHC.Show.Show BadMonoid.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull
                  BadMonoid.$fShowBull_$cshowsPrec
                  BadMonoid.$fShowBull_$cshow
                  BadMonoid.$fShowBull_$cshowList -}
b4ddd0f3795cb5ce097600956c74d861
  $fShowBull1 :: BadMonoid.Bull -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BadMonoid.Bull) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   BadMonoid.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull3)
                        eta
                   BadMonoid.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull2)
                        eta }) -}
6a404e68b15c9586d95d714064c8f73c
  $fShowBull2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Twoo"#) -}
f265274d106f8fb3a3ae59816e425c9b
  $fShowBull3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fools"#) -}
b4ddd0f3795cb5ce097600956c74d861
  $fShowBull_$cshow :: BadMonoid.Bull -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BadMonoid.Bull) ->
                 case x of wild {
                   BadMonoid.Fools -> BadMonoid.$fShowBull3
                   BadMonoid.Twoo -> BadMonoid.$fShowBull2 }) -}
b4ddd0f3795cb5ce097600956c74d861
  $fShowBull_$cshowList :: [BadMonoid.Bull] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BadMonoid.Bull
                   BadMonoid.$fShowBull1) -}
b4ddd0f3795cb5ce097600956c74d861
  $fShowBull_$cshowsPrec ::
    GHC.Types.Int -> BadMonoid.Bull -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: BadMonoid.Bull)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   BadMonoid.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull3)
                        eta
                   BadMonoid.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull2)
                        eta }) -}
df4f6e698602272ee696c6231295533e
  $tc'Fools :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17828234711783760007##
                   7397798954085526615##
                   BadMonoid.$trModule
                   BadMonoid.$tc'Fools1) -}
887e35eb57421f80d58753e8a90b95f9
  $tc'Fools1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fools"#) -}
16c5c49d7dc79767dafa1278b29536a8
  $tc'Twoo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8842320703901473552##
                   3644780062428888432##
                   BadMonoid.$trModule
                   BadMonoid.$tc'Twoo1) -}
0064ede7e471a4ba470e6060f8f5ff5c
  $tc'Twoo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Twoo"#) -}
4ed2230e8f3889feb127a19bbcb6d906
  $tcBull :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5406118215049651857##
                   13799455607889033402##
                   BadMonoid.$trModule
                   BadMonoid.$tcBull1) -}
40235a9fd5eed13d71a60f4cc06ba5f1
  $tcBull1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bull"#) -}
bcef18ddb68678aa8fd0012489a7ad50
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BadMonoid.$trModule2
                   BadMonoid.$trModule1) -}
98e4ec9c3ef9965acd14fba8ca670c51
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BadMonoid"#) -}
8d59e8faadfb7ff8a7810d07c4c0d0a6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
b4ddd0f3795cb5ce097600956c74d861
  data Bull = Fools | Twoo
de000d47dcd603922beba43248cd53b7
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                BadMonoid.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
912f1140dca9b2c3a6aaa1731d5c0064
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Checkers.quickBatch1
                   BadMonoid.main2) -}
5590c6178df486aa85e9abaff02382e5
  main2 :: Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (BadMonoid.main3 BadMonoid.Twoo) -}
9ff03639b86c8fbb7705069f7a4e4d70
  main3 :: BadMonoid.Bull -> Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Test.QuickCheck.Classes.monoid
                   @ BadMonoid.Bull
                   BadMonoid.$fMonoidBull
                   BadMonoid.$fShowBull
                   BadMonoid.$fArbitraryBull
                   BadMonoid.$fEqPropBull_$c=-=
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <BadMonoid.Bull>_N))) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [BadMonoid.Bull]
  = BadMonoid.$fArbitraryBull
instance GHC.Classes.Eq [BadMonoid.Bull] = BadMonoid.$fEqBull
instance Test.QuickCheck.Checkers.EqProp [BadMonoid.Bull]
  = BadMonoid.$fEqPropBull
instance GHC.Base.Monoid [BadMonoid.Bull] = BadMonoid.$fMonoidBull
instance GHC.Show.Show [BadMonoid.Bull] = BadMonoid.$fShowBull
"SPEC/BadMonoid $dmshrink @ Bull" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                    BadMonoid.Bull)
  Test.QuickCheck.Arbitrary.$dmshrink @ BadMonoid.Bull $dArbitrary
  = BadMonoid.$fArbitraryBull_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

