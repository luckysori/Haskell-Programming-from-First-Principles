
==================== FINAL INTERFACE ====================
2018-04-25 15:45:25.5386719 UTC

interface quickTest-0.1.0.0-1GOkumrNy0s9jar8PKcvgl:QuickTests 8022
  interface hash: eeb261af86c5ccb611cbd383e26677ab
  ABI hash: dea941ca450264fb7c6d513a46f6e842
  export-list hash: 6b329d3d6632c0a8f515bed8d3d3706b
  orphan hash: 7900a1f6546996a447cb5a3ff3fba465
  flag hash: 0db3658e8db58f936d8d66225b82f996
  sig of: Nothing
  used TH splices: False
  where
exports:
  QuickTests.checkAssCommMult
  QuickTests.checkAssCommPower
  QuickTests.checkAssCommSum
  QuickTests.checkDivQuot
  QuickTests.checkFs
  QuickTests.checkHalf
  QuickTests.checkReadShow
  QuickTests.checkRevSquared
  QuickTests.checkSort
  QuickTests.checkTakeLength
  QuickTests.compFs1
  QuickTests.compFs1Mod
  QuickTests.compFs2
  QuickTests.composition
  QuickTests.divModRel
  QuickTests.dollar
  QuickTests.genNonZeroInt
  QuickTests.half
  QuickTests.halfIdentity
  QuickTests.listOrdered
  QuickTests.plusAssociative
  QuickTests.plusCommutative
  QuickTests.powerOfAssociative
  QuickTests.powerOfCommutative
  QuickTests.propHalfIdentity
  QuickTests.quotRemRel
  QuickTests.readShow
  QuickTests.revRevIsId
  QuickTests.takeLength
  QuickTests.timesAssociative
  QuickTests.timesCommutative
module dependencies:
package dependencies: QuickCheck-2.10.1 Win32-2.5.4.1 array-0.5.2.0
                      base-4.10.1.0* containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
                      pretty-1.1.3.3 primitive-0.6.3.0 random-1.1
                      template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.10.1:Test.QuickCheck 384b265bb43b04f88515d0030a3eea23
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Arbitrary 51fd4b6bcba53aba3b6366311b8a279d
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Gen 430eb19bc4de8eb76a84005ff990c1d7
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Property 167bacb87aafb0034b544dcf3657dd9e
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Test be49a7a630d6c3b9fb5263d1d7f2f4b6
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.List e5312e282ad78d8152090e079f862b53
import  -/  base-4.10.1.0:Data.OldList fdea655c7bec488a3994df222c677ab7
import  -/  base-4.10.1.0:Data.Tuple ab0c62ebfcacf00dcba54934885c5064
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Read 5893a889a6512ca6f0a5c6c4b98ea136
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:Text.Read c150617dda21a009ed26981626bd21d7
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
39f590c8a3647909b6a9132da2841b49
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Int, GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Int, GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
7652ce053560bcdcd31ce96eb971c791
  $s$fShow[] :: GHC.Show.Show [[GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Int]]
                  (\ (ds :: GHC.Types.Int) -> GHC.Show.$fShow[]_$s$cshowList)
                  (\ (x :: [[GHC.Types.Int]]) ->
                   GHC.Show.showList__
                     @ [GHC.Types.Int]
                     GHC.Show.$fShowInt_$cshowList
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[[GHC.Types.Int]]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [[GHC.Types.Int]]
                     GHC.Show.$fShow[]_$s$cshowList
                     ls
                     s) -}
dcd2dd43713da5e028717834e38765dc
  $s$fTestable(->)12 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 QuickTests.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
313e4169ffcfbe4dc424acb787548321
  $s$fTestable(->)13 ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 QuickTests.$w$dTestable2 w ww1 ww2 ww3 ww4 w2 }) -}
98b89b0c7ffde12b94dde1f13018ce15
  $s$fTestable(->)6 ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 QuickTests.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
deb4576ee1c5a63c751565c3f2f73fd8
  $s$fTestable(->)7 :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Int]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   eta) -}
8a58780872acc216ae098098144bdd0a
  $s$fTestable(->)8 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
f1135ad3c6adba168c891cd2fbfff0d9
  $squickCheck10 :: [[GHC.Types.Int]] -> [[[GHC.Types.Int]]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [[GHC.Types.Int]]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ [GHC.Types.Int]
                   QuickTests.$s$fTestable(->)7
                   eta) -}
c5d18189c6b1078c6acd7ccea6556de1
  $squickCheck13 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int
                         -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 QuickTests.$w$dTestable4 w ww1 ww2 ww3 ww4 w2 }) -}
3f199112ec5365f2bc82de08cc2ed808
  $squickCheck4 ::
    ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 QuickTests.$w$dTestable3 w ww1 ww2 ww3 ww4 w2 }) -}
123b64cc6b3b72c35e96e03a19fd899b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   QuickTests.$trModule3
                   QuickTests.$trModule1) -}
a4bb0a9c6c8810674117dd0247892d2b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS QuickTests.$trModule2) -}
9b0f091002963a6c09885063803f8945
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QuickTests"#) -}
a8f26b0971fbc328df684ed61852f70b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS QuickTests.$trModule4) -}
0ddf29692729a2fc03cc3e0f1043b605
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("quickTest-0.1.0.0-1GOkumrNy0s9jar8PKcvgl"#) -}
d131b9bf6716c0633d89858d79b9a21b
  $w$dTestable ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Int]
                   @ GHC.Types.Bool
                   GHC.Show.$fShow[]_$s$fShow[]
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[GHC.Types.Int] -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   QuickTests.$s$fTestable(->)8
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Int]>_R))
                   QuickTests.$s$fTestable(->)7
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
74dba44879378802335aba23d5248006
  $w$dTestable1 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int
                         -> GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ (GHC.Types.Int -> GHC.Types.Bool)
                   GHC.Show.$fShowInt
                   QuickTests.$s$fTestable(->)13
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Int
                                                       -> GHC.Types.Int -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
7563d4942fc3e84788279ac79ec1305e
  $w$dTestable2 ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Int -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
aa2dfee4777ab71ea81a7254da39b0a5
  $w$dTestable3 ::
    ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]
                         -> [GHC.Types.Int] -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Int]
                   @ ([GHC.Types.Int] -> GHC.Types.Bool)
                   GHC.Show.$fShow[]_$s$fShow[]
                   QuickTests.$s$fTestable(->)6
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[GHC.Types.Int]
                                                       -> [GHC.Types.Int] -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R <[GHC.Types.Int]
                                                   -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   QuickTests.$s$fTestable(->)8
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Int]>_R))
                   QuickTests.$s$fTestable(->)7
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
ec3501af9055b4bdc4c775589a9d9601
  $w$dTestable4 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int
                         -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   GHC.Show.$fShowInt
                   QuickTests.$s$fTestable(->)12
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Int
                                                       -> GHC.Types.Int
                                                       -> GHC.Types.Int
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
71054f92c224733f5b3b8dc3a309281f
  $w$sdivModRel :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Real.$w$cdiv ww ww1 of ww4 { DEFAULT ->
                 case ww1 of wild {
                   DEFAULT
                   -> case GHC.Classes.modInt# ww wild of ww2 { DEFAULT ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# (GHC.Prim.+# (GHC.Prim.*# ww4 wild) ww2) ww) }
                   -1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# (GHC.Prim.*# ww4 -1#) ww)
                   0#
                   -> case GHC.Real.divZeroError ret_ty GHC.Types.Bool of {} } }) -}
477a63e7bc254924e29fc94a8427d414
  $w$spowerOfAssociative ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww 0#) of wild1 {
                   GHC.Types.False
                   -> let {
                        $w$j :: GHC.Prim.Int# -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (w2 :: GHC.Prim.Int#)[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# w2 0#) of wild2 {
                            GHC.Types.False
                            -> let {
                                 $j :: GHC.Prim.Int# -> GHC.Types.Bool
                                   <join 1> {- Arity: 1, Strictness: <S,U> -}
                                 = \ (x :: GHC.Prim.Int#)[OneShot] ->
                                   case ww of wild3 {
                                     DEFAULT
                                     -> case w1 of wild { GHC.Types.I# x1 ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# x1 0#) of wild4 {
                                          GHC.Types.False
                                          -> case x1 of wild5 {
                                               DEFAULT
                                               -> case w of ww1 { GHC.Types.I# ww2 ->
                                                  case GHC.Real.$wf1 ww2 wild5 of ww4 { DEFAULT ->
                                                  case GHC.Real.$wf1 ww4 wild3 of ww3 { DEFAULT ->
                                                  GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.==# x ww3) } } }
                                               0#
                                               -> case GHC.Real.$wf1 1# wild3 of ww4 { DEFAULT ->
                                                  GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.==# x ww4) } }
                                          GHC.Types.True
                                          -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} } }
                                     0#
                                     -> case x of wild {
                                          DEFAULT -> GHC.Types.False 1# -> GHC.Types.True } }
                               } in
                               case w2 of wild3 {
                                 DEFAULT
                                 -> case w of ww1 { GHC.Types.I# ww2 ->
                                    case GHC.Real.$wf1 ww2 wild3 of ww4 { DEFAULT -> $j ww4 } }
                                 0# -> $j 1# }
                            GHC.Types.True -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} }
                      } in
                      case ww of wild2 {
                        DEFAULT
                        -> case w1 of ww1 { GHC.Types.I# ww2 ->
                           case GHC.Real.$wf1 ww2 wild2 of ww4 { DEFAULT -> $w$j ww4 } }
                        0# -> $w$j 1# }
                   GHC.Types.True
                   -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} }) -}
e6b24c1cbf750cc9cd51ad24f667c570
  $w$spowerOfCommutative ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww1 0#) of wild1 {
                   GHC.Types.False
                   -> case ww1 of wild2 {
                        DEFAULT
                        -> case GHC.Real.$wf1 ww wild2 of ww4 { DEFAULT ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# ww 0#) of wild4 {
                             GHC.Types.False
                             -> case ww of wild5 {
                                  DEFAULT
                                  -> case GHC.Real.$wf1 wild2 wild5 of ww2 { DEFAULT ->
                                     GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww4 ww2) }
                                  0#
                                  -> case ww4 of wild {
                                       DEFAULT -> GHC.Types.False 1# -> GHC.Types.True } }
                             GHC.Types.True -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} } }
                        0#
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# ww 0#) of wild4 {
                             GHC.Types.False
                             -> case ww of wild5 {
                                  DEFAULT
                                  -> case GHC.Real.$wf1 0# wild5 of ww4 {
                                       DEFAULT -> GHC.Types.False 1# -> GHC.Types.True }
                                  0# -> GHC.Types.True }
                             GHC.Types.True -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} } }
                   GHC.Types.True
                   -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} }) -}
6ce1355dc7a67c8b278de3a5c8529104
  $w$squotRemRel :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case ww1 of wild {
                   DEFAULT
                   -> case GHC.Prim.quotInt# ww wild of ww4 { DEFAULT ->
                      case GHC.Prim.remInt# ww wild of wild3 { DEFAULT ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# (GHC.Prim.+# (GHC.Prim.*# ww4 wild) wild3) ww) } }
                   -1#
                   -> case ww of wild1 {
                        DEFAULT
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.*# (GHC.Prim.quotInt# wild1 -1#) -1#)
                                wild1)
                        -9223372036854775808#
                        -> case GHC.Real.overflowError ret_ty GHC.Types.Bool of {} }
                   0# -> case GHC.Real.divZeroError ret_ty GHC.Types.Bool of {} }) -}
1182b57746b470525437b281aa681a45
  $w$stakeLength ::
    GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: [GHC.Types.Int]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False
                   -> case ww of wild1 {
                        DEFAULT -> GHC.Types.False 0# -> GHC.Types.True }
                   GHC.Types.True
                   -> letrec {
                        $wgo2 :: [GHC.Types.Int]
                                 -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
                          <join 3> {- Arity: 3, Strictness: <S,1*U><L,1*U><S,U>,
                                      Inline: [0] -}
                        = \ (w1 :: [GHC.Types.Int])
                            (ww1 :: GHC.Prim.Int#)
                            (ww2 :: GHC.Prim.Int#) ->
                          case w1 of wild1 {
                            [] -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 ww)
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> $wgo2 ys (GHC.Prim.-# ds1 1#) (GHC.Prim.+# ww2 1#)
                                 1#
                                 -> GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# (GHC.Prim.+# ww2 1#) ww) } }
                      } in
                      $wgo2 w ww 0# }) -}
d177397d071bcd3c9d09bbc13098fd27
  $wdivModRel :: GHC.Real.Integral a => a -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(1*U(1*U(1*C1(C1(U)),A,1*C1(C1(U)),A,A,A,A),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A,A,A),A),A,A,A,1*C1(C1(U)),1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Real.Integral a)
                   (ww :: a)
                   (ww1 :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a w
                 } in
                 GHC.Classes.==
                   @ a
                   (GHC.Classes.$p1Ord @ a (GHC.Real.$p2Real @ a $dReal))
                   (let {
                      $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                    } in
                    GHC.Num.+
                      @ a
                      $dNum
                      (GHC.Num.* @ a $dNum (GHC.Real.div @ a w ww ww1) ww1)
                      (GHC.Real.mod @ a w ww ww1))
                   ww) -}
9dc7b30221b83fdf1ad8e3331d700022
  $wgenNonZeroInt ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ (GHC.Types.Int, GHC.Types.Int)
                   QuickTests.checkDivQuot5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Types.Int, GHC.Types.Int)>_R))
                   QuickTests.checkDivQuot4
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
d3b85f5cfe8239f0c702073c983ac214
  $wgenNonZeroInt1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
d7f61d6937c1ae54064ab62eb6587ff9
  $wgo ::
    [GHC.Types.Int]
    -> (# GHC.Base.Maybe GHC.Types.Int, GHC.Types.Bool #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
456333e59bb2a7aef9821a1ea4f79a9e
  $wlvl1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [[GHC.Types.Int]]
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ [GHC.Types.Int]
                   QuickTests.$s$fTestable(->)8
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Int]>_R))
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
192371529eae95b93db79257899eda63
  $wpowerOfCommutative ::
    GHC.Real.Integral a => a -> a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),C(C1(U)),A,A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a (w :: GHC.Real.Integral a) (w1 :: a) (w2 :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a w
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 GHC.Classes.==
                   @ a
                   (GHC.Classes.$p1Ord @ a (GHC.Real.$p2Real @ a $dReal))
                   (GHC.Real.^ @ a @ a $dNum w w1 w2)
                   (GHC.Real.^ @ a @ a $dNum w w2 w1)) -}
53358bc03a835c44b2467b92458e866e
  $wquotRemRel :: GHC.Real.Integral a => a -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(1*U(1*U(1*C1(C1(U)),A,1*C1(C1(U)),A,A,A,A),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A,A,A),A),A,1*C1(C1(U)),1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Real.Integral a)
                   (ww :: a)
                   (ww1 :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a w
                 } in
                 GHC.Classes.==
                   @ a
                   (GHC.Classes.$p1Ord @ a (GHC.Real.$p2Real @ a $dReal))
                   (let {
                      $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                    } in
                    GHC.Num.+
                      @ a
                      $dNum
                      (GHC.Num.* @ a $dNum (GHC.Real.quot @ a w ww ww1) ww1)
                      (GHC.Real.rem @ a w ww ww1))
                   ww) -}
d723494c90747b8c35450e1e11e8cf08
  $wtakeLength :: GHC.Prim.Int# -> [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: [a]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False
                   -> case ww of wild1 {
                        DEFAULT -> GHC.Types.False 0# -> GHC.Types.True }
                   GHC.Types.True
                   -> letrec {
                        $wgo2 :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
                          <join 3> {- Arity: 3, Strictness: <S,1*U><L,1*U><S,U>,
                                      Inline: [0] -}
                        = \ (w1 :: [a]) (ww1 :: GHC.Prim.Int#) (ww2 :: GHC.Prim.Int#) ->
                          case w1 of wild1 {
                            [] -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 ww)
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> $wgo2 ys (GHC.Prim.-# ds1 1#) (GHC.Prim.+# ww2 1#)
                                 1#
                                 -> GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# (GHC.Prim.+# ww2 1#) ww) } }
                      } in
                      $wgo2 w ww 0# }) -}
cca1cedadf02bbe5bfb57a5a692740e6
  checkAssCommMult :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkAssCommMult1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d7e11d972d106b21feaa32d4bae03d9d
  checkAssCommMult1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int
                           -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$squickCheck13
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkAssCommMult3
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$s$fTestable(->)12
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkAssCommMult2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } }) -}
799052a3cee4949b0c6a7105e346dadd
  checkAssCommMult2 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: (\ (x :: GHC.Types.Int) (y :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 ->
                 case y of wild1 { GHC.Types.I# y1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==# (GHC.Prim.*# x1 y1) (GHC.Prim.*# y1 x1)) } }) -}
7e8bb1091686d897519bbccc87a22f4e
  checkAssCommMult3 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: (\ (x :: GHC.Types.Int)
                   (y :: GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 ->
                 case y of wild1 { GHC.Types.I# x2 ->
                 case z of wild2 { GHC.Types.I# y1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.*# x1 (GHC.Prim.*# x2 y1))
                      (GHC.Prim.*# (GHC.Prim.*# x1 x2) y1)) } } }) -}
2171463df811145f6e15ecf58b4ba64f
  checkAssCommPower :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkAssCommPower1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4d235995529ff3b3160482f205045e5e
  checkAssCommPower1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int
                           -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$squickCheck13
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkAssCommPower_$spowerOfAssociative
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$s$fTestable(->)12
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkAssCommPower_$spowerOfCommutative
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } }) -}
77b1efc90aa0e84f6203c5c190b9fbcc
  checkAssCommPower_$spowerOfAssociative ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 QuickTests.$w$spowerOfAssociative w w1 ww1 }) -}
f168a44508f7420d5c6e3b4a2ca49d14
  checkAssCommPower_$spowerOfCommutative ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 QuickTests.$w$spowerOfCommutative ww1 ww3 } }) -}
fde5b6f75fbdf718c7b0718c968a87bf
  checkAssCommSum :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkAssCommSum1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e6b52ac71a1c02245753f829d318885d
  checkAssCommSum1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int
                           -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$squickCheck13
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Int
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int
                                                      -> GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkAssCommSum3
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$s$fTestable(->)12
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Types.Int -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> GHC.Types.Int
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkAssCommSum2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } }) -}
30483c7c5bc5b28ea78bbb98fffd2a2e
  checkAssCommSum2 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: (\ (x :: GHC.Types.Int) (y :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 ->
                 case y of wild1 { GHC.Types.I# y1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==# (GHC.Prim.+# x1 y1) (GHC.Prim.+# y1 x1)) } }) -}
e0bc2f8d5d2a48f6188e46b91c1f9714
  checkAssCommSum3 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: (\ (x :: GHC.Types.Int)
                   (y :: GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 ->
                 case y of wild1 { GHC.Types.I# x2 ->
                 case z of wild2 { GHC.Types.I# y1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.+# x1 (GHC.Prim.+# x2 y1))
                      (GHC.Prim.+# (GHC.Prim.+# x1 x2) y1)) } } }) -}
866f0b41db284f859d2c8e1b69350ea1
  checkDivQuot :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkDivQuot1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
47382be9c725ca0de9bf7562b90860f2
  checkDivQuot1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkDivQuot6
                          `cast`
                        (Trans
                             (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])))
                             (Sym (Test.QuickCheck.Property.N:Property[0])))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkDivQuot2
                          `cast`
                        (Trans
                             (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])))
                             (Sym (Test.QuickCheck.Property.N:Property[0])))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } }) -}
6721dd355295e320e12ecdad8224d186
  checkDivQuot2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (GHC.Types.Int, GHC.Types.Int)
                   @ GHC.Types.Bool
                   QuickTests.$s$fShow(,)
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   QuickTests.checkDivQuot3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Types.Int, GHC.Types.Int)>_R))
                   (Test.QuickCheck.Property.forAll2 @ (GHC.Types.Int, GHC.Types.Int))
                   QuickTests.checkDivQuot_$sdivModRel
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
64a3710b728a38d619c29a5c86f891b6
  checkDivQuot3 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 QuickTests.$wgenNonZeroInt ww1 ww2 ww3 ww4 ww8 } }) -}
dba57b8c3dbcb70813bf80ea114d961c
  checkDivQuot4 :: (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(1*U),1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 case x1 of wild2 {
                   DEFAULT
                   -> case y of wild3 { GHC.Types.I# x2 ->
                      case x2 of wild4 {
                        DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } }
                   0# -> GHC.Types.False } } }) -}
050013c8f0e9356e3dee2ebaa60d42f3
  checkDivQuot5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case QuickTests.$wgenNonZeroInt1
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
f2536b633701156a9bf4bd7c689d9f48
  checkDivQuot6 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (GHC.Types.Int, GHC.Types.Int)
                   @ GHC.Types.Bool
                   QuickTests.$s$fShow(,)
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   QuickTests.checkDivQuot3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Types.Int, GHC.Types.Int)>_R))
                   (Test.QuickCheck.Property.forAll2 @ (GHC.Types.Int, GHC.Types.Int))
                   QuickTests.checkDivQuot_$squotRemRel
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
59350816fcd7a2392762f75397390d65
  checkDivQuot_$sdivModRel ::
    (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 QuickTests.$w$sdivModRel ww4 ww6 } } }) -}
4d8f9e92d0e20018dd03b1902e32c454
  checkDivQuot_$squotRemRel ::
    (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(1*U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 QuickTests.$w$squotRemRel ww4 ww6 } } }) -}
858c662c515efbbd2b6d7f2dfc37f6f0
  checkFs :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkFs1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f54129d942e747e1976930693f9b6723
  checkFs1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                        QuickTests.$squickCheck4
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R <[GHC.Types.Int]
                                                   -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Int]
                                                            -> [GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkFs_$scompFs1
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                        QuickTests.$squickCheck4
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R <[GHC.Types.Int]
                                                   -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Int]
                                                            -> [GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkFs_$scompFs1Mod
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ ([[GHC.Types.Int]] -> GHC.Types.Bool)
                        QuickTests.checkFs2
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [[GHC.Types.Int]]>_R
                                             ->_R <GHC.Show.Show [[GHC.Types.Int]]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[[GHC.Types.Int]] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [[GHC.Types.Int]]>_R
                                             ->_R <GHC.Show.Show [[GHC.Types.Int]]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[[GHC.Types.Int]]
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkFs_$scompFs2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } }) -}
22d5e8e7deb7bd3bd5dff643ff09132b
  checkFs2 ::
    ([[GHC.Types.Int]] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: [[GHC.Types.Int]] -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [[GHC.Types.Int]]
                   @ GHC.Types.Bool
                   QuickTests.$s$fShow[]
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [[GHC.Types.Int]]>_R
                                             ->_R <GHC.Show.Show [[GHC.Types.Int]]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[[GHC.Types.Int]] -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [[GHC.Types.Int]]>_R
                                             ->_R <GHC.Show.Show [[GHC.Types.Int]]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[[GHC.Types.Int]] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   QuickTests.checkFs3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[[GHC.Types.Int]]>_R))
                   QuickTests.$squickCheck10
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
d6ea7cfd8551d18ecb45739d0c0db1d2
  checkFs3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [[GHC.Types.Int]]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 QuickTests.$wlvl1 ww1 ww2 ww3 ww4 ww8 } }) -}
40ab705f63ce1a19726524756ec5d30a
  checkFs_$scompFs1 ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (xs :: [GHC.Types.Int]) (ys :: [GHC.Types.Int]) ->
                 GHC.Classes.$fEq[]_$s$c==
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n ys)
                      xs)
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n xs)
                      ys)) -}
995c77f8ab4a129da46eead4989ca069
  checkFs_$scompFs1Mod ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (xs :: [GHC.Types.Int]) (ys :: [GHC.Types.Int]) ->
                 GHC.Classes.$fEq[]_$s$c==
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n ys)
                      xs)
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n ys)
                      xs)) -}
506b48420857b5023b95e00e8613543a
  checkFs_$scompFs2 :: [[GHC.Types.Int]] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (xs :: [[GHC.Types.Int]]) ->
                 GHC.Classes.$fEq[]_$s$c==
                   (QuickTests.checkFs_go xs)
                   (QuickTests.checkFs_go xs)) -}
727ddb7954d226f7187b659953ce33e8
  checkFs_go :: [[GHC.Types.Int]] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f2fa0589ec7bf5487461acf92e9f54c8
  checkHalf :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkHalf1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9fa0e352f243475b6c250aa1fbaa5706
  checkHalf1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Float -> GHC.Types.Bool)
                        QuickTests.checkHalf3
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Float -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Float
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkHalf2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
32db19f04d6264df4398c5ec2c01000e
  checkHalf2 :: GHC.Types.Float -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: (\ (x :: GHC.Types.Float) ->
                 case x of wild2 { GHC.Types.F# x1 ->
                 let {
                   wild4 :: GHC.Prim.Float# = GHC.Prim.divideFloat# x1 2.0#
                 } in
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.eqFloat# (GHC.Prim.plusFloat# wild4 wild4) x1) }) -}
038221b86dde91249daf809eda44abff
  checkHalf3 ::
    (GHC.Types.Float -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: GHC.Types.Float -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Float
                   @ GHC.Types.Bool
                   GHC.Float.$fShowFloat
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Float -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Float -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitraryFixed_$sarbitrarySizedFractional
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Float>_R))
                   Test.QuickCheck.Arbitrary.shrinkRealFrac_$sshrinkRealFrac
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
78433aa6ae5c3bac11eed02ce548acde
  checkReadShow :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkReadShow1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1726dd8c10c201762eea925fb279571a
  checkReadShow1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int -> GHC.Types.Bool)
                        QuickTests.$s$fTestable(->)13
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Int -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkReadShow2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
bcd4776ffbe439dc8975961c09e85b6d
  checkReadShow2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),U(U)>,
     Unfolding: (\ (x :: GHC.Types.Int) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           QuickTests.checkReadShow5
                           (case x of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) of wild {
                   [] -> case QuickTests.checkReadShow4 ret_ty GHC.Types.Bool of {}
                   : x1 ds
                   -> case ds of wild1 {
                        [] -> GHC.Classes.eqInt x1 x
                        : ipv ipv1
                        -> case QuickTests.checkReadShow3
                           ret_ty GHC.Types.Bool
                           of {} } }) -}
4701085dd788b76766b58719eb08fad1
  checkReadShow3 :: GHC.Types.Int
  {- Strictness: x -}
1e8dcfac17dd6232b28efc7650615460
  checkReadShow4 :: GHC.Types.Int
  {- Strictness: x -}
89cad6549587479b8997a0fb98f5f17f
  checkReadShow5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
0faa8e608703461fcb0ee7d20c822b32
  checkRevSquared :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkRevSquared1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
54df0025403a813f2a22f52a5fb8393f
  checkRevSquared1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ ([GHC.Types.Int] -> GHC.Types.Bool)
                        QuickTests.$s$fTestable(->)6
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkRevSquared2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
9c5c1a692e5241be6a1a0892fdbe01d5
  checkRevSquared2 :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (xs :: [GHC.Types.Int]) ->
                 GHC.Classes.$fEq[]_$s$c==
                   (GHC.List.reverse1
                      @ GHC.Types.Int
                      (GHC.List.reverse1
                         @ GHC.Types.Int
                         xs
                         (GHC.Types.[] @ GHC.Types.Int))
                      (GHC.Types.[] @ GHC.Types.Int))
                   xs) -}
cb8e38062f768562885a98f61320259e
  checkSort :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkSort1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cfb711783a36b08107bcef9d61e6bbe8
  checkSort1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ ([GHC.Types.Int] -> GHC.Types.Bool)
                        QuickTests.$s$fTestable(->)6
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkSort2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
69e722db4b9d9bcf7cc97140f736723a
  checkSort2 :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) ->
                 case QuickTests.$wgo
                        (Data.OldList.sortBy
                           @ GHC.Types.Int
                           GHC.Classes.compareInt
                           x) of ww { (#,#) ww1 ww2 ->
                 ww2 }) -}
6006b488a3b01d790f7ac12cbcbfdfed
  checkTakeLength :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkTakeLength1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f787ededb6fe36d5636a60a98fde3fc2
  checkTakeLength1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool)
                        QuickTests.checkTakeLength2
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Int
                                                            -> [GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        QuickTests.checkTakeLength_$stakeLength
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
3c5cc590864488448b89f3e763ab0885
  checkTakeLength2 ::
    (GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: GHC.Types.Int
                         -> [GHC.Types.Int] -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ ([GHC.Types.Int] -> GHC.Types.Bool)
                   GHC.Show.$fShowInt
                   QuickTests.$s$fTestable(->)6
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Int]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Int]
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Int
                                                       -> [GHC.Types.Int] -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int>_R
                                             ->_R <GHC.Show.Show GHC.Types.Int>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     ([GHC.Types.Int] -> GHC.Types.Bool)>_R
                                             ->_R <GHC.Types.Int
                                                   -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
3381d0c743fdadc7fe78d4846490dcb2
  checkTakeLength_$stakeLength ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 QuickTests.$w$stakeLength ww1 w1 }) -}
4d2765561e695df4a477658fdc5eef0e
  compFs1 :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [a]) (ys :: [a]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   $dEq
                   (GHC.Base.augment
                      @ a
                      (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ a @ b c n ys)
                      xs)
                   (GHC.Base.augment
                      @ a
                      (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ a @ b c n xs)
                      ys)) -}
c2f69d50df8541e817fb4ce33e1c60e9
  compFs1Mod :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [a]) (ys :: [a]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   $dEq
                   (GHC.Base.augment
                      @ a
                      (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ a @ b c n ys)
                      xs)
                   (GHC.Base.augment
                      @ a
                      (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ a @ b c n ys)
                      xs)) -}
d4e021e48444cc9c1ccc340e5252a4cc
  compFs2 :: GHC.Classes.Eq a => [[a]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [[a]]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   $dEq
                   (QuickTests.compFs4 @ a xs)
                   (QuickTests.compFs4 @ a xs)) -}
a1e4762fbd8249e87b2229f82901f8de
  compFs4 :: [[a]] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
69a0478d9604130cf9c98ee26c5a0573
  composition ::
    GHC.Classes.Eq c => (b -> c) -> (a -> b) -> a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,C(U)><L,C(U)><L,U>,
     Unfolding: (\ @ c
                   @ b
                   @ a
                   ($dEq :: GHC.Classes.Eq c)
                   (f :: b -> c)
                   (g :: a -> b)
                   (x :: a) ->
                 GHC.Classes.== @ c $dEq (f (g x)) (f (g x))) -}
fa4873808ef3ab0efa19bdd3429b7c5d
  divModRel :: GHC.Real.Integral a => (a, a) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,A),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Real.Integral a) (w1 :: (a, a)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 QuickTests.$wdivModRel @ a w ww1 ww2 }) -}
5b45cf059ea4c68ee609b15efb95ffc5
  dollar :: GHC.Classes.Eq b => (a -> b) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b @ a ($dEq :: GHC.Classes.Eq b) (f :: a -> b) (x :: a) ->
                 GHC.Classes.== @ b $dEq (f x) (f x)) -}
faed8db798cbdf3d710dd5287cabef70
  genNonZeroInt ::
    Test.QuickCheck.Gen.Gen (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                QuickTests.checkDivQuot3
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <(GHC.Types.Int, GHC.Types.Int)>_R)) -}
b2ffa739cd5b3420ea9635e5450ed3fb
  half :: GHC.Real.Fractional a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(C(S))LL),U(1*U(A,A,A,A,A,A,1*C1(U)),1*C1(C1(U)),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dFractional :: GHC.Real.Fractional a) (eta :: a) ->
                 GHC.Real./
                   @ a
                   $dFractional
                   eta
                   (GHC.Num.fromInteger
                      @ a
                      (GHC.Real.$p1Fractional @ a $dFractional)
                      QuickTests.half1)) -}
9cb307ae3d2f68daffff63e0ad9c5fbb
  half1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
05a985263ba0251f9cf57858cfa231dd
  halfIdentity :: GHC.Real.Fractional a => a -> a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(A,A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 let {
                   ds :: a = GHC.Num.fromInteger @ a $dNum QuickTests.half1
                 } in
                 let {
                   lvl9 :: a
                   = GHC.Num.fromInteger
                       @ a
                       (GHC.Real.$p1Fractional @ a $dFractional)
                       QuickTests.half1
                 } in
                 \ (x :: a) ->
                 GHC.Num.* @ a $dNum (GHC.Real./ @ a $dFractional x lvl9) ds) -}
83a709111d53cac6f9358fb65f06647d
  listOrdered :: GHC.Classes.Ord a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (xs :: [a]) ->
                 letrec {
                   $wgo2 :: [a] -> (# GHC.Base.Maybe a, GHC.Types.Bool #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w :: [a]) ->
                     case w of wild {
                       [] -> (# GHC.Base.Nothing @ a, GHC.Types.True #)
                       : y ys
                       -> case $wgo2 ys of ww { (#,#) ww1 ww2 ->
                          case ww2 of wild1 {
                            GHC.Types.False -> (# ww1, GHC.Types.False #)
                            GHC.Types.True
                            -> case ww1 of wild2 {
                                 GHC.Base.Nothing -> (# GHC.Base.Just @ a y, GHC.Types.True #)
                                 GHC.Base.Just x
                                 -> (# GHC.Base.Just @ a y, GHC.Classes.>= @ a $dOrd x y #) } } } }
                 } in
                 case $wgo2 xs of ww { (#,#) ww1 ww2 -> ww2 }) -}
75cf879cf731bcb7bd5193a99f92181b
  plusAssociative ::
    (GHC.Num.Num a, GHC.Classes.Eq a) => a -> a -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: a)
                   (y :: a)
                   (z :: a) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (GHC.Num.+ @ a $dNum x (GHC.Num.+ @ a $dNum y z))
                   (GHC.Num.+ @ a $dNum (GHC.Num.+ @ a $dNum x y) z)) -}
ebea5cf15349c1cfaa69e297a4b15257
  plusCommutative ::
    (GHC.Num.Num a, GHC.Classes.Eq a) => a -> a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: a)
                   (y :: a) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (GHC.Num.+ @ a $dNum x y)
                   (GHC.Num.+ @ a $dNum y x)) -}
0d4eb6a980694335a44bffffec6f2540
  powerOfAssociative ::
    (GHC.Num.Num a, GHC.Classes.Eq a, GHC.Real.Integral b,
     GHC.Real.Integral c) =>
    a -> b -> c -> GHC.Types.Bool
  {- Arity: 7,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,C(U))><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(U(U(A,C(C1(U)),C(C1(U)),A,A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   ($dIntegral :: GHC.Real.Integral b)
                   ($dIntegral1 :: GHC.Real.Integral c)
                   (eta :: a)
                   (eta1 :: b)
                   (eta2 :: c) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (GHC.Real.^
                      @ a
                      @ b
                      $dNum
                      $dIntegral
                      eta
                      (GHC.Real.^
                         @ b
                         @ c
                         (GHC.Real.$p1Real @ b (GHC.Real.$p1Integral @ b $dIntegral))
                         $dIntegral1
                         eta1
                         eta2))
                   (GHC.Real.^
                      @ a
                      @ c
                      $dNum
                      $dIntegral1
                      (GHC.Real.^ @ a @ b $dNum $dIntegral eta eta1)
                      eta2)) -}
bef9c21f180c98f8ca96d4d5334aadc9
  powerOfCommutative ::
    (GHC.Real.Integral a, GHC.Classes.Eq a) => a -> a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),C(C1(U)),A,A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,A><L,U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Real.Integral a)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: a)
                   (w3 :: a) ->
                 QuickTests.$wpowerOfCommutative @ a w w2 w3) -}
d8a1810dbc66265eb2a1c436be5645ca
  propHalfIdentity ::
    (GHC.Classes.Eq a, GHC.Real.Fractional a) => a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(U(A,A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   ($dFractional :: GHC.Real.Fractional a)
                   (x :: a) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (QuickTests.halfIdentity @ a $dFractional x)
                   x) -}
74c9dbac5687e358ae12e7b2f59b6594
  quotRemRel :: GHC.Real.Integral a => (a, a) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,A),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Real.Integral a) (w1 :: (a, a)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 QuickTests.$wquotRemRel @ a w ww1 ww2 }) -}
4a36828468bcdab45222b0f53de81799
  readShow ::
    (GHC.Show.Show a, GHC.Read.Read a, GHC.Classes.Eq a) =>
    a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(U),A)><L,1*U(A,A,1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   ($dRead :: GHC.Read.Read a)
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: a) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (case Text.Read.readEither
                           @ a
                           $dRead
                           (GHC.Show.show @ a $dShow x) of wild {
                      Data.Either.Left x1
                      -> GHC.Err.errorWithoutStackTrace @ 'GHC.Types.LiftedRep @ a x1
                      Data.Either.Right y -> y })
                   x) -}
0319bd1176d2ffa89058cf7f2d195e69
  revRevIsId :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [a]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   $dEq
                   (GHC.List.reverse1
                      @ a
                      (GHC.List.reverse1 @ a xs (GHC.Types.[] @ a))
                      (GHC.Types.[] @ a))
                   xs) -}
6f3bb89c8361b6e359ce9eae6340cecd
  takeLength ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: GHC.Types.Int) (w2 :: [a]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 QuickTests.$wtakeLength @ a ww1 w2 }) -}
d2265bc4ac77e9592103b13c5d060074
  timesAssociative ::
    (GHC.Num.Num a, GHC.Classes.Eq a) => a -> a -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: a)
                   (y :: a)
                   (z :: a) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (GHC.Num.* @ a $dNum x (GHC.Num.* @ a $dNum y z))
                   (GHC.Num.* @ a $dNum (GHC.Num.* @ a $dNum x y) z)) -}
c16b7f76c31d47b093252bb86c7e3d49
  timesCommutative ::
    (GHC.Num.Num a, GHC.Classes.Eq a) => a -> a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: a)
                   (y :: a) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   (GHC.Num.* @ a $dNum x y)
                   (GHC.Num.* @ a $dNum y x)) -}
"SPEC compFs1 @ Int" forall ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  QuickTests.compFs1 @ GHC.Types.Int $dEq
  = QuickTests.checkFs_$scompFs1
"SPEC compFs1Mod @ Int" forall ($dEq :: GHC.Classes.Eq
                                          GHC.Types.Int)
  QuickTests.compFs1Mod @ GHC.Types.Int $dEq
  = QuickTests.checkFs_$scompFs1Mod
"SPEC compFs2 @ Int" forall ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  QuickTests.compFs2 @ GHC.Types.Int $dEq
  = QuickTests.checkFs_$scompFs2
"SPEC divModRel @ Int" forall ($dIntegral :: GHC.Real.Integral
                                               GHC.Types.Int)
  QuickTests.divModRel @ GHC.Types.Int $dIntegral
  = QuickTests.checkDivQuot_$sdivModRel
"SPEC powerOfAssociative @ Int @ Int @ Int" forall ($dIntegral :: GHC.Real.Integral
                                                                    GHC.Types.Int)
                                                   ($dIntegral1 :: GHC.Real.Integral GHC.Types.Int)
                                                   ($dEq :: GHC.Classes.Eq GHC.Types.Int)
                                                   ($dNum :: GHC.Num.Num GHC.Types.Int)
  QuickTests.powerOfAssociative @ GHC.Types.Int
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dNum
                                $dEq
                                $dIntegral1
                                $dIntegral
  = QuickTests.checkAssCommPower_$spowerOfAssociative
"SPEC powerOfCommutative @ Int" forall ($dEq :: GHC.Classes.Eq
                                                  GHC.Types.Int)
                                       ($dIntegral :: GHC.Real.Integral GHC.Types.Int)
  QuickTests.powerOfCommutative @ GHC.Types.Int $dIntegral $dEq
  = QuickTests.checkAssCommPower_$spowerOfCommutative
"SPEC quotRemRel @ Int" forall ($dIntegral :: GHC.Real.Integral
                                                GHC.Types.Int)
  QuickTests.quotRemRel @ GHC.Types.Int $dIntegral
  = QuickTests.checkDivQuot_$squotRemRel
"SPEC takeLength @ Int" forall ($dEq :: GHC.Classes.Eq
                                          GHC.Types.Int)
  QuickTests.takeLength @ GHC.Types.Int $dEq
  = QuickTests.checkTakeLength_$stakeLength
"SPEC/QuickTests $fShow(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                                 GHC.Types.Int)
                                                        (v :: GHC.Show.Show GHC.Types.Int)
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = QuickTests.$s$fShow(,)
"SPEC/QuickTests $fShow[] @ [Int]" [orphan] forall (v :: GHC.Show.Show
                                                           [GHC.Types.Int])
  GHC.Show.$fShow[] @ [GHC.Types.Int] v = QuickTests.$s$fShow[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

