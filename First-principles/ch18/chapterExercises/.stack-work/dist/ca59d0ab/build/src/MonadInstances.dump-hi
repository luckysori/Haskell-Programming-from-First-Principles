
==================== FINAL INTERFACE ====================
2018-06-19 10:45:32.77918 UTC

interface chapterExercises-0.1.0.0-5O9JaGjWLcDIr5HutyUjAB:MonadInstances 8002
  interface hash: 975b6a307b735f5e664598d55b80d9d9
  ABI hash: 3ef230658d456e83a3361c11d28e2ac6
  export-list hash: d7aa64131bd8a26c6ab8d5c192ed18eb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6dcba8fa98615a486371e450629b3fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  MonadInstances.main
  MonadInstances.Nope{MonadInstances.NopeDotJpg}
module dependencies:
package dependencies: QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8
                      Win32-2.3.1.1@Win32-2.3.1.1 array-0.5.1.1@array-0.5.1.1
                      base-4.9.1.0
                      base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg
                      bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      checkers-0.4.10@checkers-0.4.10-W3llqSyopKGxuq76zAONC
                      comonad-5.0.3@comonad-5.0.3-1sUq9YbosoKHHQrV5x6ifv
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-CQzfOfECEnE83avAm7o1MS
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      semigroupoids-5.2.2@semigroupoids-5.2.2-IFwwbPAi1oUAeTAadKJAi8
                      tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4
                      template-haskell-2.11.1.0
                      text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE
                      tf-random-0.5@tf-random-0.5-8zb9gy6kAR08bzNKGLuVb6
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje
                      unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-4.9.1.0:Text.Show.Functions
         base-orphans-0.7@base-orphans-0.7-8S4ts20sdDDGKcsJJT3Axg:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         checkers-0.4.10@checkers-0.4.10-W3llqSyopKGxuq76zAONC:Test.QuickCheck.Checkers
         hashable-1.2.7.0@hashable-1.2.7.0-ExYn3eXYSfg8Z5H8Kwbxlo:Data.Hashable.Generic
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         transformers-compat-0.6.2@transformers-compat-0.6.2-56QlPzJosH7Biiu3wdRzje:Control.Monad.Trans.Instances
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Biff
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Clown
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Flip
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Join
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Joker
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Product
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Tannen
                         bifunctors-5.5.2@bifunctors-5.5.2-FlgkMC1wy8ExjCcoQvHLG:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Control.Monad.Primitive
                         primitive-0.6.4.0@primitive-0.6.4.0-GNLAlD4yr117oBmLUp0dWo:Data.Primitive.ByteArray
                         tagged-0.8.5@tagged-0.8.5-JB8QxbqnIhjLCB2R3uAUj4:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text
                         text-1.2.3.0@text-1.2.3.0-CsLQvkCbOSoGjbNqFpkphE:Data.Text.Lazy
                         unordered-containers-0.2.9.0@unordered-containers-0.2.9.0-G9hgtIe52XD5gxwrgr4F52:Data.HashMap.Base
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck 55aeb09f4e4110693e8dfdacdc6edfd7
import  -/  QuickCheck-2.11.3@QuickCheck-2.11.3-3fX1JIP7oKQKDrrcrQCqE8:Test.QuickCheck.Arbitrary f5e4f9f82b8cb4abf5ae7a89ddae0f3a
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  checkers-0.4.10@checkers-0.4.10-W3llqSyopKGxuq76zAONC:Test.QuickCheck.Checkers 137d7a4386e727678a6b2e624de81dde
import  -/  checkers-0.4.10@checkers-0.4.10-W3llqSyopKGxuq76zAONC:Test.QuickCheck.Classes 346506f28ed867269d7d834226b4fc50
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
6956b3790aad829546aad362ff73e9d5
  $fApplicativeNope :: GHC.Base.Applicative MonadInstances.Nope
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MonadInstances.Nope
                  MonadInstances.$fFunctorNope
                  MonadInstances.$fApplicativeNope_$cpure
                  MonadInstances.$fApplicativeNope_$c<*>
                  MonadInstances.$fApplicativeNope_$c*>
                  MonadInstances.$fApplicativeNope_$c<* -}
6956b3790aad829546aad362ff73e9d5
  $fApplicativeNope_$c*> ::
    MonadInstances.Nope a
    -> MonadInstances.Nope b -> MonadInstances.Nope b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   (eta :: MonadInstances.Nope a)
                   (eta1 :: MonadInstances.Nope b) ->
                 MonadInstances.NopeDotJpg @ b) -}
6956b3790aad829546aad362ff73e9d5
  $fApplicativeNope_$c<* ::
    MonadInstances.Nope a
    -> MonadInstances.Nope b -> MonadInstances.Nope a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   (eta :: MonadInstances.Nope a)
                   (eta1 :: MonadInstances.Nope b) ->
                 MonadInstances.NopeDotJpg @ a) -}
6956b3790aad829546aad362ff73e9d5
  $fApplicativeNope_$c<*> ::
    MonadInstances.Nope (a -> b)
    -> MonadInstances.Nope a -> MonadInstances.Nope b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   (ds :: MonadInstances.Nope (a -> b))
                   (ds1 :: MonadInstances.Nope a) ->
                 MonadInstances.NopeDotJpg @ b) -}
6956b3790aad829546aad362ff73e9d5
  $fApplicativeNope_$cpure :: a -> MonadInstances.Nope a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: a) -> MonadInstances.NopeDotJpg @ a) -}
6956b3790aad829546aad362ff73e9d5
  $fArbitraryNope ::
    Test.QuickCheck.Arbitrary.Arbitrary (MonadInstances.Nope a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (MonadInstances.Nope a)
                  (MonadInstances.$fArbitraryNope_$carbitrary @ a)
                  (MonadInstances.$fArbitraryNope_$cshrink @ a) -}
6956b3790aad829546aad362ff73e9d5
  $fArbitraryNope1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> MonadInstances.Nope a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <B,1*U(U,U,U,1*U,A,A)><B,A>b, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 MonadInstances.$w$carbitrary @ a ww1 ww2 ww3 ww4 }) -}
6956b3790aad829546aad362ff73e9d5
  $fArbitraryNope_$carbitrary ::
    Test.QuickCheck.Gen.Gen (MonadInstances.Nope a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <B,1*U(U,U,U,1*U,A,A)><B,A>b,
     Unfolding: InlineRule (0, True, True)
                MonadInstances.$fArbitraryNope1
                  `cast`
                (forall (a :: <*>_N).
                 Sym (Test.QuickCheck.Gen.N:Gen[0] <MonadInstances.Nope a>_R)) -}
6956b3790aad829546aad362ff73e9d5
  $fArbitraryNope_$cshrink ::
    MonadInstances.Nope a -> [MonadInstances.Nope a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: MonadInstances.Nope a) ->
                 GHC.Types.[] @ (MonadInstances.Nope a)) -}
6956b3790aad829546aad362ff73e9d5
  $fEqNope :: GHC.Classes.Eq (MonadInstances.Nope a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (MonadInstances.Nope a)
                  (MonadInstances.$fEqNope_$c== @ a)
                  (MonadInstances.$fEqNope_$c/= @ a) -}
6956b3790aad829546aad362ff73e9d5
  $fEqNope_$c/= ::
    MonadInstances.Nope a -> MonadInstances.Nope a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (a1 :: MonadInstances.Nope a)
                   (b :: MonadInstances.Nope a) ->
                 case a1 of wild { MonadInstances.NopeDotJpg ->
                 case b of wild1 { MonadInstances.NopeDotJpg ->
                 GHC.Types.False } }) -}
6956b3790aad829546aad362ff73e9d5
  $fEqNope_$c== ::
    MonadInstances.Nope a -> MonadInstances.Nope a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ds :: MonadInstances.Nope a)
                   (ds1 :: MonadInstances.Nope a) ->
                 case ds of wild { MonadInstances.NopeDotJpg ->
                 case ds1 of wild1 { MonadInstances.NopeDotJpg ->
                 GHC.Types.True } }) -}
6956b3790aad829546aad362ff73e9d5
  $fEqPropNope ::
    GHC.Classes.Eq a =>
    Test.QuickCheck.Checkers.EqProp (MonadInstances.Nope a)
  DFunId
  {- Arity: 3, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                MonadInstances.$fEqPropNope_$c=-=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                               <MonadInstances.Nope a>_N)) -}
6956b3790aad829546aad362ff73e9d5
  $fEqPropNope1 ::
    MonadInstances.Nope a
    -> MonadInstances.Nope a -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*H><L,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (a1 :: MonadInstances.Nope a)
                   (a' :: MonadInstances.Nope a) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case a1 of wild { MonadInstances.NopeDotJpg ->
                           case a' of wild1 { MonadInstances.NopeDotJpg ->
                           Test.QuickCheck.Property.succeeded } })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
6956b3790aad829546aad362ff73e9d5
  $fEqPropNope_$c=-= ::
    GHC.Classes.Eq a =>
    MonadInstances.Nope a
    -> MonadInstances.Nope a -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: MonadInstances.Nope a)
                   (eta1 :: MonadInstances.Nope a) ->
                 MonadInstances.$fEqPropNope1 @ a eta eta1) -}
6956b3790aad829546aad362ff73e9d5
  $fFunctorNope :: GHC.Base.Functor MonadInstances.Nope
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MonadInstances.Nope
                  MonadInstances.$fFunctorNope_$cfmap
                  MonadInstances.$fFunctorNope_$c<$ -}
6956b3790aad829546aad362ff73e9d5
  $fFunctorNope_$c<$ ::
    a -> MonadInstances.Nope b -> MonadInstances.Nope a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a @ b (eta :: a) (ds :: MonadInstances.Nope b) ->
                 MonadInstances.NopeDotJpg @ a) -}
6956b3790aad829546aad362ff73e9d5
  $fFunctorNope_$cfmap ::
    (a -> b) -> MonadInstances.Nope a -> MonadInstances.Nope b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a @ b (ds :: a -> b) (ds1 :: MonadInstances.Nope a) ->
                 MonadInstances.NopeDotJpg @ b) -}
6956b3790aad829546aad362ff73e9d5
  $fMonadNope :: GHC.Base.Monad MonadInstances.Nope
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MonadInstances.Nope
                  MonadInstances.$fApplicativeNope
                  MonadInstances.$fMonadNope_$c>>=
                  MonadInstances.$fMonadNope_$c>>
                  MonadInstances.$fMonadNope_$creturn
                  MonadInstances.$fMonadNope_$s$dmfail -}
6956b3790aad829546aad362ff73e9d5
  $fMonadNope_$c>> ::
    MonadInstances.Nope a
    -> MonadInstances.Nope b -> MonadInstances.Nope b
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: MonadInstances.Nope a)
                   (k :: MonadInstances.Nope b) ->
                 MonadInstances.$fMonadNope_$c>>= @ a @ b m1 (\ (ds :: a) -> k)) -}
6956b3790aad829546aad362ff73e9d5
  $fMonadNope_$c>>= ::
    MonadInstances.Nope a
    -> (a -> MonadInstances.Nope b) -> MonadInstances.Nope b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   (ds :: MonadInstances.Nope a)
                   (ds1 :: a -> MonadInstances.Nope b) ->
                 MonadInstances.NopeDotJpg @ b) -}
6956b3790aad829546aad362ff73e9d5
  $fMonadNope_$creturn :: a -> MonadInstances.Nope a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                MonadInstances.$fApplicativeNope_$cpure -}
6956b3790aad829546aad362ff73e9d5
  $fMonadNope_$s$dmfail :: GHC.Base.String -> MonadInstances.Nope a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (-1, True, True)
                (\ @ a (s :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.PtrRepLifted
                   @ (MonadInstances.Nope a)
                   s) -}
6956b3790aad829546aad362ff73e9d5
  $fShowNope :: GHC.Show.Show (MonadInstances.Nope a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (MonadInstances.Nope a)
                  (MonadInstances.$fShowNope_$cshowsPrec @ a)
                  (MonadInstances.$fShowNope_$cshow @ a)
                  (MonadInstances.$fShowNope_$cshowList @ a) -}
6956b3790aad829546aad362ff73e9d5
  $fShowNope1 :: MonadInstances.Nope a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: MonadInstances.Nope a) (eta :: GHC.Base.String) ->
                 case ds of wild { MonadInstances.NopeDotJpg ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n MonadInstances.$fShowNope2)
                   eta }) -}
9e83440d750bb1c7cbb9f2cccc0caff8
  $fShowNope2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NopeDotJpg"#) -}
6956b3790aad829546aad362ff73e9d5
  $fShowNope_$cshow :: MonadInstances.Nope a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: MonadInstances.Nope a) ->
                 case x of wild { MonadInstances.NopeDotJpg ->
                 MonadInstances.$fShowNope2 }) -}
6956b3790aad829546aad362ff73e9d5
  $fShowNope_$cshowList :: [MonadInstances.Nope a] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 GHC.Show.showList__
                   @ (MonadInstances.Nope a)
                   (MonadInstances.$fShowNope1 @ a)) -}
6956b3790aad829546aad362ff73e9d5
  $fShowNope_$cshowsPrec ::
    GHC.Types.Int -> MonadInstances.Nope a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (ds1 :: MonadInstances.Nope a)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { MonadInstances.NopeDotJpg ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n MonadInstances.$fShowNope2)
                   eta }) -}
a760fbc921a438753301fd22ee77e017
  $tc'NopeDotJpg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15827622907725569433##
                   1389107838248633821##
                   MonadInstances.$trModule
                   MonadInstances.$tc'NopeDotJpg1) -}
a05c175e2d5a194e90570e0af9e2e038
  $tc'NopeDotJpg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NopeDotJpg"#) -}
36045040e6ce788243809ea9508395f2
  $tcNope :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11712717093089506248##
                   8332635878176679225##
                   MonadInstances.$trModule
                   MonadInstances.$tcNope1) -}
4da4655505cf6d8de165da8ed8ceba63
  $tcNope1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Nope"#) -}
f35f9075a3b52c20a820508d1daeff9f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MonadInstances.$trModule2
                   MonadInstances.$trModule1) -}
3c1c65e4ad9e240fde50c29ec8a40824
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MonadInstances"#) -}
149da71f70e8b5fdf5c085c4b148e701
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "chapterExercises-0.1.0.0-5O9JaGjWLcDIr5HutyUjAB"#) -}
6956b3790aad829546aad362ff73e9d5
  $w$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> MonadInstances.Nope a
  {- Arity: 4, HasNoCafRefs, Strictness: <B,U><B,U><B,U><B,1*U>b,
     Inline: [0] -}
6956b3790aad829546aad362ff73e9d5
  type role Nope phantom
  data Nope a = NopeDotJpg
bbcff02720f5096e3a4cf57ad6176ba1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                MonadInstances.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
20756ae70b39a727cfc429e2bdc8cc51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Classes.$wmonad
                        @ MonadInstances.Nope
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        MonadInstances.$fMonadNope
                        GHC.Show.$fShowInt
                        Test.QuickCheck.Arbitrary.$fArbitraryInt
                        Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                          `cast`
                        (Trans
                             (forall (b :: <*>_N).
                              <GHC.Types.Int>_R
                              ->_R <Test.QuickCheck.Gen.Gen b>_R
                              ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b>_R))
                             (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                       <GHC.Types.Int>_N)))
                        Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                          `cast`
                        (Trans
                             (forall (b :: <*>_N).
                              <GHC.Types.Int>_R
                              ->_R <Test.QuickCheck.Gen.Gen b>_R
                              ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b>_R))
                             (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                       <GHC.Types.Int>_N)))
                        (MonadInstances.$fArbitraryNope @ GHC.Types.Int)
                        (MonadInstances.$fEqPropNope1 @ GHC.Types.Int)
                          `cast`
                        (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                                  <MonadInstances.Nope GHC.Types.Int>_N))
                        (MonadInstances.$fShowNope @ GHC.Types.Int)
                        (MonadInstances.$fArbitraryNope @ GHC.Types.Int)
                        (MonadInstances.$fEqPropNope1 @ GHC.Types.Int)
                          `cast`
                        (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                                  <MonadInstances.Nope GHC.Types.Int>_N))
                        (MonadInstances.$fArbitraryNope @ GHC.Types.Int)
                        (MonadInstances.$fEqPropNope1 @ GHC.Types.Int)
                          `cast`
                        (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                                  <MonadInstances.Nope GHC.Types.Int>_N)) of ww { (#,#) ww1 ww2 ->
                 Test.QuickCheck.Checkers.$wcheckBatch
                   Test.QuickCheck.Checkers.quick'
                   ww1
                   ww2
                   w1 }) -}
instance GHC.Base.Applicative [MonadInstances.Nope]
  = MonadInstances.$fApplicativeNope
instance Test.QuickCheck.Arbitrary.Arbitrary [MonadInstances.Nope]
  = MonadInstances.$fArbitraryNope
instance GHC.Classes.Eq [MonadInstances.Nope]
  = MonadInstances.$fEqNope
instance Test.QuickCheck.Checkers.EqProp [MonadInstances.Nope]
  = MonadInstances.$fEqPropNope
instance GHC.Base.Functor [MonadInstances.Nope]
  = MonadInstances.$fFunctorNope
instance GHC.Base.Monad [MonadInstances.Nope]
  = MonadInstances.$fMonadNope
instance GHC.Show.Show [MonadInstances.Nope]
  = MonadInstances.$fShowNope
"SPEC/MonadInstances $dmfail @ Nope" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                   MonadInstances.Nope)
  GHC.Base.$dmfail @ MonadInstances.Nope $dMonad
  = MonadInstances.$fMonadNope_$s$dmfail
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

